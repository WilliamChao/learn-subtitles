1
00:00:00,152 --> 00:00:01,745
要讓碰撞體變成觸發器(Trigger)

2
00:00:01,745 --> 00:00:03,564
要讓碰撞體變成觸發器(Trigger)

3
00:00:03,564 --> 00:00:05,564
只要把檢視屬性的Is Trigger打勾即可

4
00:00:05,564 --> 00:00:07,564
只要把檢視屬性的Is Trigger打勾即可

5
00:00:08,395 --> 00:00:10,395
當碰撞體變成觸發器時

6
00:00:10,395 --> 00:00:12,769
它將不會有碰撞運算，反而會穿過它

7
00:00:12,769 --> 00:00:15,143
這樣就可以用程式來判斷檢查

8
00:00:15,143 --> 00:00:15,989
這樣就可以用程式來判斷檢查

9
00:00:16,130 --> 00:00:17,842
如同一般的碰撞體

10
00:00:17,842 --> 00:00:19,786
當其他物件進入觸發器時可以呼叫事件

11
00:00:19,786 --> 00:00:21,786
當其他物件進入觸發器時可以呼叫事件

12
00:00:22,466 --> 00:00:25,061
在這個範例裡，我們有一個方塊觸發器

13
00:00:25,061 --> 00:00:27,061
在這個範例裡，我們有一個方塊觸發器

14
00:00:27,561 --> 00:00:30,578
和一個往下掉的球

15
00:00:31,863 --> 00:00:33,863
球會掉入觸發器

16
00:00:33,863 --> 00:00:37,180
往前滾動最後離開

17
00:00:38,523 --> 00:00:40,783
我們來看看放在觸發器上的腳本

18
00:00:40,783 --> 00:00:43,117
已經有三個事件在上面

19
00:00:43,117 --> 00:00:46,537
進入事件(OnTriggerEnter)和記錄Log到Console

20
00:00:46,537 --> 00:00:48,717
也有停留事件(OntriggerStay)

21
00:00:48,717 --> 00:00:50,424
和離開事件(OnTriggerExit)

22
00:00:50,648 --> 00:00:52,161
如果我暫停遊戲

23
00:00:52,161 --> 00:00:54,696
並逐步執行遊戲

24
00:00:55,790 --> 00:00:57,790
Console介面可以看到物件進入觸發器的訊息

25
00:00:57,790 --> 00:00:59,790
Console介面可以看到物件進入觸發器的訊息

26
00:01:01,174 --> 00:01:03,174
停留的禎數

27
00:01:08,453 --> 00:01:10,453
和最後離開的訊息

28
00:01:12,528 --> 00:01:14,528
觸發器規則和碰撞體相同

29
00:01:14,528 --> 00:01:17,017
兩個物件其中一個要有剛體(Rigidbody)

30
00:01:17,186 --> 00:01:19,186
標準的作法是把你的觸發器設定為靜態物件

31
00:01:19,186 --> 00:01:20,855
標準的作法是把你的觸發器設定為靜態物件

32
00:01:20,855 --> 00:01:22,565
代表它們將不受物理引擎影響

33
00:01:22,565 --> 00:01:24,565
通常你可以做一個

34
00:01:24,565 --> 00:01:26,565
觸發器然後用有剛體的物件穿過它

35
00:01:26,565 --> 00:01:29,009
就好像剛剛的範例

36
00:01:29,108 --> 00:01:30,898
我們讓有鋼體(Rigidbody)的球

37
00:01:30,898 --> 00:01:32,996
穿過觸發區(Trigger)並偵測

38
00:01:32,996 --> 00:01:34,730
是否有東西進入觸發區

39
00:01:34,730 --> 00:01:36,730
因此用來作為觸發器的碰撞體

40
00:01:36,730 --> 00:01:38,428
也可以稱作觸發區(Trigger Zone)

41
00:01:38,428 --> 00:01:40,776
可以呼叫程式但不須有實體物件的碰撞體

42
00:01:40,776 --> 00:01:42,776
可以呼叫程式但不須有實體物件的碰撞體

43
00:01:43,235 --> 00:01:45,235
舉例來說，這是一個飄浮墊

44
00:01:45,235 --> 00:01:47,473
我們可以增加一個力道(Force)給我們的球

45
00:01:47,473 --> 00:01:49,045
讓球在觸發區飄浮起來

46
00:01:49,045 --> 00:01:51,574
讓球在觸發區飄浮起來

47
00:01:51,574 --> 00:01:54,086
舉例來說，我們可以透過other物件

48
00:01:54,086 --> 00:01:56,086
來呼叫停留在觸發區裡的物件

49
00:01:56,086 --> 00:01:58,086
因為停留在觸發區裡的物件

50
00:01:58,086 --> 00:02:00,086
會被存在一個名為'other'碰撞體結構中

51
00:02:00,086 --> 00:02:02,381
我們可以加入rigidbody和AddForce

52
00:02:02,381 --> 00:02:04,381
我們可以加入rigidbody和AddForce

53
00:02:04,381 --> 00:02:07,554
然後是Vector3.up

54
00:02:07,554 --> 00:02:09,845
這是往上在世界座標中的簡寫

55
00:02:09,845 --> 00:02:11,845
然後乘上一個變數值

56
00:02:11,845 --> 00:02:13,845
然後乘上一個叫hoverForce的變數值

57
00:02:14,110 --> 00:02:15,957
選擇了Acceleration模式之後

58
00:02:15,957 --> 00:02:19,196
函式就完成了

59
00:02:21,298 --> 00:02:24,218
然後我們移動球到飄浮墊上

60
00:02:25,229 --> 00:02:27,062
為了避免它亂跑

61
00:02:27,062 --> 00:02:29,574
我們凍結X和Z軸移動

62
00:02:29,812 --> 00:02:31,735
只有Y軸允許作用

63
00:02:31,735 --> 00:02:33,372
只有Y軸允許作用

64
00:02:34,235 --> 00:02:36,638
接下來執行遊戲，你可以看到

65
00:02:36,638 --> 00:02:38,638
球就會浮在空中

66
00:02:38,638 --> 00:02:40,638
它讓你不需要任何模型

67
00:02:40,638 --> 00:02:42,240
就可以建立懸浮的效果

68
00:02:42,240 --> 00:02:44,240
就可以建立懸浮的效果
