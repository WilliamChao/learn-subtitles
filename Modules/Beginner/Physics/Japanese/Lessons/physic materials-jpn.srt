1
00:00:00,000 --> 00:00:02,300
物理マテリアル (Physics Material) は

2
00:00:02,300 --> 00:00:04,300
ゲームオブジェクトの見映えに影響する代わりに

3
00:00:04,300 --> 00:00:06,300
オブジェクトが物理エンジンに対してオブジェクトがどう反応するかに

4
00:00:06,300 --> 00:00:08,300
影響するマテリアルです。

5
00:00:08,300 --> 00:00:10,760
バスケットボールとボウリングボールで、跳ね方が

6
00:00:10,760 --> 00:00:12,760
どう違うか考えてみてください。重さにも違いが

7
00:00:12,760 --> 00:00:14,760
ありますが、表面もまた大きく違いがあり、

8
00:00:14,760 --> 00:00:17,130
他の表面とも違う反応を示す場合が

9
00:00:17,130 --> 00:00:19,130
あります。物理マテリアルは

10
00:00:19,130 --> 00:00:21,130
プロジェクトパネルの Create ボタンにより

11
00:00:21,130 --> 00:00:23,130
作成することが出来ます。

12
00:00:24,890 --> 00:00:26,890
そしてインスペクタで編集することで

13
00:00:26,890 --> 00:00:29,030
他の表面に対してどのように反応するか

14
00:00:29,030 --> 00:00:31,980
制御できます。これを行なうためには摩擦を制御します。

15
00:00:31,980 --> 00:00:33,980
Dynamic Friction （動摩擦係数）はオブジェクトが動く時に

16
00:00:33,980 --> 00:00:35,980
どの程度の摩擦があるかを示し、

17
00:00:35,980 --> 00:00:38,100
Static Friction （静摩擦係数）は

18
00:00:38,100 --> 00:00:40,100
オブジェクトを静的な位置から

19
00:00:40,100 --> 00:00:41,830
移動するのに必要な力を示します。

20
00:00:42,020 --> 00:00:44,260
Bounciness （跳ね返り係数）は名前と同じ働きをします。

21
00:00:44,260 --> 00:00:46,510
オブジェクトがいかに跳ねやすいか制御します。

22
00:00:46,870 --> 00:00:48,950
そして Friction Combine 設定は

23
00:00:48,950 --> 00:00:51,780
特定のマテリアルをもった別のオブジェクトにどのように反応するか

24
00:00:51,780 --> 00:00:54,290
制御します。Friction Directionにより、

25
00:00:54,290 --> 00:00:56,290
特定軸での摩擦を

26
00:00:56,290 --> 00:00:58,780
制御できて、Dynamic Friction 2 および

27
00:00:58,780 --> 00:01:00,780
Static Friction 2 プロパティは

28
00:01:00,780 --> 00:01:03,570
この 3 つの軸に対する制御ができます。

29
00:01:03,570 --> 00:01:06,010
このサンプルでは、この

30
00:01:06,010 --> 00:01:08,960
特定の物理マテリアルを powerCube および

31
00:01:08,960 --> 00:01:11,400
bench_work にアタッチしています。

32
00:01:11,720 --> 00:01:13,720
物理マテリアルは

33
00:01:13,720 --> 00:01:16,080
任意のゲームオブジェクトのコライダに適用され

34
00:01:16,080 --> 00:01:17,910
コライダの設定にマテリアルのスロットがあることを

35
00:01:17,910 --> 00:01:20,970
確認できます。

36
00:01:22,820 --> 00:01:24,820
Play ボタンを押下した後、

37
00:01:25,320 --> 00:01:28,160
わずかに跳ねて、そしてとても滑りやすくなっています。

38
00:01:29,290 --> 00:01:31,290
この理由は Dynamic Friction および Static Friction に 0 を

39
00:01:31,290 --> 00:01:33,870
使用したためであり、この場合は

40
00:01:33,870 --> 00:01:35,870
滑ることを防ぐものがなく、

41
00:01:35,870 --> 00:01:37,870
さらに跳ねやすくしています。

42
00:01:38,370 --> 00:01:40,370
ここで大きく跳ねやすくすると

43
00:01:40,870 --> 00:01:42,870
これで跳ねてテーブルから落ちます。

44
00:01:44,560 --> 00:01:46,860
そして例えば、もし動作を特定の軸だけ

45
00:01:46,860 --> 00:01:48,860
制限したい場合

46
00:01:48,860 --> 00:01:50,860
X 軸が滑っている方向であることが

47
00:01:50,860 --> 00:01:53,300
確認できるので、出来ることとしては

48
00:01:53,300 --> 00:01:55,300
マテリアルに戻って

49
00:01:55,300 --> 00:01:57,940
X の Friction Direction を 1 にして

50
00:01:57,940 --> 00:02:00,940
Dynamic Friction を増加させます。

51
00:02:00,940 --> 00:02:03,670
Bounciness はより小さい数字にして

52
00:02:03,670 --> 00:02:05,670
テーブルから跳ねて落ちないようにします。

53
00:02:07,470 --> 00:02:09,470
これで徐々に静止するようになり、

54
00:02:09,470 --> 00:02:11,830
これは設定した Friction の大きさが影響しています。

55
00:02:12,330 --> 00:02:14,330
このため、より小さくしてみると

56
00:02:19,610 --> 00:02:21,610
再び滑り始めることが確認できます。

57
00:02:28,740 --> 00:02:30,130
これによって

58
00:02:30,130 --> 00:02:32,130
物理マテリアルにより

59
00:02:32,130 --> 00:02:33,580
オブジェクトの表面と他の表面とどう反応するか

60
00:02:33,580 --> 00:02:35,580
完全に制御できることが分かります。
(翻訳:gamesonytablet)
