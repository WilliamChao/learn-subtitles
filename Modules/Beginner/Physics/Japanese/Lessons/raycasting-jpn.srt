1
00:00:00,000 --> 00:00:02,100
Raycast とはある地点から透明な線 (Ray) を

2
00:00:02,100 --> 00:00:04,280
特定の方向に引いて

3
00:00:04,280 --> 00:00:06,770
その Ray 上のどこかでコライダがあるか

4
00:00:06,770 --> 00:00:08,770
検知するものです。

5
00:00:08,770 --> 00:00:10,770
例をあげると、

6
00:00:10,770 --> 00:00:12,870
銃から弾を発射するケースです。このレッスンでは

7
00:00:12,870 --> 00:00:14,870
キャラクターが、

8
00:00:14,870 --> 00:00:16,870
裏切り者で父を殺した敵である悪魔の箱を撃つことにしましょう。

9
00:00:17,370 --> 00:00:20,100
Raycast 関数の文法は次のようなものです。

10
00:00:20,100 --> 00:00:22,100
最初はまぎわらしいかもしれませんが

11
00:00:22,100 --> 00:00:24,530
一回それぞれの部分で何がおこなわれるのか

12
00:00:24,530 --> 00:00:26,200
理解すれば良く意味が分かるようになります。

13
00:00:26,200 --> 00:00:28,200
最初に Ray の原点は

14
00:00:28,200 --> 00:00:30,200
ワールド空間座標のどこかの地点です。

15
00:00:30,200 --> 00:00:32,200
このレッスンでは銃の銃口の前の地点を

16
00:00:32,200 --> 00:00:34,200
どこか選んで

17
00:00:34,200 --> 00:00:37,580
Vector3 として X, Y, Z を格納します。

18
00:00:37,920 --> 00:00:39,920
しかし、ワールド空間座標の向きは

19
00:00:39,920 --> 00:00:41,930
撃つ方向に向いていないため

20
00:00:41,930 --> 00:00:44,420
二つめの Vector3 により向き(direction) を

21
00:00:44,420 --> 00:00:46,210
格納する必要があります。

22
00:00:46,210 --> 00:00:48,210
この二つの Vector3 変数により

23
00:00:48,210 --> 00:00:51,160
Ray が構成されます。さらに Ray 変数により

24
00:00:51,160 --> 00:00:53,690
代用が可能であり、このデータ型で

25
00:00:53,690 --> 00:00:55,690
二つの Vector3 変数を格納出来ます。

26
00:00:55,690 --> 00:00:57,690
コードは次のようになります。

27
00:01:02,380 --> 00:01:04,200
関数の次の引数は

28
00:01:04,200 --> 00:01:06,200
RaycastHit 変数であり、

29
00:01:06,200 --> 00:01:08,140
コライダの衝突にもとづいて情報を格納します。

30
00:01:08,450 --> 00:01:10,450
これにより、コードの中でクエリをかけて

31
00:01:10,450 --> 00:01:12,850
どのオブジェクトが Ray と交差するか判定出来ます。

32
00:01:13,150 --> 00:01:15,610
最後に、必須ではない引数が二つあります。

33
00:01:15,610 --> 00:01:17,610
ひとつは Distance であり Ray の長さが決まり、

34
00:01:17,610 --> 00:01:19,610
もし省略した場合、 Ray の長さはデフォルトで

35
00:01:19,610 --> 00:01:21,610
無限（infinity）となります。

36
00:01:21,610 --> 00:01:23,610
そしてレイヤーマスク（Layer Mask）です。これは

37
00:01:23,610 --> 00:01:26,550
Unity のレイヤーシステムにおける特定のレイヤー番号であり、

38
00:01:26,550 --> 00:01:28,550
もし Ray に無視させたいオブジェクトがある場合、

39
00:01:28,550 --> 00:01:30,220
そのレイヤーに配置することができます。

40
00:01:30,220 --> 00:01:32,220
それでは Raycast を使用した実用的な例を

41
00:01:32,220 --> 00:01:33,510
みていきます。

42
00:01:33,510 --> 00:01:35,890
このサンプルではパラシュートつきの壷があり

43
00:01:35,890 --> 00:01:37,360
フロアに近いとき、パラシュートが

44
00:01:37,360 --> 00:01:39,200
開きます。

45
00:01:40,460 --> 00:01:42,260
壷は二つの部分から構成されていて

46
00:01:42,260 --> 00:01:44,030
パラシュートと壷そのものです。

47
00:01:44,030 --> 00:01:46,030
パラシュートには二つのアニメーションがあり、

48
00:01:46,530 --> 00:01:48,040
一つはパラシュートを開くためののものであり、

49
00:01:48,600 --> 00:01:50,030
もうひとつは閉じるためのものです。

50
00:01:50,920 --> 00:01:52,920
このサンプルでは Raycast を下方向に

51
00:01:52,920 --> 00:01:55,330
行なってフロアから壷がどれくらい

52
00:01:55,330 --> 00:01:57,330
離れているかみて、environment コライダを

53
00:01:57,330 --> 00:02:00,120
みつけることでフロアの確認を行ないます。

54
00:02:00,620 --> 00:02:03,150
environment コライダは

55
00:02:03,150 --> 00:02:04,690
environment という用語でタグづけされています。

56
00:02:05,400 --> 00:02:09,200
スクリプトの中でそのタグを探しています。

57
00:02:10,880 --> 00:02:12,480
Raycast 関数は if 文の中に

58
00:02:12,480 --> 00:02:15,660
配置されているので、もし戻り値が true である場合、

59
00:02:15,660 --> 00:02:17,660
つまり何かと交差した場合、

60
00:02:17,660 --> 00:02:19,660
if 文の中のコマンドが実行されて

61
00:02:19,660 --> 00:02:21,660
RaycastHit 変数にクエリをかけて

62
00:02:21,660 --> 00:02:25,240
何をヒットしたかが取得できます。

63
00:02:26,240 --> 00:02:29,180
今回 if 文の中に

64
00:02:29,180 --> 00:02:32,860
Physics.Raycast を記述して、landingRay 変数により

65
00:02:32,860 --> 00:02:35,710
箱の位置および下向きの方向を

66
00:02:35,710 --> 00:02:37,710
格納します。Vector3.down というショートカット

67
00:02:37,710 --> 00:02:39,710
を今回使用しています。

68
00:02:39,710 --> 00:02:41,960
そしてこれを Raycast で使用する Ray としています。

69
00:02:41,960 --> 00:02:44,370
RaycastHit 変数である hit は

70
00:02:44,370 --> 00:02:46,370
下向きに Raycast するときに、

71
00:02:46,370 --> 00:02:48,370
Ray によりヒットを受けるもの全てを格納します。

72
00:02:48,370 --> 00:02:50,370
そして Ray の距離、すなわち length は

73
00:02:50,370 --> 00:02:53,410
deploymentHeight 変数により定義されます。

74
00:02:53,410 --> 00:02:55,860
もし Ray がコライダと交差した場合、

75
00:02:58,860 --> 00:03:01,800
DeployParachute 関数をコールします。

76
00:03:02,300 --> 00:03:04,760
この関数は boolean 型である deployed フラグに true くをセットして

77
00:03:04,760 --> 00:03:08,190
反復しないようにします。

78
00:03:08,690 --> 00:03:11,020
次に Rigidbody の Drag を

79
00:03:11,020 --> 00:03:13,900
に parachuteEffectiveness 変数の値をセットします。

80
00:03:13,900 --> 00:03:15,900
このため 壷がパラシュートにより抑制されたかのように

81
00:03:15,900 --> 00:03:17,580
動きを遅くします。

82
00:03:17,580 --> 00:03:19,580
さらに parachute オブジェクトのアニメーションを

83
00:03:19,580 --> 00:03:21,580
再生して、

84
00:03:21,580 --> 00:03:23,580
これは public 変数に割り当てする

85
00:03:23,580 --> 00:03:25,160
ゲームオブジェクトです。

86
00:03:25,360 --> 00:03:27,940
次に別の OnCollisionEnter  があり、

87
00:03:27,940 --> 00:03:29,940
閉じるアニメーションを再生します。

88
00:03:29,940 --> 00:03:31,940
このため、地面または別のオブジェクトに当たると、パラシュートは

89
00:03:31,940 --> 00:03:34,720
閉じることが出来ます。

90
00:03:36,440 --> 00:03:39,570
ここで Ray の length に 4 をセットするために

91
00:03:39,570 --> 00:03:41,810
deplomentHeight に 4 をセットします。

92
00:03:42,030 --> 00:03:45,420
Rigidbody の Drag に 8 をセットするために

93
00:03:45,670 --> 00:03:48,620
Parachute Effectiveness に 8 をセットします。

94
00:03:48,620 --> 00:03:50,620
そして prop_parachuteCrate_chute オブジェクト を

95
00:03:50,620 --> 00:03:54,270
Parachute 変数の上にドラッグしています。

96
00:03:54,270 --> 00:03:57,120
Animation コンポーネントがアタッチされているオブジェクトである

97
00:03:57,120 --> 00:03:59,120
ため、開いたり閉じたりするアンメーションを

98
00:03:59,120 --> 00:04:01,120
再生するためです。

99
00:04:01,120 --> 00:04:03,120
それでは再生をもう一回だけみてみましょう。

100
00:04:06,680 --> 00:04:08,680
シーンビューまたはゲームビューで

101
00:04:08,680 --> 00:04:10,680
Raycast が描画されないことは

102
00:04:10,680 --> 00:04:13,090
覚えておくべき

103
00:04:13,090 --> 00:04:15,490
です。一方で

104
00:04:15,490 --> 00:04:18,010
Debug.DrawRay 関数を使用すれば

105
00:04:18,010 --> 00:04:21,050
Ray のプレビューをすることが出来ます。

106
00:04:21,050 --> 00:04:23,500
Debug.DrawRay を追加することで

107
00:04:23,500 --> 00:04:25,500
Vector3.down の向きに

108
00:04:25,500 --> 00:04:27,500
箱の位置からの

109
00:04:27,500 --> 00:04:30,080
視覚的な Ray を描画して、

110
00:04:30,080 --> 00:04:33,730
長さとしては length に deploymentHeight を掛け算することが出来ます。

111
00:04:33,730 --> 00:04:35,730
こうすることで、

112
00:04:35,730 --> 00:04:38,240
下の if 文で実際に行なう Raycast と一致します。

113
00:04:38,550 --> 00:04:40,550
再生を行なうことで、

114
00:04:40,550 --> 00:04:42,550
Unity 上のシーンビューにて Ray が

115
00:04:42,550 --> 00:04:45,890
描画されるところを確認することができます。
