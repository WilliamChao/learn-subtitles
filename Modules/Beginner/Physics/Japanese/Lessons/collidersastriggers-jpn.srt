1
00:00:00,152 --> 00:00:01,745
コライダをトリガーにするには

2
00:00:01,745 --> 00:00:03,564
単にインスペクタ上の

3
00:00:03,564 --> 00:00:05,564
Is Trigger チェックボックスをクリックする

4
00:00:05,564 --> 00:00:07,564
のみです。

5
00:00:08,395 --> 00:00:10,395
コライダがトリガーであるとき、

6
00:00:10,395 --> 00:00:12,769
何かがぶつかるようなことはなくなります。その代わりに

7
00:00:12,769 --> 00:00:15,143
通り抜けたうえで

8
00:00:15,143 --> 00:00:15,989
コードにより判定することができます。

9
00:00:16,130 --> 00:00:17,842
通常のコライダと同様に、

10
00:00:17,842 --> 00:00:19,786
トリガー コライダと他のコライダが重なり合っているときは

11
00:00:19,786 --> 00:00:21,786
イベントが呼ばれます。

12
00:00:22,466 --> 00:00:25,061
このサンプルでは

13
00:00:25,061 --> 00:00:27,061
Is Trigger を有効化してあるボックス コライダがあり、

14
00:00:27,561 --> 00:00:30,578
prop_samoflange オブジェクトが落下しています。

15
00:00:31,863 --> 00:00:33,863
オブジェクトはトリガーに入り (enter)、

16
00:00:33,863 --> 00:00:37,180
トリガー内に残ったまま (stay) 前方に転がって、そしてトリガーから出ます (exit)。

17
00:00:38,523 --> 00:00:40,783
これらのイベントをチェックするには、トリガーに

18
00:00:40,783 --> 00:00:43,117
スクリプトを追加して、

19
00:00:43,117 --> 00:00:46,537
OnTriggerEnter を登録してコンソール出力します。

20
00:00:46,537 --> 00:00:48,717
OnTriggerStay および

21
00:00:48,717 --> 00:00:50,424
OnTriggerExit も同様です。

22
00:00:50,648 --> 00:00:52,161
このためゲームをポーズしたうえで

23
00:00:52,161 --> 00:00:54,696
一フレームずつステップ実行すると

24
00:00:55,790 --> 00:00:57,790
コンソールをみることで

25
00:00:57,790 --> 00:00:59,790
オブジェクトはトリガーに入り、

26
00:01:01,174 --> 00:01:03,174
数フレーム残った後、最終的に

27
00:01:08,453 --> 00:01:10,453
トリガーから出ます。

28
00:01:12,528 --> 00:01:14,528
一般的な衝突と同様に、

29
00:01:14,528 --> 00:01:17,017
オブジェクトのひとつは Rigidbody がアタッチされてる必要があります。

30
00:01:17,186 --> 00:01:19,186
トリガー コライダを static オブジェクトとする

31
00:01:19,186 --> 00:01:20,855
ことが一般的な手法です。

32
00:01:20,855 --> 00:01:22,565
言いかえると物理エンジンにより動かされることが

33
00:01:22,565 --> 00:01:24,565
ありません。このため通常はトリガーを作成して

34
00:01:24,565 --> 00:01:26,565
中に Rigidbody を通過させます。

35
00:01:26,565 --> 00:01:29,009
このサンプルも同様です。

36
00:01:29,108 --> 00:01:30,898
Rigidbody オブジェクトにトリガー ゾーンを

37
00:01:30,898 --> 00:01:32,996
通過させて何かがトリガーに入ると

38
00:01:32,996 --> 00:01:34,730
検知しています。

39
00:01:34,730 --> 00:01:36,730
トリガー コライダは

40
00:01:36,730 --> 00:01:38,428
トリガー ゾーンとも呼ばれますが、要するに働きとして

41
00:01:38,428 --> 00:01:40,776
ゲームの中で物理的に衝突することなく

42
00:01:40,776 --> 00:01:42,776
コードをコールすることが出来ます。

43
00:01:43,235 --> 00:01:45,235
例えば、hoverpad では

44
00:01:45,235 --> 00:01:47,473
samoflange ボールに力 (Force) を加えて

45
00:01:47,473 --> 00:01:49,045
トリガーゾーンに残っているかぎり、

46
00:01:49,045 --> 00:01:51,574
ホバリングの効果を得ることが出来ます。

47
00:01:51,574 --> 00:01:54,086
例えば、現在トリガー内に残る

48
00:01:54,086 --> 00:01:56,086
オブジェクトを見つけるには

49
00:01:56,086 --> 00:01:58,086
Collider 型の変数 other に

50
00:01:58,086 --> 00:02:00,086
どのオブジェクトが残っているかで

51
00:02:00,086 --> 00:02:02,381
判断出来ます。次に Rigidbody を見つけて

52
00:02:02,381 --> 00:02:04,381
Vector3.up の方向、

53
00:02:04,381 --> 00:02:07,554
すなわちワールド空間座標の上方向に

54
00:02:07,554 --> 00:02:09,845
力を加えることが出来ます。

55
00:02:09,845 --> 00:02:11,845
次に後で変数として保存する数字に

56
00:02:11,845 --> 00:02:13,845
掛け算します。

57
00:02:14,110 --> 00:02:15,957
AddForce を終えるにあたって

58
00:02:15,957 --> 00:02:19,196
モードは Acceleration を選択します。

59
00:02:21,298 --> 00:02:24,218
次にオブジェクトを hoverpad の上を移動させて

60
00:02:25,229 --> 00:02:27,062
Freeze Position を使用して

61
00:02:27,062 --> 00:02:29,574
同じ XZ 平面に残すようにします。

62
00:02:29,812 --> 00:02:31,735
Y 方向の力により

63
00:02:31,735 --> 00:02:33,372
ホバリング効果を創り出します。

64
00:02:34,235 --> 00:02:36,638
これで Play ボタンを押すと、みてのとおり

65
00:02:36,638 --> 00:02:38,638
エリアの中ににいるかぎり、

66
00:02:38,638 --> 00:02:40,638
ホバリング効果を創り出して、

67
00:02:40,638 --> 00:02:42,240
物体のどの部分とも作用することが

68
00:02:42,240 --> 00:02:44,240
ありません。
