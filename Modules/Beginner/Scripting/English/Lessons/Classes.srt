1
00:00:00,235 --> 00:00:02,569
In Unity each script contains a definition

2
00:00:02,569 --> 00:00:05,194
for a class. If we were to extend our

3
00:00:05,194 --> 00:00:07,194
metaphor where variables are boxes

4
00:00:07,194 --> 00:00:09,846
and functions are machines then classes

5
00:00:09,846 --> 00:00:11,846
would be the factories that these boxes

6
00:00:11,846 --> 00:00:14,521
and machines are in. You may have noticed

7
00:00:14,521 --> 00:00:16,135
that scripts from other tutorials have 

8
00:00:16,135 --> 00:00:18,135
keyword class near the top.

9
00:00:19,118 --> 00:00:21,118
Unity automatically puts this line in

10
00:00:21,118 --> 00:00:23,118
the script for you when you create a new

11
00:00:23,118 --> 00:00:26,498
C# script. This is implicit in Javascript,

12
00:00:26,498 --> 00:00:28,498
meaning that you won't see the definition

13
00:00:28,498 --> 00:00:30,498
but Unity still treats the contents of 

14
00:00:30,498 --> 00:00:32,179
this script as a class.

15
00:00:32,679 --> 00:00:34,679
This class shares the same name as the

16
00:00:34,679 --> 00:00:37,516
script it is in. This is very important,

17
00:00:37,516 --> 00:00:39,516
and if you change the name of one you 

18
00:00:39,516 --> 00:00:40,994
must change the name of the other.

19
00:00:41,494 --> 00:00:43,494
It is often best not to change the name of

20
00:00:43,494 --> 00:00:45,632
scripts of classes unless you absolutely

21
00:00:45,632 --> 00:00:47,632
have to. So try to name your script

22
00:00:47,632 --> 00:00:49,632
sensibly when you create it.

23
00:00:49,980 --> 00:00:51,980
The class is a container for variables

24
00:00:51,980 --> 00:00:53,980
and functions and provides, amongst other

25
00:00:53,980 --> 00:00:55,980
things a nice way to group things

26
00:00:55,980 --> 00:00:57,552
that work together.

27
00:00:58,052 --> 00:01:00,052
They are an organisational tool in

28
00:01:00,052 --> 00:01:02,776
something known as Object Oriented Programming,

29
00:01:02,776 --> 00:01:04,692
or OOP for short.

30
00:01:04,692 --> 00:01:07,985
The solution and core of OOP is to split the

31
00:01:07,985 --> 00:01:09,985
script up in to multiple scripts,

32
00:01:09,985 --> 00:01:11,985
each one taking a single role.

33
00:01:12,485 --> 00:01:14,485
Classes should therefore be dedicated 

34
00:01:14,485 --> 00:01:18,222
to one task. In this example we have a script

35
00:01:18,222 --> 00:01:20,222
that handles a number of different tasks

36
00:01:20,222 --> 00:01:22,222
so we should split it up in to three

37
00:01:22,222 --> 00:01:24,776
shorter scripts to make it easier to manage.

38
00:01:24,776 --> 00:01:26,651
This script, for example, handles an 

39
00:01:26,651 --> 00:01:29,618
inventory, movement and shooting.

40
00:01:30,836 --> 00:01:32,445
Here's the script in action when

41
00:01:32,445 --> 00:01:34,044
attached to a cube.

42
00:01:34,544 --> 00:01:36,516
We can drive it around, we can shoot

43
00:01:36,516 --> 00:01:38,516
some small objects

44
00:01:39,016 --> 00:01:41,016
and we can keep track of items in our

45
00:01:41,016 --> 00:01:43,697
inventory. But this is all contained

46
00:01:43,697 --> 00:01:45,697
within a single character script.

47
00:01:46,197 --> 00:01:48,197
What we should be doing is organising

48
00:01:48,197 --> 00:01:51,470
this into inventory, movement and shooting

49
00:01:51,470 --> 00:01:53,470
as three separate classes.

50
00:01:53,970 --> 00:01:56,661
So if I switch to another scene,

51
00:01:56,661 --> 00:01:58,661
which looks identical, then the cube

52
00:01:58,661 --> 00:02:00,661
has scripts which handle each of these things

53
00:02:00,661 --> 00:02:02,661
individually. This makes these

54
00:02:02,661 --> 00:02:05,785
scripts easier to manager, easier to read

55
00:02:05,785 --> 00:02:07,785
and more efficient to write.

56
00:02:07,785 --> 00:02:09,785
Let's take a look at the use of a class.

57
00:02:10,285 --> 00:02:12,844
In this example we have our inventory class.

58
00:02:13,344 --> 00:02:15,051
And within that we have a subclass

59
00:02:15,051 --> 00:02:17,820
called Stuff. We create the class here

60
00:02:17,820 --> 00:02:20,500
and it contains three integer variables.

61
00:02:20,500 --> 00:02:22,500
One for bullets, one for grenades

62
00:02:22,500 --> 00:02:24,183
and one for rockets.

63
00:02:24,183 --> 00:02:26,183
We then create an instance of this class,

64
00:02:26,183 --> 00:02:28,612
known as an object, down here.

65
00:02:28,612 --> 00:02:30,612
We give it the data type, which is

66
00:02:30,612 --> 00:02:32,612
effectively the name of the class

67
00:02:32,612 --> 00:02:34,759
and then we give it a name and we say 

68
00:02:34,759 --> 00:02:38,595
new, and again reuse the name of the class.

69
00:02:38,595 --> 00:02:40,595
The brackets on the end of the name of

70
00:02:40,595 --> 00:02:43,039
of the class imply that a constructor

71
00:02:43,039 --> 00:02:45,511
is being used. A constructor is a function

72
00:02:45,511 --> 00:02:48,118
that you can use to give default values

73
00:02:48,118 --> 00:02:50,118
to the variables in your class,

74
00:02:50,118 --> 00:02:52,523
amongst other tasks that they can perform.

75
00:02:52,523 --> 00:02:56,325
For example, we might setup a default constructor.

76
00:02:58,054 --> 00:03:00,054
Here we've given default values to each

77
00:03:00,054 --> 00:03:03,085
of the integer variables inside our class.

78
00:03:03,585 --> 00:03:06,097
This means that instead of being initialised

79
00:03:06,097 --> 00:03:08,097
as 0 they'll be given a default value

80
00:03:08,097 --> 00:03:10,782
of 1. What we can also do is write

81
00:03:10,782 --> 00:03:13,310
our own constructor that allows us to set

82
00:03:13,310 --> 00:03:15,310
parameters for those variables.

83
00:03:15,713 --> 00:03:18,059
So, for example, we might say, 

84
00:03:18,390 --> 00:03:22,230
public Stuff and then inside the brackets

85
00:03:22,230 --> 00:03:24,961
create some parameters.

86
00:03:25,889 --> 00:03:28,603
Then what we might do is assign our

87
00:03:28,603 --> 00:03:31,388
variables to these parameters

88
00:03:32,496 --> 00:03:34,496
This means that when we create an object

89
00:03:34,496 --> 00:03:37,403
or an instance of our class down here

90
00:03:37,403 --> 00:03:39,962
we can now use the brackets to define

91
00:03:39,962 --> 00:03:41,962
what those default values will be.

92
00:03:42,462 --> 00:03:45,080
So we know that if we put in an integer

93
00:03:45,080 --> 00:03:47,080
then a comma, an integer then a comma,

94
00:03:47,080 --> 00:03:49,066
we'll be defining exactly what those

95
00:03:49,066 --> 00:03:50,760
variables within this instance of the

96
00:03:50,760 --> 00:03:53,980
class will be. For example we may have 50

97
00:03:53,980 --> 00:03:56,656
bullets, and you can see that monodevelop

98
00:03:56,656 --> 00:03:58,656
is helping me figure out what I'm doing

99
00:03:58,656 --> 00:04:00,656
by telling me as I write them

100
00:04:01,156 --> 00:04:03,876
and let's say we've got 5 grenades

101
00:04:03,876 --> 00:04:05,876
and we've got 5 rockets.

102
00:04:05,876 --> 00:04:08,334
A few things to note about constructors.

103
00:04:08,696 --> 00:04:11,110
First off the name of the constructor

104
00:04:11,110 --> 00:04:13,458
is always the name of the class.

105
00:04:14,093 --> 00:04:16,582
Constructors never have a return type,

106
00:04:16,582 --> 00:04:18,182
not even void.

107
00:04:18,682 --> 00:04:21,731
A class can have multiple different constructors

108
00:04:21,731 --> 00:04:23,731
but only one of them gets called when an

109
00:04:23,731 --> 00:04:26,171
object is initialised. For example our 

110
00:04:26,171 --> 00:04:28,171
first constructor sets up values for

111
00:04:28,171 --> 00:04:31,276
these three integers. But what if we had

112
00:04:31,276 --> 00:04:34,435
more values. Let's put in a float for how

113
00:04:34,435 --> 00:04:36,435
much fuel we're carrying.

114
00:04:36,935 --> 00:04:39,517
Now currently this constructor does not

115
00:04:39,517 --> 00:04:42,448
setup a value for that. But we could setup

116
00:04:42,448 --> 00:04:45,039
another constructor to do that job for us.

117
00:04:45,039 --> 00:04:48,142
And then if we use the parameters setup

118
00:04:48,142 --> 00:04:51,260
in this constructor, what we'll see is that

119
00:04:51,260 --> 00:04:53,260
this constructor will be used to setup

120
00:04:53,260 --> 00:04:57,440
our new object. So if I make one that has,

121
00:04:58,202 --> 00:05:01,256
for example the bullets, and then

122
00:05:01,256 --> 00:05:03,256
a float for the fuel.

123
00:05:04,709 --> 00:05:06,557
Now that I have a separate constructor

124
00:05:06,557 --> 00:05:09,562
what I can do is create an instance

125
00:05:09,562 --> 00:05:12,903
and use a different constructor based upon

126
00:05:12,903 --> 00:05:15,487
what parameters I put in to that instance.

127
00:05:15,487 --> 00:05:18,647
So I can say new Stuff and this time

128
00:05:18,647 --> 00:05:22,957
I can say, for example, 50 bullets and

129
00:05:22,957 --> 00:05:27,020
1.5 amount of fuel.

130
00:05:27,020 --> 00:05:30,054
Now, this instance of the class is going

131
00:05:30,054 --> 00:05:32,524
to use this constructor because the

132
00:05:32,524 --> 00:05:35,102
parameters match. Whereas my other instance

133
00:05:35,102 --> 00:05:37,102
of the class we use this constructor

134
00:05:37,102 --> 00:05:39,102
because those parameters match.

135
00:05:39,102 --> 00:05:41,102
So you can do a lot of different things

136
00:05:41,102 --> 00:05:43,102
with constructors and you can have multiple

137
00:05:43,102 --> 00:05:45,777
different constructors for the same class.

138
00:05:45,777 --> 00:05:47,777
So hopefully you can see how useful classes

139
00:05:47,777 --> 00:05:50,701
are at organising your data when creating

140
00:05:50,701 --> 00:05:52,701
games, and it's recommended that you think

141
00:05:52,701 --> 00:05:54,701
through how your scripts are going

142
00:05:54,701 --> 00:05:57,058
to be laid out, before you go and just

143
00:05:57,058 --> 00:05:59,058
write one huge class that has loads of 

144
00:05:59,058 --> 00:06:00,207
different things in it.
