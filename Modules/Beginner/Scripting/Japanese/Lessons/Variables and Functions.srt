1
00:00:00,318 --> 00:00:02,008
変数と関数をみていきます。

2
00:00:02,273 --> 00:00:04,426
変数は情報を集めた箱だと考えてください。

3
00:00:04,426 --> 00:00:06,663
違うタイプの情報には

4
00:00:06,663 --> 00:00:08,663
違うタイプの箱が必要です。

5
00:00:09,163 --> 00:00:11,163
変数定義を書くときは

6
00:00:11,163 --> 00:00:13,163
初めにどのタイプ（型）の箱が必要であるか書きます。

7
00:00:13,663 --> 00:00:16,039
例えば、 int です。

8
00:00:16,039 --> 00:00:18,039
これは integer のことであり、ようするに整数です。

9
00:00:19,009 --> 00:00:21,481
次に箱を順番に名前をつけて

10
00:00:21,481 --> 00:00:22,922
識別できるようにするかもしれません。

11
00:00:23,746 --> 00:00:26,345
次に変数の宣言を終えるために

12
00:00:26,345 --> 00:00:28,164
行末にセミコロンを置きます。

13
00:00:28,541 --> 00:00:31,808
あるいは箱に何か格納するための情報、

14
00:00:32,059 --> 00:00:33,948
例えば数字の 5 を渡します。

15
00:00:33,948 --> 00:00:36,865
宣言文の最初および

16
00:00:36,865 --> 00:00:39,519
二つめの部分には初期化処理があります。

17
00:00:39,519 --> 00:00:41,519
ここでは実際の箱が割り当てられて

18
00:00:41,519 --> 00:00:43,229
何らかの情報が格納されます。

19
00:00:43,229 --> 00:00:46,029
もし実際に何かをしたい場合は

20
00:00:46,029 --> 00:00:48,595
実際に関数に入れてみます。

21
00:00:48,595 --> 00:00:50,428
スクリプトを新規に作成するとき、

22
00:00:50,428 --> 00:00:53,394
Start および Update 関数があらかじめ書かれています。

23
00:00:53,394 --> 00:00:55,270
Start はこのスクリプトがアタッチされたオブジェクトが

24
00:00:55,270 --> 00:00:57,270
シーンに入ったときにコールされます。

25
00:00:57,270 --> 00:00:59,270
Debug.Log を入れることで

26
00:00:59,270 --> 00:01:01,589
ゲームのあらゆる変数を取得することが出来ます。

27
00:01:01,589 --> 00:01:04,717
それでは myInt を取得して

28
00:01:04,717 --> 00:01:06,717
ここに入れてみましょう。もし単に値を

29
00:01:06,717 --> 00:01:08,273
ログに残すように書くと、

30
00:01:08,273 --> 00:01:11,621
Unity のコンソールに出力されます。もしスクリプトを保存して

31
00:01:11,886 --> 00:01:14,563
オブジェクトにアタッチしてみましょう。

32
00:01:14,563 --> 00:01:16,924
空のゲームオブジェクトを作成して

33
00:01:16,924 --> 00:01:18,299
そこにスクリプトをアタッチします。

34
00:01:18,744 --> 00:01:20,744
Play ボタンを押下すると

35
00:01:22,100 --> 00:01:24,992
myInt の値が表示されます。

36
00:01:25,327 --> 00:01:28,194
このため変数は、新しい値が与えられるまで

37
00:01:28,194 --> 00:01:30,194
その値を保持します。

38
00:01:30,194 --> 00:01:32,194
たとえば 変数の値を

39
00:01:32,194 --> 00:01:34,194
別の整数とともに使用できます。

40
00:01:34,611 --> 00:01:36,611
ここでは 2 を掛け算します。

41
00:01:36,793 --> 00:01:39,031
これでコンソールには

42
00:01:39,031 --> 00:01:41,031
integer かける 2 を出力し、

43
00:01:41,031 --> 00:01:43,632
今回は 5 かける 2 で 10 を表示します。

44
00:01:44,132 --> 00:01:46,423
当然、値をもう一回割り当てた場合

45
00:01:46,423 --> 00:01:48,423
先に進むにあたり

46
00:01:48,423 --> 00:01:50,423
値は違ったものになります。

47
00:01:50,423 --> 00:01:55,145
もし myInt = 55 とした場合

48
00:01:56,336 --> 00:01:59,124
初期化されたときは

49
00:01:59,124 --> 00:02:02,114
5 であったものが

50
00:02:02,114 --> 00:02:03,919
55 の値を今回は割り当てられ、

51
00:02:04,365 --> 00:02:06,977
掛け算の計算を入れると値は 110 になります。

52
00:02:06,977 --> 00:02:09,599
このため、もしスクリプトを保存して Play ボタンを押下すると

53
00:02:09,599 --> 00:02:11,599
値は 110 が得られます。

54
00:02:12,099 --> 00:02:14,099
より複雑なことを

55
00:02:14,099 --> 00:02:16,473
箱、すなわち変数で行なうためには、

56
00:02:16,473 --> 00:02:18,073
関数を作成する必要があります。

57
00:02:18,073 --> 00:02:19,584
これはメソッドとも呼ばれます。

58
00:02:20,181 --> 00:02:22,181
関数は情報を格納した

59
00:02:22,181 --> 00:02:24,181
箱を使って

60
00:02:24,181 --> 00:02:25,684
箱を戻します。

61
00:02:25,684 --> 00:02:27,684
この戻すことを return といいます。

62
00:02:28,515 --> 00:02:30,515
ここで使用した Start 関数は

63
00:02:30,515 --> 00:02:32,515
何も戻さない関数の例です。

64
00:02:32,515 --> 00:02:35,575
この場合の型は void といいます。

65
00:02:35,575 --> 00:02:37,575
カスタムの関数を作成する場合、

66
00:02:37,575 --> 00:02:40,158
箱にある型を決めてあげることが出来ます。

67
00:02:40,158 --> 00:02:44,116
例えば、関数の型は int であるとして、

68
00:02:44,116 --> 00:02:46,116
関数に名前をつけることができます。

69
00:02:46,116 --> 00:02:49,927
たとえば、2 を掛け算する関数の場合は、

70
00:02:50,234 --> 00:02:52,234
MultiplyByTwo という名前をつけます。

71
00:02:52,928 --> 00:02:56,113
次に、関数には引数と呼ばれるものがあります。

72
00:02:56,113 --> 00:02:58,718
この関数には

73
00:02:58,718 --> 00:03:00,718
特定の型の引数を与える必要があります。

74
00:03:00,718 --> 00:03:03,168
ここでは、

75
00:03:03,168 --> 00:03:05,168
何かを機械に渡して戻される値の型を整数としたいので、

76
00:03:05,168 --> 00:03:07,168
型は integer であると

77
00:03:07,168 --> 00:03:09,168
します。

78
00:03:10,193 --> 00:03:12,193
この機械の動きは

79
00:03:12,193 --> 00:03:14,935
{} の中で行なわれることを覚えておくべきです。

80
00:03:14,935 --> 00:03:17,479
() の中のに

81
00:03:17,479 --> 00:03:20,414
変数または引数を入れるのに対して

82
00:03:20,776 --> 00:03:22,610
{} により

83
00:03:22,610 --> 00:03:25,722
関数の

84
00:03:25,722 --> 00:03:27,722
アクションを書きます。

85
00:03:28,222 --> 00:03:30,988
例えば int の数字をここに書くことは

86
00:03:30,988 --> 00:03:32,988
要するに Number という

87
00:03:32,988 --> 00:03:34,988
機械の一部である、

88
00:03:34,988 --> 00:03:36,988
一時的な変数を作成しています。

89
00:03:36,988 --> 00:03:39,599
これを使用して数字を

90
00:03:39,599 --> 00:03:42,396
この関数に渡したことになり、

91
00:03:42,396 --> 00:03:44,396
後でコールできます。

92
00:03:44,396 --> 00:03:46,396
この関数のなかで別の一時的な変数を作成して

93
00:03:46,703 --> 00:03:48,703
それから何らかの処理を加えます。

94
00:03:48,703 --> 00:03:51,679
このため ret という

95
00:03:51,679 --> 00:03:54,396
別の integer を作成します。

96
00:03:54,396 --> 00:03:57,282
ret は return の意味の変数としています。

97
00:03:57,282 --> 00:03:59,282
次にこの変数を使用して

98
00:03:59,282 --> 00:04:03,072
number 変数に 2 をかけた数字に

99
00:04:03,572 --> 00:04:06,824
等しくします。次に return コマンドを使用して

100
00:04:06,824 --> 00:04:10,683
この関数を実際に

101
00:04:10,683 --> 00:04:12,683
実行して、結果は

102
00:04:12,683 --> 00:04:15,235
ret の値を出力します。

103
00:04:15,235 --> 00:04:17,388
これが完了した後は、実際にコールする必要があります。

104
00:04:17,388 --> 00:04:21,273
このため Start 関数に戻って

105
00:04:21,911 --> 00:04:23,911
それから

106
00:04:24,411 --> 00:04:27,648
MultiplyByTwo をコールして

107
00:04:27,648 --> 00:04:29,938
新しい変数を {} の中に入れる代わりに

108
00:04:29,938 --> 00:04:32,299
number の中に格納する数字を

109
00:04:32,299 --> 00:04:33,979
渡します。

110
00:04:34,426 --> 00:04:38,095
今回は myInt を渡します。

111
00:04:38,996 --> 00:04:40,996
これで正しく動作するのは

112
00:04:40,996 --> 00:04:43,400
number 変数と型が同じであるためです。

113
00:04:43,983 --> 00:04:45,859
今回は myInt を渡して、

114
00:04:45,859 --> 00:04:48,536
値は 5 として、機械に渡します。

115
00:04:48,536 --> 00:04:52,039
機械に入って、新しい変数である

116
00:04:52,539 --> 00:04:57,060
ret は myInt に等しく、 5 かける 2

117
00:04:57,060 --> 00:05:00,581
を行なって、 ret を戻します。

118
00:05:01,233 --> 00:05:04,008
このため 2 をかけて戻る結果は

119
00:05:04,008 --> 00:05:06,008
10 となります。

120
00:05:06,008 --> 00:05:08,008
しかし Start 関数では

121
00:05:08,008 --> 00:05:10,912
MultipyByTwo 関数を呼ぶだけです。

122
00:05:10,912 --> 00:05:13,824
現時点では 5 を渡しているために

123
00:05:13,824 --> 00:05:16,761
2 を掛け算をして結果は 10 となっています。

124
00:05:17,095 --> 00:05:19,469
しかし、 この情報で何かしないかぎり

125
00:05:19,469 --> 00:05:21,167
値は何も変更されません。

126
00:05:21,167 --> 00:05:23,167
例えば、この関数の戻り値で

127
00:05:23,167 --> 00:05:25,167
myInt は更新されていません。

128
00:05:25,167 --> 00:05:27,734
では、こう書き直せば、

129
00:05:28,151 --> 00:05:34,593
myInt が関数の結果と等しくすることが出来ます。

130
00:05:35,466 --> 00:05:37,466
それでは実際にみてみるために

131
00:05:37,966 --> 00:05:39,966
Debug.Log を使用することが出来て、

132
00:05:39,966 --> 00:05:44,541
コンソールウィンドウへ再び表示できます。

133
00:05:45,759 --> 00:05:48,159
それではスクリプトを保存して、元に戻したうえで

134
00:05:48,659 --> 00:05:51,951
Play ボタンを押下すると 10 という値を見ることが出来ます。
