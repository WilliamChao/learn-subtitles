1
00:00:00,276 --> 00:00:02,423
Translate および Rotate の二つの関数は

2
00:00:02,423 --> 00:00:04,256
ゲームオブジェクトの位置および回転を変更することが

3
00:00:04,256 --> 00:00:06,256
主な使用方法です。

4
00:00:06,256 --> 00:00:08,256
次のサンプルでは Translate からみてきます。

5
00:00:08,256 --> 00:00:10,658
Translate の引数は

6
00:00:10,658 --> 00:00:12,658
Vector3 型をとります。

7
00:00:12,658 --> 00:00:15,367
そのためこのサンプルでは Translate で

8
00:00:15,367 --> 00:00:18,566
Z 軸を下向きに移動させるため

9
00:00:18,566 --> 00:00:20,048
X および Y には 0 を使用しています。

10
00:00:20,548 --> 00:00:23,794
これは Update の中にあることから 毎フレーム 1 づつ移動させます。

11
00:00:23,794 --> 00:00:26,213
では、どのような仕組みかをみていきます。

12
00:00:26,213 --> 00:00:28,914
今回は floorbot オブジェクトに適用されています。

13
00:00:29,110 --> 00:00:31,028
もし Play を押下すると 毎フレームごとに
And you can see that if I press play

14
00:00:31,028 --> 00:00:33,028
更新しているため、素早く移動することがわかります。

15
00:00:33,028 --> 00:00:35,028
通常、

16
00:00:35,028 --> 00:00:37,528
Translate を用いて行うことは

17
00:00:37,528 --> 00:00:39,528
Time.deltaTime に乗算することです。

18
00:00:39,528 --> 00:00:41,528
これはつまり 毎フレームごとに 1 メートル移動するのではなく

19
00:00:41,528 --> 00:00:44,935
毎秒ごとに 1 メートル移動するということです。

20
00:00:48,377 --> 00:00:50,377
それでは、明示的に

21
00:00:50,377 --> 00:00:52,765
Vector3(0, 0, 1) とする前に、

22
00:00:52,765 --> 00:00:57,408
Vector3.Forward をショートカットとして使用することができます。

23
00:00:58,060 --> 00:01:00,857
そして 別の値を、まったく別の変数として

24
00:01:01,842 --> 00:01:04,935
かけあわせることができます。

25
00:01:08,432 --> 00:01:10,432
これによりインスペクタ上の変数により

26
00:01:10,432 --> 00:01:12,432
制御することができます。

27
00:01:12,780 --> 00:01:14,114
しかし、もし
28
00:01:14,114 --> 00:01:15,489
毎フレームごとに発生するのでなく

29
00:01:15,489 --> 00:01:16,937
キー押下にもとづいて発生させたい場合はどうすればよいでしょうか。

30
00:01:17,478 --> 00:01:19,202
具体的には 上向きの矢印を押した場合のみ

31
00:01:19,202 --> 00:01:20,653
発生させたい場合、はどうすればよいか、ということです。

32
00:01:24,313 --> 00:01:26,404
それができれば 下向き矢印の場合も

33
00:01:26,404 --> 00:01:28,032
まったく同じことが出来ます。

34
00:01:28,600 --> 00:01:31,033
今回は負の値をもった Vector3.Forward の値を使用することで

35
00:01:31,033 --> 00:01:32,887
下向き矢印を押したときに

36
00:01:32,887 --> 00:01:34,887
後ろ向きに移動します。

37
00:01:38,661 --> 00:01:42,111
Transform.rotate も同じような仕組みで動作します。

38
00:01:42,111 --> 00:01:45,314
今回も、 Vector3 型が引数として必要です。

39
00:01:45,717 --> 00:01:48,555
この場合は Vector3.up という Vector3 のショートカットを

40
00:01:48,555 --> 00:01:50,389
使用します。

41
00:01:50,389 --> 00:01:53,584
これは どの軸を中心にまわるかを示します。

42
00:01:54,278 --> 00:01:56,590
それが最初の引数であり、次の引数は

43
00:01:56,590 --> 00:01:58,590
回転する移動量を示します。

44
00:01:59,366 --> 00:02:02,830
次に TurnSpeed と呼ばれる変数を追加して、

45
00:02:03,993 --> 00:02:05,993
Play を押下すると

46
00:02:06,700 --> 00:02:08,700
オブジェクトを動かして

47
00:02:08,700 --> 00:02:11,409
左や右の矢印によって回転させることが出来ます。

48
00:02:11,909 --> 00:02:13,826
さらにこれらを public 変数としてセットしているため

49
00:02:13,826 --> 00:02:16,269
スクリプトそのものを編集することなく

50
00:02:16,269 --> 00:02:19,103
値の調整をすることが出来ます。

51
00:02:21,449 --> 00:02:23,449
これらの関数はワールド座標ではなくローカル座標で動作

52
00:02:23,449 --> 00:02:27,334
することを覚えておくべきです。

53
00:02:27,334 --> 00:02:29,504
このため、 Vector3.forward または

54
00:02:29,504 --> 00:02:32,291
Vector3.up と指定した場合は

55
00:02:32,291 --> 00:02:34,291
適用されているオブジェクトのローカル軸にそって回転します。

56
00:02:35,413 --> 00:02:37,413
さらに覚えておくべきこととして

57
00:02:37,413 --> 00:02:39,413
コライダつきのオブジェクトを移動する場合、

58
00:02:39,413 --> 00:02:41,413
つまり物理挙動と相互作用のある場合は

59
00:02:41,413 --> 00:02:43,068
Translate または Rotate を使用すべきでは

60
00:02:43,068 --> 00:02:44,790
ありません。

61
00:02:45,055 --> 00:02:47,776
その代わりに Physics 関数を使用すべきです。

62
00:02:47,986 --> 00:02:49,986
この使い方は別のセクションでみていきます。

63
00:02:50,679 --> 00:02:52,204
Transform に影響を与えてよいときというのは

64
00:02:52,204 --> 00:02:54,820
Kinematic である Rigidbody である場合

65
00:02:54,820 --> 00:02:56,820
だけです。
(翻訳:gamesonytablet)
