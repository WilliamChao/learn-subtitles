1
00:00:00,304 --> 00:00:02,072
ゲームを作成するときに

2
00:00:02,072 --> 00:00:04,513
ふたつの値の間をスムーズに遷移させることが必要な場合があります。

3
00:00:04,513 --> 00:00:06,513
良くある例は位置の変動をスムーズに

4
00:00:06,513 --> 00:00:08,513
行なうことです。このことは

5
00:00:08,513 --> 00:00:10,918
Lerp と呼ばれる関数を使用して行なうことが出来ます。Lerp とは

6
00:00:10,918 --> 00:00:13,555
Linear Interpolation （線形補間）の略です。このシーンでは

7
00:00:13,555 --> 00:00:16,359
ライトおよびすうりぷとがあり、

8
00:00:16,359 --> 00:00:19,287
ライトのプロパティを 3 つ補間します。Position、

9
00:00:19,287 --> 00:00:21,287
Color および Intensity です。

10
00:00:23,679 --> 00:00:25,679
それでは Lerp を使用して各々のプロパティを

11
00:00:25,679 --> 00:00:27,360
使用する方法を見ていきます。

12
00:00:27,737 --> 00:00:30,327
初めに、Position です。この未完成のサンプルでは

13
00:00:30,327 --> 00:00:33,659
新しい Vector3 の位置を

14
00:00:33,659 --> 00:00:35,659
格納する変数があり、

15
00:00:35,659 --> 00:00:37,659
X, Y, Z があります。

16
00:00:38,159 --> 00:00:40,879
Awake の中で、この値を

17
00:00:40,879 --> 00:00:43,185
オブジェクトの現在の位置にセットするのに

18
00:00:43,185 --> 00:00:45,034
transform.position を使用します。

19
00:00:45,408 --> 00:00:48,237
次に Update の中で位置変更の関数を

20
00:00:48,237 --> 00:00:49,837
毎フレーム実行します。

21
00:00:50,157 --> 00:00:52,157
では何が起きているのでしょう？

22
00:00:52,157 --> 00:00:54,944
さらに二つの Vector3 変数 位置 A および

23
00:00:54,944 --> 00:00:57,573
位置 B があります。これらの二つの位置で

24
00:00:57,573 --> 00:00:59,393
ライトの位置を切り替えることにします。

25
00:00:59,797 --> 00:01:01,619
Q キーを押下したとき、

26
00:01:01,619 --> 00:01:03,413
入力をチェックします。

27
00:01:03,413 --> 00:01:05,849
次に位置 A に移動します。そして

28
00:01:05,849 --> 00:01:08,154
E キーを押下したとき、位置 B に移動します。

29
00:01:08,530 --> 00:01:10,640
そして現在の位置を

30
00:01:10,640 --> 00:01:13,446
この変数にセットして

31
00:01:13,446 --> 00:01:16,385
継続的に変更を行なっています。それではどのように働くかみてみましょう。

32
00:01:17,134 --> 00:01:21,485
もし Q キーを押下すると、X が -5 の位置に移動します。

33
00:01:21,985 --> 00:01:24,906
そして E を押下すると、+5 の位置に移動します。

34
00:01:25,461 --> 00:01:27,929
みて分かるように

35
00:01:27,929 --> 00:01:29,929
これらの二つの位置を行き来しているだけで

36
00:01:29,929 --> 00:01:33,434
それはやりたいことではありません。ここで Lerp を使用して

37
00:01:33,434 --> 00:01:35,434
二つの値の間をスムーズに補間

38
00:01:35,434 --> 00:01:36,744
しておきます。

39
00:01:37,244 --> 00:01:39,244
このため Transform の Position を

40
00:01:39,244 --> 00:01:41,767
新しい Position の値をセットする代わりに

41
00:01:42,267 --> 00:01:47,144
Vector3.Lerp とします。

42
00:01:47,644 --> 00:01:49,410
そして Lerp の基本的なプロパティは

43
00:01:49,410 --> 00:01:52,961
3 要素あります。 from の値、 to の値、

44
00:01:52,961 --> 00:01:54,961
そして time の値です。

45
00:01:55,461 --> 00:01:58,014
このため開始時の値は、

46
00:01:58,014 --> 00:02:00,014
現在の位置であるため、

47
00:02:00,014 --> 00:02:02,963
transform.position とします。これが from の値に相当します。

48
00:02:02,963 --> 00:02:04,963
次に to の値に

49
00:02:04,963 --> 00:02:06,963
newPosition 変数をセットします

50
00:02:06,963 --> 00:02:09,369
そして最後に time の値が必要です。

51
00:02:09,731 --> 00:02:12,660
ここで Time.deltaTime を使用します。

52
00:02:13,160 --> 00:02:15,160
どのようになるか見ていきます。

53
00:02:18,837 --> 00:02:21,507
二つの位置の間をスムーズに補間していることが

54
00:02:21,507 --> 00:02:23,271
みて分かります。

55
00:02:23,771 --> 00:02:25,561
これが発生しているスピードを

56
00:02:25,561 --> 00:02:28,248
増やした場合は、

57
00:02:28,248 --> 00:02:30,248
変数を追加して作業しやすくします。

58
00:02:30,248 --> 00:02:32,689
ここでは public で float 型の変数を追加して

59
00:02:32,689 --> 00:02:34,689
smooth と名前をつけて

60
00:02:34,689 --> 00:02:36,522
最初の値を 2 にします。

61
00:02:36,522 --> 00:02:39,514
次にその値と

62
00:02:39,931 --> 00:02:41,931
deltaTime と掛け算をします。

63
00:02:43,840 --> 00:02:45,524
二つの位置の間の補完が

64
00:02:45,524 --> 00:02:49,273
ずいぶん速くなったことが確認できます。

65
00:02:51,651 --> 00:02:53,651
そして public 変数であるため、

66
00:02:53,651 --> 00:02:55,305
スピードを大きくあげて

67
00:02:55,305 --> 00:02:57,305
さらに速くすることが出来ます。

68
00:02:58,455 --> 00:03:00,884
それではライト強度（Intensity）の変更を見ていきます。

69
00:03:00,884 --> 00:03:02,663
これはわずかに異なるのですが、

70
00:03:02,663 --> 00:03:06,045
それは Mathf.Lerp を

71
00:03:06,045 --> 00:03:09,236
Vector3.Lerp の代わりに使用するためです。Mathf.Lerp は

72
00:03:09,236 --> 00:03:12,594
二つの Vector3 の値を行き来する代わりに

73
00:03:12,594 --> 00:03:14,248
二つの float の値の間を行き来します。

74
00:03:14,582 --> 00:03:15,872
このためもし float を使用している何かがあれば

75
00:03:15,872 --> 00:03:18,644
Mathf.Lerp を使用するべきで、そして

76
00:03:18,644 --> 00:03:20,644
Vector3 を使用している何かがあれば

77
00:03:20,644 --> 00:03:23,213
Vector3.lerp を使用すべきです。今回のコードでは

78
00:03:23,213 --> 00:03:25,060
ライト強度（Intensity）を変更する

79
00:03:25,060 --> 00:03:27,563
ように準備しました。新しい Intensity の変数があります。

80
00:03:27,563 --> 00:03:30,091
これを ゲーム開始時の

81
00:03:30,091 --> 00:03:32,091
ライト強度と等しくなるようにして

82
00:03:32,591 --> 00:03:35,491
そして毎フレームごとに Intensity の変更を実行します。

83
00:03:36,198 --> 00:03:38,683
今回は二つの異なる Intensity があり

84
00:03:38,683 --> 00:03:41,916
0.5 と 5 です。

85
00:03:41,916 --> 00:03:43,916
そしてA キーおよび D キーを使用して、

86
00:03:44,596 --> 00:03:47,139
この二つの Intensity の値で切り替えさせます。

87
00:03:47,501 --> 00:03:48,969
みれば分かるように、

88
00:03:48,969 --> 00:03:52,278
Light コンポーネント、Intensity プロパティをみつけて、

89
00:03:52,278 --> 00:03:55,636
その値を Mathf.Lerp と等しくしています。

90
00:03:56,136 --> 00:03:58,541
from の値は現在の Intensity であり、

91
00:03:59,041 --> 00:04:01,041
補間する終点側の値は

92
00:04:01,041 --> 00:04:04,096
新しい Intensity 変数の値です。

93
00:04:04,096 --> 00:04:06,544
そして、ここでも Time.deltaTime を使用して

94
00:04:06,544 --> 00:04:08,544
スムージングするための変数に掛け算します。

95
00:04:08,544 --> 00:04:10,544
それではどのようになるか見てみましょう。

96
00:04:12,605 --> 00:04:15,539
いつもと同様に、もしスムージングする値が異なる場合

97
00:04:15,539 --> 00:04:17,291
この補間が発生するスピードを

98
00:04:17,291 --> 00:04:19,29
増加させることが出来ます。1

99
00:04:22,208 --> 00:04:24,847
最後に色の補間についてみていきます。

100
00:04:25,292 --> 00:04:28,052
今回は上の方で新しい color 変数を

101
00:04:28,052 --> 00:04:31,010
セットアップしました。それをゲーム開始時に

102
00:04:31,010 --> 00:04:32,734
Light コンポーネントの color の値に等しくなるようにしています。

103
00:04:32,734 --> 00:04:35,110
そしてまた、

104
00:04:35,110 --> 00:04:37,110
毎フレーム実行される関数があります。

105
00:04:37,472 --> 00:04:39,472
二つの色である

106
00:04:39,472 --> 00:04:41,472
Color.red および Color.green を

107
00:04:41,472 --> 00:04:43,472
A および B 変数に格納して

108
00:04:43,472 --> 00:04:45,902
そしてそれらを Z キーおよび C キーで

109
00:04:45,902 --> 00:04:48,609
切り替えます。他の Lerp と同様に

110
00:04:48,609 --> 00:04:51,009
from および to の値があります。

111
00:04:51,481 --> 00:04:54,516
これはもとの Light.Color および新しい Color です。

112
00:04:54,516 --> 00:04:57,001
今回も Time.deltaTime に

113
00:04:57,001 --> 00:04:58,514
スムージング係数 smooth を掛け算しています。

114
00:04:58,990 --> 00:05:01,391
ここまで簡単でした。 Play ボタンを押下すると

115
00:05:01,391 --> 00:05:03,391
これらの値の間を移動させることが出来ます。

116
00:05:03,391 --> 00:05:05,764
そしてもしスピードを増加させたかった場合

117
00:05:05,764 --> 00:05:07,764
smooth の値を大きくします。

118
00:05:12,753 --> 00:05:14,173
これら全てが含まれる、完成したシーンを

119
00:05:14,173 --> 00:05:16,173
みてみましょう。
