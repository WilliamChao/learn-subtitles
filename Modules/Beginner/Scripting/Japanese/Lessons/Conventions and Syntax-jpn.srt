1
00:00:00,373 --> 00:00:02,921
スクリプト コーディングルールおよび文法。

2
00:00:03,656 --> 00:00:05,969
コーディングの文法は言語の構造を意味しますが、

3
00:00:05,969 --> 00:00:07,969
いくつかのコーディングルールは

4
00:00:07,969 --> 00:00:10,314
コードの読み書きを学ぶうえで重要です。

5
00:00:10,814 --> 00:00:12,814
例えばドット演算子をみてみます。

6
00:00:13,176 --> 00:00:16,129
ドット演算子はコードにおける用語の間の

7
00:00:16,129 --> 00:00:18,851
完全な区切り、またはピリオドです。

8
00:00:19,917 --> 00:00:22,572
住所の行を書くよう働きをします。

9
00:00:22,572 --> 00:00:25,703
例えば次のようなコードを考えて見ます。

10
00:00:26,438 --> 00:00:29,981
ここでは Debug が国の名前で、

11
00:00:29,981 --> 00:00:32,884
Log が都市の名前です。ここでは Debug の中にあるものに

12
00:00:32,884 --> 00:00:34,884
ドリルダウンしていて、

13
00:00:34,884 --> 00:00:36,884
Log はそのような要素のひとつです。

14
00:00:37,384 --> 00:00:40,009
例えばコードのこの部分においては

15
00:00:40,009 --> 00:00:43,703
transform は国の名前であり、position は 都市の名前で、

16
00:00:43,703 --> 00:00:46,179
X は 探そうとしている番地のようなものです。

17
00:00:46,179 --> 00:00:48,179
ドット演算子は要するに

18
00:00:48,179 --> 00:00:51,420
Unity の複合的なアイテムの要素を

19
00:00:51,420 --> 00:00:54,058
分割したりアクセスできるようにしています。

20
00:00:54,058 --> 00:00:56,058
複合的なアイテムは多くの要素を含む

21
00:00:56,058 --> 00:00:58,058
ものです。

22
00:00:58,058 --> 00:01:00,447
例えば Transform には

23
00:01:00,447 --> 00:01:02,447
Position, Rotation および Scale が含まれます。

24
00:01:02,447 --> 00:01:05,219
このためドット演算子は Position の選択に使用され、

25
00:01:05,219 --> 00:01:08,058
Position には X, Y, Z が含まれます。

26
00:01:08,058 --> 00:01:10,887
ここではドット演算子を再び使用することで

27
00:01:10,887 --> 00:01:14,068
X を選択しています。次の文法は

28
00:01:14,068 --> 00:01:17,276
セミコロンです。セミコロンは

29
00:01:17,276 --> 00:01:19,276
ステートメントを終了するのに使用され、

30
00:01:19,276 --> 00:01:21,207
このために必ず行末にあります。

31
00:01:21,624 --> 00:01:24,784
しかしコードの全てがステートメントであるとはかぎりません。

32
00:01:24,784 --> 00:01:26,617
例えばクラス宣言の

33
00:01:26,617 --> 00:01:28,617
開始や終了、

34
00:01:28,617 --> 00:01:31,889
関数や if 文の開始や終了などです。

35
00:01:32,182 --> 00:01:34,182
{} を使用するものはすべて

36
00:01:34,182 --> 00:01:36,182
その最後にセミコロンが必要ありません。

37
00:01:36,461 --> 00:01:38,767
これらの中にあるステートメントは全て

38
00:01:38,767 --> 00:01:40,767
すなわち開始または終了の前は

39
00:01:40,767 --> 00:01:42,767
セミコロンで終わります。

40
00:01:43,115 --> 00:01:43,911
次はインデントです。

41
00:01:44,149 --> 00:01:46,149
インデントはコードを書く上で重要なことです。

42
00:01:46,149 --> 00:01:48,506
これによりコードの見映えをあげて読みやすくします。

43
00:01:49,006 --> 00:01:51,393
技術的にはインデントは不要なのですが、

44
00:01:51,393 --> 00:01:53,393
これによりコードは読みやすくなり

45
00:01:53,393 --> 00:01:55,393
これによりコード全体の機能構造が

46
00:01:55,393 --> 00:01:56,513
分かりやすくなります。

47
00:01:57,013 --> 00:02:00,429
ここで見るコードはすでに完全にインデントされています。

48
00:02:01,620 --> 00:02:04,065
しかし、もしこのコード全てを同時に

49
00:02:04,385 --> 00:02:06,385
Shift + Tab でアウトデントした場合、

50
00:02:07,355 --> 00:02:09,355
ひとつひとつのステップを見ていくことが出来ます。

51
00:02:09,593 --> 00:02:11,593
それでは初めに public クラス宣言

52
00:02:11,593 --> 00:02:13,318
はここで始まり

53
00:02:13,318 --> 00:02:15,318
下で終わるので、

54
00:02:15,318 --> 00:02:17,830
その中のものは少なくとも 1 回インデントが必要である

55
00:02:17,830 --> 00:02:19,229
ことが分かります。

56
00:02:19,867 --> 00:02:21,867
Tab キーを使用して行います。

57
00:02:22,560 --> 00:02:24,944
次に、 Start 関数は

58
00:02:24,944 --> 00:02:28,246
この 7 行目で始まり、 14 行目で終わります。

59
00:02:28,246 --> 00:02:30,053
コードが数行あり、

60
00:02:30,053 --> 00:02:32,053
これらはすべて Start 関数の中にあるため

61
00:02:32,053 --> 00:02:34,053
インデントが必要です。

62
00:02:34,401 --> 00:02:36,787
最後に、 if 文の中には

63
00:02:36,787 --> 00:02:38,787
Debug.log の行のコードがあるため、

64
00:02:38,787 --> 00:02:40,495
これもインデントします。

65
00:02:41,107 --> 00:02:43,107
これにより視覚的に行をトレースすることが出来て、

66
00:02:43,107 --> 00:02:45,107
ページの下へ行って、

67
00:02:45,107 --> 00:02:47,387
コードブロックが開始および終了する箇所を見つけられます。

68
00:02:47,387 --> 00:02:49,663
これはインデントを行ってあるためです。

69
00:02:50,163 --> 00:02:52,163
一般的にいうと MonoDevelop により

70
00:02:52,163 --> 00:02:54,163
これを行うことがより容易になり、自動的に行われますが

71
00:02:54,163 --> 00:02:55,911
もし何か間違っている場合

72
00:02:55,911 --> 00:02:57,911
あるいは間違った箇所で Tab を押した場合

73
00:02:57,911 --> 00:02:59,074
すべてのインデントが意味あるように

74
00:02:59,074 --> 00:03:01,074
注意をすべきであり、

75
00:03:01,074 --> 00:03:03,445
特にコードを共同作業で他人に共有していると重要です。

76
00:03:03,696 --> 00:03:05,126
最後に、コメントです。

77
00:03:05,419 --> 00:03:07,419
コメントは言葉どおりであり

78
00:03:07,419 --> 00:03:09,712
コードに一部に関して

79
00:03:09,712 --> 00:03:12,128
何かメモを残すようにしてコメントを入れます。

80
00:03:12,128 --> 00:03:14,128
一行のコメントを書くには

81
00:03:14,128 --> 00:03:16,128
// を使用します。

82
00:03:16,128 --> 00:03:18,128
または複数行のコメントを書くには

83
00:03:18,128 --> 00:03:20,364
/* で

84
00:03:20,364 --> 00:03:23,164
開始して

85
00:03:23,164 --> 00:03:26,325
/* で終了します。

86
00:03:26,325 --> 00:03:27,922
さらにコメントは好きな行数だけ

87
00:03:27,922 --> 00:03:29,922
書くことが出来ます。コメントは

88
00:03:29,922 --> 00:03:32,454
自身から他のプログラマにメモを残すために使用します。

89
00:03:32,454 --> 00:03:34,454
もう一つの使用方法は

90
00:03:34,454 --> 00:03:35,901
コードを一時的に無効化する場合です。

91
00:03:36,277 --> 00:03:38,497
例えばもしこの if 文を

92
00:03:38,497 --> 00:03:40,768
無効化したい場合は

93
00:03:40,768 --> 00:03:44,263
/* を最初に入れて

94
00:03:44,639 --> 00:03:46,805
最後に */ で閉じます。

95
00:03:47,940 --> 00:03:50,511
MonoDevelop のエディタにより

96
00:03:50,511 --> 00:03:52,511
により、どの部分が無効になったか

97
00:03:52,511 --> 00:03:54,511
明示してくれます。

98
00:03:54,511 --> 00:03:56,941
その部分のコードの色が

99
00:03:56,941 --> 00:03:58,941
実行される部分でないことを

100
00:03:58,941 --> 00:04:01,646
明示します。このため、この箇所は

101
00:04:01,646 --> 00:04:03,646
再びコメント記号を消すまで実行されることはありません。

102
00:04:03,966 --> 00:04:06,549
要するにコンパイラは（つまり Unity 自体が）、

103
00:04:06,549 --> 00:04:08,549
そのコメントの中にある

104
00:04:08,549 --> 00:04:09,874
部分を無視します。
