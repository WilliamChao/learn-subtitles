1
00:00:00,110 --> 00:00:03,439
プログラミングするうえで、ループは何かのアクションを反復する手段です。

2
00:00:03,842 --> 00:00:05,842
いろいろな種類のループをみていきましょう。

3
00:00:06,162 --> 00:00:10,012
For ループ、While ループ、および Do While ループです。

4
00:00:10,871 --> 00:00:12,871
今回のサンプルのすべてのループは

5
00:00:12,871 --> 00:00:14,580
ゲームオブジェクトにアタッチされていて、

6
00:00:14,580 --> 00:00:16,580
コンソールで結果を確認していきます。

7
00:00:18,088 --> 00:00:20,724
最初に While ループをみてきましょう。

8
00:00:20,919 --> 00:00:22,919
While ループはある条件が満たされた

9
00:00:22,919 --> 00:00:25,517
アクションを実行するのに使用されます。

10
00:00:25,517 --> 00:00:27,517
このサンプルでは cupsInTheSink とい名前の

11
00:00:27,517 --> 00:00:29,228
変数があります。

12
00:00:29,424 --> 00:00:31,424
シンク に 4 つのカップがあるとします。

13
00:00:31,424 --> 00:00:33,424
シンクにある カップの数が

14
00:00:33,424 --> 00:00:36,345
0 である場合、それらを洗う必要があるとします。

15
00:00:36,735 --> 00:00:39,120
''I've washed a cup!'' (カップを洗った)とログを残して、

16
00:00:39,120 --> 00:00:41,120
sink 変数 でのカップの値から

17
00:00:41,120 --> 00:00:43,120
1 を引きます。

18
00:00:43,120 --> 00:00:45,539
このループが 4 回反復されるのは

19
00:00:45,539 --> 00:00:48,391
コップが 4 つあるためです。

20
00:00:50,231 --> 00:00:52,825
そして 4 つのカップを洗ったことを確認できます。

21
00:00:53,587 --> 00:00:55,449
次に Do While ループを

22
00:00:55,449 --> 00:00:57,071
みてきましょう。

23
00:00:57,350 --> 00:00:59,904
Do While ループは While Loop に似てますが

24
00:00:59,904 --> 00:01:01,904
アクションを必ず 1 回は実行して

25
00:01:01,904 --> 00:01:03,904
それから、さらに条件が満たされたときに

26
00:01:03,904 --> 00:01:05,904
ループを反復することが

27
00:01:05,904 --> 00:01:07,904
重要な場合があります。

28
00:01:07,904 --> 00:01:09,904
ここでは年齢を 25 から 30 才の間で

29
00:01:09,904 --> 00:01:11,904
推測しようとします。

30
00:01:12,570 --> 00:01:14,724
正しい年齢は 27 と入力しました。

31
00:01:15,236 --> 00:01:18,121
さらに 年齢を推測する integer があります。

32
00:01:18,497 --> 00:01:20,497
この場合の Do While ループは

33
00:01:20,497 --> 00:01:22,497
Guess 関数を実行して

34
00:01:22,497 --> 00:01:26,566
guestAge が正しい年齢になったときに完了します。

35
00:01:26,566 --> 00:01:30,676
いいかえると guessAge が正しい年齢に等しくない間は

36
00:01:30,676 --> 00:01:33,355
ループを反復します。

37
00:01:33,593 --> 00:01:35,593
この条件が満たされなくなったとき

38
00:01:35,593 --> 00:01:37,593
スクリプトの次の行に進んで

39
00:01:37,593 --> 00:01:40,917
ログとして ''Correct! I'm'' （正解！私の年齢は）と、正しい年齢を残します。

40
00:01:41,417 --> 00:01:44,156
このため Guess では guessAge を

41
00:01:44,156 --> 00:01:47,142
25 から 30 までランダムな範囲で割り当てて

42
00:01:47,142 --> 00:01:49,142
それから足すか引くかして

43
00:01:49,142 --> 00:01:51,684
正しい年齢を推測して、

44
00:01:51,684 --> 00:01:53,684
特定の年齢の推測を

45
00:01:53,684 --> 00:01:55,475
コンソール出力しています。

46
00:01:55,894 --> 00:01:57,894
それではこの結果をみてみましょう。

47
00:01:58,808 --> 00:02:00,808
これで 28 を推測して、

48
00:02:01,612 --> 00:02:04,753
次に 27 を推測したことが分かります。 27 は正しい年齢なので

49
00:02:04,753 --> 00:02:06,753
Do While ループは終了して、

50
00:02:06,753 --> 00:02:09,374
ログに ''Correct! I'm 27!'' と残します。

51
00:02:09,374 --> 00:02:10,782
もう 1 回みてみましょう。

52
00:02:10,782 --> 00:02:12,782
今回はちょっと違う結果であることが分かります。

53
00:02:12,782 --> 00:02:14,782
これは Random が推測で違う数字を

54
00:02:14,782 --> 00:02:16,782
推測したためで、今回は

55
00:02:16,782 --> 00:02:20,996
25, 26, そして最後に 27 の順で試したことが分かります。

56
00:02:20,996 --> 00:02:22,996
27 は正解でした。

57
00:02:22,996 --> 00:02:25,623
次に For ループです。これはおそらく

58
00:02:25,623 --> 00:02:27,349
もっとも一般的かつ柔軟なループです。

59
00:02:27,847 --> 00:02:29,847
For ループは

60
00:02:29,847 --> 00:02:32,316
制御可能なループを反復することができます。

61
00:02:32,665 --> 00:02:34,901
機能的には、最初に

62
00:02:34,901 --> 00:02:36,901
ループの条件をチェックします。

63
00:02:36,901 --> 00:02:39,497
ここでは条件は i < numEnemies です。

64
00:02:39,497 --> 00:02:41,497
そして条件が満たされたとき

65
00:02:41,497 --> 00:02:44,161
ループの中における指示を実行します。

66
00:02:44,161 --> 00:02:46,811
ループの中とは、 {} にある内容です。

67
00:02:47,311 --> 00:02:50,014
各々のループ、すなわち反復の後、

68
00:02:50,014 --> 00:02:52,416
オプションとして、値を増加させることが出来ます。

69
00:02:52,416 --> 00:02:54,513
ここでは 3 つめの引数で

70
00:02:54,513 --> 00:02:57,409
i が 毎回 1 だけ増加させます。

71
00:02:57,812 --> 00:02:59,812
このプロセスはもう 1 回実行されます。

72
00:03:00,312 --> 00:03:02,312
これをコーディングの観点からみていきます。

73
00:03:03,351 --> 00:03:06,281
この構文には 3 つの引数があります。

74
00:03:06,781 --> 00:03:09,193
最初に変数を使用します。

75
00:03:09,193 --> 00:03:11,041
これは反復子（iterator）として知られます。

76
00:03:11,500 --> 00:03:13,500
これはループの反復をカウントするのに使用され、

77
00:03:13,500 --> 00:03:16,191
すなわち、何回目のループまで実行したか、です。

78
00:03:17,064 --> 00:03:19,064
二つめの引数はループを継続するため

79
00:03:19,064 --> 00:03:21,064
に true となる必要のある

80
00:03:21,064 --> 00:03:22,067
条件です。

81
00:03:22,912 --> 00:03:25,163
最後に 3 つめの引数は

82
00:03:25,163 --> 00:03:26,953
毎回の iterator が各々のループでどうなるか、です。

83
00:03:26,953 --> 00:03:29,964
通常は

84
00:03:29,964 --> 00:03:31,742
ループをステップ実行していくにあたり

85
00:03:31,742 --> 00:03:33,742
iterator を増加させます。

86
00:03:33,742 --> 00:03:35,742
プログラミングにおいてカウントを 0 から始めることは一般的です。

87
00:03:35,742 --> 00:03:38,863
最初のループでは i が 0 であり、

88
00:03:39,264 --> 00:03:42,936
i++ という演算によって i に 1 が追加されます。

89
00:03:42,936 --> 00:03:45,554
さらに 2 つめの i のループは 1 となり、

90
00:03:45,554 --> 00:03:47,471
そのように反復していきます。

91
00:03:47,750 --> 00:03:51,446
これは i が 

92
00:03:51,446 --> 00:03:53,128
numEnemies 変数よりも小さくなるまでループは続きます。

93
00:03:53,352 --> 00:03:55,407
このため numEnemies という変数があり、

94
00:03:55,407 --> 00:03:57,630
3 がセットされていて、このループが

95
00:03:57,630 --> 00:04:00,554
3 回実行されると

96
00:04:00,554 --> 00:04:03,210
num Enemies の値と同じになり、

97
00:04:03,210 --> 00:04:05,850
ループは再び実行されなくなり、

98
00:04:05,850 --> 00:04:07,504
その理由は条件式が false となるためです。

99
00:04:08,004 --> 00:04:10,004
このため enemy の数字が 3 であると

100
00:04:10,004 --> 00:04:12,004
コンソールでメッセージをみることはなく、

101
00:04:12,004 --> 00:04:14,004
その理由は i が 3 と等しいとき、

102
00:04:14,004 --> 00:04:16,851
numEnemies より小さいという条件は満たされないためであり、

103
00:04:16,851 --> 00:04:18,320
loopBodies コマンドを

104
00:04:18,320 --> 00:04:19,798
実行しなくなります。

105
00:04:19,798 --> 00:04:21,798
このサンプルでは

106
00:04:21,798 --> 00:04:24,116
i の値とその横に

107
00:04:24,116 --> 00:04:25,949
''Creating enemy number'' をコンソール出力します。

108
00:04:25,949 --> 00:04:28,494
これによって i が増加していることと、

109
00:04:28,494 --> 00:04:30,686
ループの実際の場面での使用方法が確認できます。

110
00:04:31,186 --> 00:04:33,186
簡単にいうと、

111
00:04:33,186 --> 00:04:35,186
何回か行なう処理は

112
00:04:35,186 --> 00:04:37,186
For ループの中で行なうべきです。

113
00:04:37,451 --> 00:04:39,451
実行しているところをみていきましょう。

114
00:04:39,951 --> 00:04:41,951
これで 3 回ログを残していることが分かります。

115
00:04:42,161 --> 00:04:44,757
最初に i の値を 0 として表示して

116
00:04:44,757 --> 00:04:46,757
次に 1, それから 2 とします。

117
00:04:47,257 --> 00:04:49,173
異なるループにより出来ることには

118
00:04:49,173 --> 00:04:51,173
柔軟性と幅があり、

119
00:04:51,173 --> 00:04:53,173
異なるアクションを、

120
00:04:53,173 --> 00:04:55,173
特定の条件で反復する時に

121
00:04:55,173 --> 00:04:56,701
使用することを考えるべきです。
(翻訳:gamesonytablet)
