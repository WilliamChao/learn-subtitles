1
00:00:00,235 --> 00:00:02,569
Unity では各々のスクリプトはクラス定義が含まれます。

2
00:00:02,569 --> 00:00:05,194
もし変数を箱、関数を機械

3
00:00:05,194 --> 00:00:07,194
に例えるならば

4
00:00:07,194 --> 00:00:09,846
クラスはこの箱や機械がおかれている

5
00:00:09,846 --> 00:00:11,846
工場にあたります。

6
00:00:11,846 --> 00:00:14,521
すでにお気づきかもしれませんが

7
00:00:14,521 --> 00:00:16,135
他のチュートリアルからのスクリプトは

8
00:00:16,135 --> 00:00:18,135
クラス キーワードが上の方に表示されていました。

9
00:00:19,118 --> 00:00:21,118
Unity は C# スクリプトを作成するとき、

10
00:00:21,118 --> 00:00:23,118
これらを自動的に行に含めます。

11
00:00:23,118 --> 00:00:26,498
Javascript ではこれは暗黙的です。

12
00:00:26,498 --> 00:00:28,498
すなわち、定義は表示されませんが、

13
00:00:28,498 --> 00:00:30,498
Unity はスクリプトの内容を

14
00:00:30,498 --> 00:00:32,179
クラスとして扱います。

15
00:00:32,679 --> 00:00:34,679
クラスはスクリプトが含まれるファイルと同じ

16
00:00:34,679 --> 00:00:37,516
名称です。これは重要なことであり、

17
00:00:37,516 --> 00:00:39,516
ファイル名かクラス名のいずれかを変更した場合

18
00:00:39,516 --> 00:00:40,994
他方の名前を変更する必要があります。

19
00:00:41,494 --> 00:00:43,494
クラスのスクリプトの名前は変更しないのがベストであり、

20
00:00:43,494 --> 00:00:45,632
絶対にやる必要がないかぎりやめておくべきです。                      

21
00:00:45,632 --> 00:00:47,632
このため、スクリプトの名前は

22
00:00:47,632 --> 00:00:49,632
作成する時点で意味のあるものとして下さい。

23
00:00:49,980 --> 00:00:51,980
クラスはそれが提供する変数および

24
00:00:51,980 --> 00:00:53,980
関数のコンテナであり、

25
00:00:53,980 --> 00:00:55,980
連携して動作するものをグループ化する

26
00:00:55,980 --> 00:00:57,552
メリットなどあります。

27
00:00:58,052 --> 00:01:00,052
オブジェクト指向プログラミング、

28
00:01:00,052 --> 00:01:02,776
略して OOP とよばれるものの

29
00:01:02,776 --> 00:01:04,692
整理のためのツールです。

30
00:01:04,692 --> 00:01:07,985
OOP のソリューションおよびコア部分は

31
00:01:07,985 --> 00:01:09,985
複数のスクリプトに分割されています。

32
00:01:09,985 --> 00:01:11,985
そして各々がひとつの役割をもっています。

33
00:01:12,485 --> 00:01:14,485
このため、クラスはひとつのタスク専用とすべきです。

34
00:01:14,485 --> 00:01:18,222
このサンプルでは複数の異なるタスクを

35
00:01:18,222 --> 00:01:20,222
ハンドリングするスクリプトがあるので

36
00:01:20,222 --> 00:01:22,222
より容易に管理するために

37
00:01:22,222 --> 00:01:24,776
3 つの短いスクリプトに分割します。

38
00:01:24,776 --> 00:01:26,651
例えば、このスクリプトでは

39
00:01:26,651 --> 00:01:29,618
インベントリ、動作、撃つ動作などハンドリングします。

40
00:01:30,836 --> 00:01:32,445
キューブにスクリプトをアタッチした場合

41
00:01:32,445 --> 00:01:34,044
の動作はこのようになります。

42
00:01:34,544 --> 00:01:36,516
動き回したり、小さなオブジェクトを

43
00:01:36,516 --> 00:01:38,516
発射したり

44
00:01:39,016 --> 00:01:41,016
またアイテムのインベントリ管理をすることが出来ます。

45
00:01:41,016 --> 00:01:43,697
しかし、これらはすべてひとつの

46
00:01:43,697 --> 00:01:45,697
キャラクタースクリプトの中で管理されます。

47
00:01:46,197 --> 00:01:48,197
これらをインベントリの中で整理することを

48
00:01:48,197 --> 00:01:51,470
していく必要があり、インベントリ、動作、発射

49
00:01:51,470 --> 00:01:53,470
3 つの異なるクラスで管理します。

50
00:01:53,970 --> 00:01:56,661
このためシーンを切替すると、

51
00:01:56,661 --> 00:01:58,661
シーンは完全に同じですが、キューブに

52
00:01:58,661 --> 00:02:00,661
アタッチされたスクリプトは別々のスクリプトに

53
00:02:00,661 --> 00:02:02,661
分割されています。これにより

54
00:02:02,661 --> 00:02:05,785
スクリプトの管理はより容易になり

55
00:02:05,785 --> 00:02:07,785
コーディング効率も上がります。

56
00:02:07,785 --> 00:02:09,785
クラスの使用方法をみていきます。

57
00:02:10,285 --> 00:02:12,844
この例ではインベントリクラスからみていきます。

58
00:02:13,344 --> 00:02:15,051
この中にはさらにサブクラスがあり、

59
00:02:15,051 --> 00:02:17,820
Stuff という名前です。クラスをこのときに作成して

60
00:02:17,820 --> 00:02:20,500
それは 3 つの integer 変数をもちます。

61
00:02:20,500 --> 00:02:22,500
ひとつは弾丸、ひとつは手榴弾、

62
00:02:22,500 --> 00:02:24,183
ひとつはロケットのための変数す。

63
00:02:24,183 --> 00:02:26,183
次にこのクラスのインスタンス

64
00:02:26,183 --> 00:02:28,612
すなわちオブジェクトと呼ばれるものをこの下の方に作成してます。

65
00:02:28,612 --> 00:02:30,612
次にデータ型、

66
00:02:30,612 --> 00:02:32,612
要するにクラス名を与えて

67
00:02:32,612 --> 00:02:34,759
new 構文を使用して

68
00:02:34,759 --> 00:02:38,595
再びクラスの名前を再度入力します。

69
00:02:38,595 --> 00:02:40,595
名前の最後にある {} は

70
00:02:40,595 --> 00:02:43,039
コンストラクタが使用されていることを

71
00:02:43,039 --> 00:02:45,511
示します。コンストラクタとは

72
00:02:45,511 --> 00:02:48,118
クラスの変数にデフォルトの値を

73
00:02:48,118 --> 00:02:50,118
使用できる、などいくつか実行できる

74 
00:02:50,118 --> 00:02:52,523
タスクを持った関数です。

75
00:02:52,523 --> 00:02:56,325
例えばデフォルトのコンストラクタをセットアップしてみましょう。

76
00:02:58,054 --> 00:03:00,054
ここでは各々のクラスの integer 変数に

77
00:03:00,054 --> 00:03:03,085
デフォルト値を与えてみました。

78
00:03:03,585 --> 00:03:06,097
すなわち 0 の値をデフォルトとする代わりに

79
00:03:06,097 --> 00:03:08,097
1 の値による初期化が行われます。

80
00:03:08,097 --> 00:03:10,782
もうひとつ出来ることとしては

81
00:03:10,782 --> 00:03:13,310
自身のコンストラクタを作成して

82
00:03:13,310 --> 00:03:15,310
これらの変数の引数をセットすることです。

83
00:03:15,713 --> 00:03:18,059
例えば、

84
00:03:18,390 --> 00:03:22,230
public 変数の Stuff を書いたうえで

85
00:03:22,230 --> 00:03:24,961
{} の中でいくつかの引数を作成することが出来ます。

86
00:03:25,889 --> 00:03:28,603
そこで出来ることとしては変数をこれらの引数に

87
00:03:28,603 --> 00:03:31,388
割り当てることです。

88
00:03:32,496 --> 00:03:34,496
つまり自身のクラスのオブジェクトまたはインスタンスを

89
00:03:34,496 --> 00:03:37,403
この下の方で作成した場合

90
00:03:37,403 --> 00:03:39,962
{} によってそれらのデフォルト値が

91
00:03:39,962 --> 00:03:41,962
何かを定義することが出来ます。

92
00:03:42,462 --> 00:03:45,080
このため integer の後に

93
00:03:45,080 --> 00:03:47,080
カンマを入力すれば、

94
00:03:47,080 --> 00:03:49,066
クラスのインスタンスでの

95
00:03:49,066 --> 00:03:50,760
変数が何を定義しているかはっきりと

96
00:03:50,760 --> 00:03:53,980
定めることが出来ます。例えば 50 個 の弾丸があるとして

97
00:03:53,980 --> 00:03:56,656
MonoDevelop によって

98
00:03:56,656 --> 00:03:58,656
入力するごとに補助が表示される

99
00:03:58,656 --> 00:04:00,656
ことが確認できます。

100
00:04:01,156 --> 00:04:03,876
例えば 5 個の手榴弾があり、

101
00:04:03,876 --> 00:04:05,876
5 個のロケットがあったとします。

102
00:04:05,876 --> 00:04:08,334
コンストラクタについて覚えておくべきことがいくつかあります。

103
00:04:08,696 --> 00:04:11,110
ひとつめの点は、コンストラクタの名前は

104
00:04:11,110 --> 00:04:13,458
つねにクラス名と同じということです。

105
00:04:14,093 --> 00:04:16,582
コンストラクタには戻り値は存在せず、

106
00:04:16,582 --> 00:04:18,182
void でさえありません。

107
00:04:18,682 --> 00:04:21,731
クラスには複数の異なったコンストラクタを持たせることが出来ますが

108
00:04:21,731 --> 00:04:23,731
オブジェクトが初期化されるときにコール出来るのは

109
00:04:23,731 --> 00:04:26,171
そのうちのひとつだけです。例えば

110
00:04:26,171 --> 00:04:28,171
最初のコンストラクタの場合は

111
00:04:28,171 --> 00:04:31,276
これら 3 つの integer の値をセットアップします。しかし、

112
00:04:31,276 --> 00:04:34,435
変数がより多くあった場合を考えてみます。float 変数を

113
00:04:34,435 --> 00:04:36,435
追加して、積載燃料の量を表すものとしてみます。

114
00:04:36,935 --> 00:04:39,517
現時点ではコンストラクタはこのための変数を

115
00:04:39,517 --> 00:04:42,448
セットアップしません。しかしもうひとつのコンストラクタをセットアップして、

116
00:04:42,448 --> 00:04:45,039
この機能を実現することが出来ます。

117
00:04:45,039 --> 00:04:48,142
さらにこのコンストラクタでセットアップされた

118
00:04:48,142 --> 00:04:51,260
引数を使用すれば

119
00:04:51,260 --> 00:04:53,260
このコンストラクタにより新しいオブジェクトを

120
00:04:53,260 --> 00:04:57,440
セットアップするのに使用されることが確認できます。このため弾丸を表すものや燃料を

121
00:04:58,202 --> 00:05:01,256
示す変数を

122
00:05:01,256 --> 00:05:03,256
持たせることが出来ます。

123
00:05:04,709 --> 00:05:06,557
別のコンストラクタが出来たところで、

124
00:05:06,557 --> 00:05:09,562
インスタンスを作成して

125
00:05:09,562 --> 00:05:12,903
インスタンスに入れた引数にもとづいて

126
00:05:12,903 --> 00:05:15,487
異なったコンストラクタを使用することが出来ます。

127
00:05:15,487 --> 00:05:18,647
例えば new Stuff と書いて、

128
00:05:18,647 --> 00:05:22,957
今回は 50 個の弾丸と

129
00:05:22,957 --> 00:05:27,020
1.5 リットルのl燃料があると宣言することが出来ます。

130
00:05:27,020 --> 00:05:30,054
次に、このクラスのインスタンスは

131
00:05:30,054 --> 00:05:32,524
引数の数がマッチするためコンストラクタが

132
00:05:32,524 --> 00:05:35,102
使用されます。逆にクラスのコンストラクタもうひとつのインスタンスは

133
00:05:35,102 --> 00:05:37,102
引数の数がマッチするこっちの

134
00:05:37,102 --> 00:05:39,102
コンストラクタを使用します。

135
00:05:39,102 --> 00:05:41,102
コンストラクタでは色んなことを

136
00:05:41,102 --> 00:05:43,102
行うことが出来て同じクラスに複数の

137
00:05:43,102 --> 00:05:45,777
コンストラクタをもたせることが出来ます。

138
00:05:45,777 --> 00:05:47,777
これでクラスがいかに便利なものであるか、

139
00:05:47,777 --> 00:05:50,701
ゲームを作成するうえでデータの整理に役立つか伝えられたので、、

140
00:05:50,701 --> 00:05:52,701
スクリプトがどのようにレイアウトさせるか

141
00:05:52,701 --> 00:05:54,701
考え抜くことを推奨します。

142
00:05:54,701 --> 00:05:57,058
逆に何も考えずに

143
00:05:57,058 --> 00:05:59,058
巨大なひとつのクラスの中に異なるものが

144
00:05:59,058 --> 00:06:00,207
ごちゃまぜに混ざっていると大変です。
(翻訳:gamesonytablet)
