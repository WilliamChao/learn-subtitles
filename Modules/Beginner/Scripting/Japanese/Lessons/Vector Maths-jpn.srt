1
00:00:00,387 --> 00:00:02,715
ゲーム開発においては、ベクトルを使用して

2
00:00:02,715 --> 00:00:05,186
メッシュをみつけたり、方角の計算など

3
00:00:05,186 --> 00:00:07,598
その他、さまざまな計算を行うため

4
00:00:07,598 --> 00:00:09,025
ベクトルを理解するのは重要です。

5
00:00:09,025 --> 00:00:11,964
ベクトルとは、二つの点を結ぶ直線です。

6
00:00:11,964 --> 00:00:13,964
ベクトルには長さがあり、

7
00:00:13,964 --> 00:00:16,533
magnitude と呼ばれます。まずは簡単な

8
00:00:16,533 --> 00:00:18,533
2D ベクトルからみていきます。

9
00:00:18,867 --> 00:00:20,867
2D ベクトルは、原点である (0, 0) からみた

10
00:00:20,867 --> 00:00:23,592
グラフ上のある地点を表し、

11
00:00:23,592 --> 00:00:27,026
2D 平面の任意の地点を表すことが出来ます。

12
00:00:27,026 --> 00:00:29,411
原点からみた地点は、

13
00:00:29,411 --> 00:00:32,050
明示的な向き (direction) があります。これは

14
00:00:32,050 --> 00:00:35,138
二つの要素 X および Y から構成されます。

15
00:00:35,138 --> 00:00:39,617
これは X 軸および Y 軸に沿った距離を表します。

16
00:00:39,617 --> 00:00:42,086
このサンプルで、ベクトルは

17
00:00:42,086 --> 00:00:45,166
は原点から (12, 5) を表します。

18
00:00:45,166 --> 00:00:46,932
これらの点の間の距離は

19
00:00:46,932 --> 00:00:48,932
magnitude と呼ばれます。

20
00:00:48,932 --> 00:00:50,932
数学的に算出するには

21
00:00:50,932 --> 00:00:53,223
ピタゴラスの定理を使用して

22
00:00:53,223 --> 00:00:55,513
斜辺の 2 乗は

23
00:00:55,513 --> 00:00:57,513
他の二辺の 2 乗と

24
00:00:57,513 --> 00:00:59,154
等しくなります。

25
00:00:59,154 --> 00:01:01,183
ベクトルの数字における斜辺の長さは

26
00:01:01,183 --> 00:01:03,183
ここで求める magnitude と同じです。

27
00:01:03,476 --> 00:01:05,906
二人の人がいたとして、

28
00:01:05,906 --> 00:01:07,906
Charles および Quentin という名前でフィールドにいて

29
00:01:07,906 --> 00:01:09,389
武器をもっているとしましょう。

30
00:01:09,889 --> 00:01:11,651
二人の紳士は

31
00:01:11,651 --> 00:01:14,243
ピストルでの決闘をすることに同意しますが、
わ
32
00:01:14,243 --> 00:01:17,363
ピストルの射程距離は 12 ユニットです。この場合、相手に届くでしょうか？

33
00:01:17,573 --> 00:01:20,236
実際にに調べてみます。みてのとおり

34
00:01:20,236 --> 00:01:22,389
magnitude はグリッド上での

35
00:01:22,389 --> 00:01:25,240
X と Y の 2 乗の

36
00:01:25,240 --> 00:01:28,173
合計であり、

37
00:01:28,173 --> 00:01:32,793
169 となります。169 の平方根は 13 なので

38
00:01:32,793 --> 00:01:34,793

Charles および Quentin の
39
00:01:34,793 --> 00:01:37,280
弾丸は相手に届かず

40
00:01:37,280 --> 00:01:39,788
平和的にこのチュートリアルが進んで一安心です。

41
00:01:40,039 --> 00:01:43,136
さらに、Charles はクロスボウをもっていて

42
00:01:43,136 --> 00:01:45,136
ベクトルを使用するもう一つの例をみます。

43
00:01:45,136 --> 00:01:47,967
これも 2D 平面で問題解決してきます。

44
00:01:47,967 --> 00:01:49,507
すでにベクトルによって

45
00:01:49,507 --> 00:01:51,507
原点からみえ空間上の

46
00:01:51,507 --> 00:01:53,285
相対位置を表すことが出来ることをみてきました。

47
00:01:53,785 --> 00:01:55,261
さらに、移動するオブジェクトには

48
00:01:55,261 --> 00:01:57,574
速度 (velocity) があり、

49
00:01:57,574 --> 00:02:00,147
これは時間の経過後の位置の移動量です。

50
00:02:00,147 --> 00:02:02,920
これもベクトルとして表すことが出来ます。

51
00:02:02,920 --> 00:02:05,401
ダイアグラム上で Frederick は (5, 6) の位置にいて

52
00:02:05,401 --> 00:02:08,533
毎時 (12, 5) の速度です。

53
00:02:09,033 --> 00:02:10,661
言いかえると、Frederick は

54
00:02:10,661 --> 00:02:13,268
X 軸方向に 12、

55
00:02:13,268 --> 00:02:15,712
Y 軸方向に 5 の方向に移動します。

56
00:02:15,712 --> 00:02:17,864
このため 1 時間後の新しい位置をみつけるには

57
00:02:17,864 --> 00:02:20,442
現在の位置に

58
00:02:20,442 --> 00:02:22,442
速度のベクトルを足して

59
00:02:22,442 --> 00:02:24,442
移動先の位置が確定します。

60
00:02:24,942 --> 00:02:26,679
位置は (17, 11) です。
61
00:02:26,679 --> 00:02:28,679
全てのベクトルは

62
00:02:28,679 --> 00:02:32,204
原点、すなわち空間上のゼロ地点に対する相対位置で表現されます。

63
00:02:32,566 --> 00:02:35,206
そして速度ベクトルについても同様に計算できます。

64
00:02:35,206 --> 00:02:37,206
すなわち (5, 6) はゼロ地点に

65
00:02:37,206 --> 00:02:39,206
対する相対位置であり

66
00:02:39,706 --> 00:02:43,174
(12, 5) は移動量ゼロに対する相対速度です。

67
00:02:43,174 --> 00:02:44,912
Fredrick の速度がそのままであったとしても

68
00:02:44,912 --> 00:02:48,511
1 時間後の新しい位置は (17, 11) 

69
00:02:48,511 --> 00:02:50,456
となります。

70
00:02:50,456 --> 00:02:52,456
これは予測を伴うゲーム開発タスクに

71
00:02:52,456 --> 00:02:53,939
とって便利です。

72
00:02:54,439 --> 00:02:55,986
最終位置の各要素は

73
00:02:55,986 --> 00:02:58,400
2 つのベクトルの各要素の合計と

74
00:02:58,400 --> 00:03:00,400
等しくなります。

75
00:03:01,052 --> 00:03:03,052
X 軸において 5 と 12 の合計は 17 です。

76
00:03:03,052 --> 00:03:06,297
Y 軸で 6 と 5 の合計は 11 と

77
00:03:06,297 --> 00:03:07,910
なります。

78
00:03:08,631 --> 00:03:10,811
これは引き算も同様です。

79
00:03:11,311 --> 00:03:13,311
3 次元のベクトルは 2D と同様に作用しますが

80
00:03:13,311 --> 00:03:16,540
奥行をあらわす Z 軸に

81
00:03:16,540 --> 00:03:18,276
外挿されます。

82
00:03:18,791 --> 00:03:21,890
X 軸および Z 軸は水平な平面を形成して

83
00:03:21,890 --> 00:03:24,484
Y 軸は上向きの方向です。

84
00:03:25,136 --> 00:03:28,067
Unity は左手系座標軸です。

85
00:03:28,567 --> 00:03:30,567
意味としては、左手において

86
00:03:30,567 --> 00:03:33,037
人差し指を上向きに、

87
00:03:33,037 --> 00:03:35,037
親指を横向きにして L 字型にして、

88
00:03:35,037 --> 00:03:36,940
中指を自分から

89
00:03:36,940 --> 00:03:39,135
遠ざかる向きにしたとき、

90
00:03:39,135 --> 00:03:42,109
親指が X 軸、 人差し指が Y 軸、

91
00:03:42,109 --> 00:03:45,650
そして中指が Z 軸を示します。

92
00:03:45,650 --> 00:03:47,650
この手のジェスチャーにより

93
00:03:47,650 --> 00:03:49,650
X, Y, Z 軸の順番を覚えるのに

94
00:03:49,650 --> 00:03:51,650
便利です。

95
00:03:51,901 --> 00:03:53,901
Z が奥行きを表すことを前提に

96
00:03:53,901 --> 00:03:56,827
前述のサンプルで、Charles および Quentin は

97
00:03:56,827 --> 00:03:58,827
実際に立っていたであろう位置は

98
00:03:58,827 --> 00:04:00,827
XZ 平面であり、

99
00:04:00,827 --> 00:04:03,539
3D 空間で座標を記述するときの順番は

100
00:04:03,553 --> 00:04:08,147
(X, Y, Z) であることを覚えておくべきです。 Quentin は (0, 0, 0)、

101
00:04:08,147 --> 00:04:12,453
すなわち3D 空間の原点の位置にいます。そして Charles は (12, 0, 5) の位置にいます。

102
00:04:12,453 --> 00:04:14,453
3D らしさを増すために

103
00:04:14,453 --> 00:04:16,285
Charls が高い位置にいると想定してみます。

104
00:04:16,285 --> 00:04:19,091
7 ユニットだけ高い位置に配置してみると、

105
00:04:19,091 --> 00:04:23,164
Charles の位置は (12, 7, 5) です。

106
00:04:23,164 --> 00:04:25,164
Charles および Quentin の間の

107
00:04:25,164 --> 00:04:27,164
ベクトルの大きさの計算は

108
00:04:27,164 --> 00:04:31,228
2D と同様ですが、今度は Z 軸があります。

109
00:04:31,228 --> 00:04:33,582
Unity はこの計算を容易にするために

110
00:04:33,582 --> 00:04:35,582
ヘルパー関数 として

111
00:04:35,582 --> 00:04:37,637
Vector3.magnitude など用意しています。

112
00:04:37,637 --> 00:04:39,637
より詳細については下のリンクの

113
00:04:39,637 --> 00:04:40,882
ドキュメントを参照して下さい。

114
00:04:40,882 --> 00:04:42,621
3D ベクトルについてはいくつか便利な関数が

115
00:04:42,621 --> 00:04:45,761
あり、Dot （ドット積）および Cross （クロス積）といったベクトルの掛け算です。

116
00:04:45,761 --> 00:04:47,761
ドット積は二つのベクトルをもとに

117
00:04:47,761 --> 00:04:50,946
ひとつの値であるスカラーを生成します。

118
00:04:50,946 --> 00:04:52,946
ふたつのベクトルのドット積を求めるには

119
00:04:52,946 --> 00:04:55,030
構成要素である

120
00:04:55,030 --> 00:04:57,030
X, Y および Z の値を

121
00:04:57,406 --> 00:05:00,116
互いに掛け合わせて結果の値を

122
00:05:00,116 --> 00:05:02,590
求めます。

123
00:05:02,590 --> 00:05:11,804
これは例えば (Ax*Bx)+(Ay*By)+(Az*Bz) として表現されます。

124
00:05:11,804 --> 00:05:13,457
この積算により

125
00:05:13,457 --> 00:05:15,191
指定した二つのベクトルに関する情報が得られます。

126
00:05:15,191 --> 00:05:18,205
この使い方のひとつは

127
00:05:18,205 --> 00:05:20,205
二つのベクトルが互いに垂直であるか

128
00:05:20,205 --> 00:05:22,205
確認することです。もしドット積が

129
00:05:22,205 --> 00:05:25,176
ゼロである場合、それらのベクトルは

130
00:05:25,176 --> 00:05:27,655
垂直です。このサンプルであｈ

131
00:05:27,655 --> 00:05:30,081
A, B の二つのベクトルがあります。

132
00:05:30,081 --> 00:05:35,693
ベクトル A は (0, 7, 1) です。ベクトル B は (0, 0, 6) です。

133
00:05:35,693 --> 00:05:37,693
サンプルの中で掛け算をした構成要素の

134
00:05:37,693 --> 00:05:40,013
合計が 6 であり、

135
00:05:40,013 --> 00:05:41,707
これらのベクトルは垂直ではありません。

136
00:05:41,707 --> 00:05:45,603
もしベクトル A が (0, 7, 0) であり、

137
00:05:45,603 --> 00:05:49,141
そして B が (0, 0, 6) である場合、

138
00:05:49,141 --> 00:05:51,400
ドット積が 0 と等しく、そしてベクトルは

139
00:05:51,400 --> 00:05:53,400
確かに垂直となります。

140
00:05:53,400 --> 00:05:54,987
もうひとつドット積を使用する

141
00:05:54,987 --> 00:05:57,615
サンプルをみますが、今回はベクトル A は

142
00:05:57,615 --> 00:06:03,127
(4, 5, 11) であり、 B は (-3, -2, 2) なのですが、

143
00:06:03,127 --> 00:06:05,127
これらの構成要素を掛け合わせると

144
00:06:05,127 --> 00:06:10,587
(-12, -10, 22) が得られ、この合計は 0 です。

145
00:06:10,587 --> 00:06:13,524
このため、この二つのベクトルも垂直です。

146
00:06:14,024 --> 00:06:16,024
ドット積をしようするサンプルは

147
00:06:16,024 --> 00:06:18,024
フライトシミュレータの作成かもしれません。

148
00:06:18,524 --> 00:06:20,524
ワールド空間の上方向のベクトルを調べて

149
00:06:20,524 --> 00:06:22,524
平面の forward ベクトルとの関係をみます。

150
00:06:23,024 --> 00:06:24,873
もし二つが垂直である場合、

151
00:06:24,873 --> 00:06:26,873
すなわちドット積が 0 と等しい場合。

152
00:06:26,873 --> 00:06:28,388
平面の

153
00:06:28,388 --> 00:06:31,037
抗力は最小であるはずです。ドット積が

154
00:06:31,037 --> 00:06:33,037
正の値として増加するにつれて

155
00:06:33,037 --> 00:06:35,037
平面が上向きになってい

156
00:06:35,037 --> 00:06:37,037
抗力を追加すると良いかもしれません。

157
00:06:37,037 --> 00:06:39,037
もしドット積が負の方向に増加すると

158
00:06:39,037 --> 00:06:41,037
飛行機がダイブをしていることが分かります。

159
00:06:41,037 --> 00:06:44,043
Unity にはヘルパー関数があり、

160
00:06:44,043 --> 00:06:47,198
ドット積の計算をより容易に行ないます。

161
00:06:47,198 --> 00:06:48,851
この詳細については、

162
00:06:48,851 --> 00:06:50,851
下のリンクにあるドキュメントを参照して下さい。

163
00:06:52,428 --> 00:06:54,428
クロス積では、ふたつのベクトルを異なった方法で

164
00:06:54,428 --> 00:06:56,734
組み合わせます。スカラーというひとつの値を

165
00:06:56,734 --> 00:06:59,803
生成する代わりに、クロス積は

166
00:06:59,803 --> 00:07:02,669
もうひとつのベクトルを生成します。具体的には

167
00:07:02,669 --> 00:07:05,474
もとの二つのベクトルに垂直なベクトルです。

168
00:07:05,974 --> 00:07:08,473
例えば、もしベクトル A と

169
00:07:08,473 --> 00:07:11,457
ベクトル B をクロスした場合、その積は

170
00:07:11,457 --> 00:07:14,481
ベクトル C となり、それは A と B と

171
00:07:14,481 --> 00:07:17,283
垂直です。これを数学的に記述するには

172
00:07:17,283 --> 00:07:20,249
キャレット記号 すなわち次の ^ 記号です。

173
00:07:20,249 --> 00:07:22,332
Unity の座標系は左手系であるため、

174
00:07:22,332 --> 00:07:24,664
これはクロス積です。

175
00:07:25,026 --> 00:07:27,026
左手を

176
00:07:27,026 --> 00:07:29,820
軸を求めるときに形にしてみると、

177
00:07:29,820 --> 00:07:31,820
クロス積ベクトルの向きを求めることが

178
00:07:31,820 --> 00:07:34,581
出来ます。このサンプルでは

179
00:07:34,581 --> 00:07:37,753
親指および人差し指はベクトル A およびベクトル B という

180
00:07:37,753 --> 00:07:39,153
知っているベクトルを表します。

181
00:07:39,515 --> 00:07:41,515
そして中指はクロス積の結果、

182
00:07:41,515 --> 00:07:44,237
すなわちベクトル C を表します。クロス積を

183
00:07:44,237 --> 00:07:46,237
詳細にみていくと

184
00:07:46,237 --> 00:07:48,859
ベクトル A およびベクトル B の構成要素をこのように整理します。

185
00:07:49,359 --> 00:07:51,359
しかし数学的にはどうみれば良いのか？

186
00:07:51,859 --> 00:07:53,859
クロス積を算出するには

187
00:07:53,859 --> 00:07:55,859
ふたつのベクトルを隣どおしに並べて

188
00:07:55,859 --> 00:07:57,916
次のことを繰り返します。

189
00:07:58,485 --> 00:08:00,583
この先は二つの構成要素を

190
00:08:00,583 --> 00:08:03,013
ひとつづつ組み合わせてクロス積を求められます。

191
00:08:03,732 --> 00:08:06,793
最初に Ay および Bz を掛け算します。

192
00:08:07,210 --> 00:08:10,554
次に Az および By を掛け算した結果を、先の結果から引き算します。

193
00:08:11,192 --> 00:08:12,890
これによりクロス積の X 構成要素が

194
00:08:12,890 --> 00:08:15,934
求められます。次に同じことを

195
00:08:15,934 --> 00:08:18,895
Az および Bx、また Ax および Bz で行ないます。

196
00:08:18,895 --> 00:08:20,545
これにより Y 構成要素が求められます。

197
00:08:21,188 --> 00:08:24,385
最後に同じことを Ax および By、

198
00:08:24,885 --> 00:08:28,110
そして Ay および Bx で行なって Z 構成要素を求めます。

199
00:08:28,941 --> 00:08:30,610
幸いなことに

200
00:08:30,610 --> 00:08:33,215
これは詳細な計算でありながら、Unity には

201
00:08:33,215 --> 00:08:36,119
別のヘルパー関数があり、この計算をやってくれます。

202
00:08:36,119 --> 00:08:38,119
このようなものです。

203
00:08:38,619 --> 00:08:40,619
クロス積をしようするひとつの例は

204
00:08:40,619 --> 00:08:42,619
タンクの砲台を回転させる

205
00:08:42,619 --> 00:08:45,107
トルクを加える

206
00:08:45,107 --> 00:08:46,920
軸を求めるときです。

207
00:08:47,349 --> 00:08:48,985
砲台がすでに向いている方向が

208
00:08:48,985 --> 00:08:51,959
分かっていることを前提にして、さらに

209
00:08:51,959 --> 00:08:53,959
向くべき方向が分かっていれば

210
00:08:53,959 --> 00:08:55,959
この二つのベクトルを掛けて

211
00:08:55,959 --> 00:08:58,889
トルクによる回転を適用すべき軸を求めることが出来ます。
