1
00:00:00,000 --> 00:00:01,856
それではゲームのスクリプト作成を

2
00:00:01,856 --> 00:00:04,357
始めます。最初に作ってみるのは

3
00:00:04,357 --> 00:00:06,975
アラームライトを制御するもので

4
00:00:06,975 --> 00:00:08,975
プレイヤーがアラームのトリガーを引いた時に呼ばれます。

5
00:00:08,975 --> 00:00:12,531
ライトの光り方は脈打つように制御させたいため、

6
00:00:12,531 --> 00:00:14,531
新規 C# スクリプト AlarmLight を

7
00:00:14,531 --> 00:00:17,206
アタッチする AlarmLight ゲームオブジェクトを選択して

8
00:00:18,079 --> 00:00:21,300
Add Component - New Script とクリックします。

9
00:00:21,300 --> 00:00:23,300
Alarm Script と名前をつけます。

10
00:00:27,240 --> 00:00:29,060
大文字小文字を

11
00:00:29,060 --> 00:00:31,060
間違えないようにします。

12
00:00:31,060 --> 00:00:33,060
Create をクリックして追加し、

13
00:00:33,560 --> 00:00:35,393
アイコンをダブルクリックして編集できるようにします。

14
00:00:35,393 --> 00:00:37,393
はじめに Unity デフォルトで挿入される

15
00:00:37,393 --> 00:00:39,393
コード部分を削除して

16
00:00:39,393 --> 00:00:42,423
ゼロベースから始めます。

17
00:00:43,572 --> 00:00:45,572
Start() および Update() 関数について

18
00:00:45,572 --> 00:00:47,572
付随するコメント文とともに削除します

19
00:00:50,434 --> 00:00:52,434
これで空のクラスが出来ました。

20
00:00:52,434 --> 00:00:53,828
次にクラス変数を追加していきます。

21
00:00:54,425 --> 00:00:56,425
最初は public から作成します。

22
00:00:57,270 --> 00:00:59,270
float を複数追加して、

23
00:00:59,270 --> 00:01:01,270
制御用のパラメータとして

24
00:01:01,270 --> 00:01:03,270
様々なライト強度を制御する変数、

25
00:01:03,270 --> 00:01:05,284
ライト強度の間をフェードするスピードの変数を追加します。

26
00:01:05,284 --> 00:01:07,284
ではフェードするスピードから始めます。

27
00:01:08,336 --> 00:01:10,818
デフォルトで 2.0 の値にしますが、インスペクタで後ほど

28
00:01:10,818 --> 00:01:13,967
自由に調整できます。

29
00:01:13,967 --> 00:01:15,967
次にライトが

30
00:01:15,967 --> 00:01:17,967
明るい/暗いときの強度をあらわす float

31
00:01:17,967 --> 00:01:19,967
を追加して、それらの値の間をフェードさせます。

32
00:01:20,578 --> 00:01:23,820
2.0 および 0.5 にすれば適切な値ですが

33
00:01:23,820 --> 00:01:25,820
調整したければ後からインスペクタ上で

34
00:01:25,820 --> 00:01:27,372
次に Lerp 関数を使用して

35
00:01:28,555 --> 00:01:30,555
これらの値の間を

36
00:01:30,555 --> 00:01:32,898
変化するようにします。

37
00:01:32,898 --> 00:01:34,898
今回は終点に近づくにつれ

38
00:01:34,898 --> 00:01:37,230
スローダウンする

39
00:01:37,230 --> 00:01:38,873
ようにします。

40
00:01:38,873 --> 00:01:41,109
そのためには

41
00:01:41,109 --> 00:01:43,480
フェードのスピードを逆側の終点のターゲット強度に到達するまでに

42
00:01:43,480 --> 00:01:45,133
変化させます。

43
00:01:45,621 --> 00:01:47,925
このために、ターゲットを逆側の終点に

44
00:01:47,925 --> 00:01:49,925
設定する境界値も

45
00:01:49,925 --> 00:01:51,078
追加していきます。

46
00:01:51,951 --> 00:01:53,951
最後に必要となる public 変数は

47
00:01:53,951 --> 00:01:55,270
boolean であり

48
00:01:55,270 --> 00:01:58,232
アラームがオンかどうか示します。

49
00:01:58,232 --> 00:02:00,232
これを public とする意味はインスペクタ上で編集する目的ではなく、

50
00:02:00,232 --> 00:02:02,232
別スクリプト参照するためであり、

51
00:02:02,232 --> 00:02:04,232
アラームがオンであるべきかを判断させることが

52
00:02:04,232 --> 00:02:05,569
できます。

53
00:02:07,105 --> 00:02:09,105
さらに必要なクラス変数は、

54
00:02:09,105 --> 00:02:11,105
private としても問題ありません。

55
00:02:11,105 --> 00:02:13,105
ライトを変化させるときのターゲットとなる

56
00:02:13,105 --> 00:02:15,105
ライト強度を格納します。

57
00:02:16,461 --> 00:02:18,461
これでクラス変数の追加は完了し、

58
00:02:18,461 --> 00:02:20,461
シーンの最初で必要な処理を

59
00:02:20,461 --> 00:02:22,461
行うようにします。

60
00:02:22,461 --> 00:02:25,128
その処理は Awake 関数で行います。ここで追加して下さい。

61
00:02:25,128 --> 00:02:26,934
シーンの最初ではアラームは

62
00:02:26,934 --> 00:02:29,636
オフであるためライト強度が

63
00:02:29,636 --> 00:02:31,110
ゼロになるようにします。

64
00:02:31,900 --> 00:02:33,900
さらにアラームが

65
00:02:33,900 --> 00:02:36,584
有効化された直後は

66
00:02:36,598 --> 00:02:38,264
ライト強度が最大値に遷移するようにします。

67
00:02:39,084 --> 00:02:41,545
次は Update 関数ですが

68
00:02:41,545 --> 00:02:43,545
スクリプト処理のほとんどがここでなされ、

69
00:02:44,045 --> 00:02:45,077
ここで追加して下さい。

70
00:02:46,088 --> 00:02:48,088
各々の Update ごとにやりたいことは

71
00:02:48,088 --> 00:02:50,391
AlarmOn 変数が

72
00:02:50,391 --> 00:02:52,391
true であるかチェックすることです。

73
00:02:53,885 --> 00:02:55,885
true であればライト強度で Lerp を用いて、現在のライト強度と

74
00:02:55,885 --> 00:02:57,885
ターゲット強度の間を

75
00:02:57,885 --> 00:03:01,124
行き来するようにします。

76
00:03:01,124 --> 00:03:03,124
フェードするスピードを最後の引数で含めるようにして

77
00:03:03,124 --> 00:03:06,159
どれぐらいの速度とするか調整できるようにします。

78
00:03:08,662 --> 00:03:10,662
次にライト強度が

79
00:03:10,662 --> 00:03:12,662
更新されているものとして、

80
00:03:12,662 --> 00:03:14,662	
ライト強度がターゲット強度に近い値となり

81
00:03:14,662 --> 00:03:17,477
今度はターゲットを逆の端に変更して良いか判定を行います。

82
00:03:18,322 --> 00:03:19,861
例えば、もしライト強度が最も明るくなるようになっていたとして

83
00:03:19,861 --> 00:03:23,211
ある範囲まで近づくと

84
00:03:23,211 --> 00:03:25,211
今度は最も暗くなるところに近づくようにターゲットを変更します。

85
00:03:25,211 --> 00:03:27,708
これを実現するには Update 関数の中で

86
00:03:27,708 --> 00:03:29,708
新しい関数をコールするようにします。

87
00:03:29,708 --> 00:03:32,377
それでは Update 関数の終わりの } の直後まで移動して

88
00:03:32,377 --> 00:03:33,947
"Check Target Intensity" という新しい関数を

89
00:03:33,947 --> 00:03:35,947
追加します。

90
00:03:35,947 --> 00:03:37,947
この関数では

91
00:03:37,947 --> 00:03:39,947
ターゲット強度と、

92
00:03:39,947 --> 00:03:41,947
現在のライト強度の間の差分を調べる必要があり、

93
00:03:41,947 --> 00:03:44,294
その差分が一定値を下回ったかどうかを見ます。

94
00:03:44,294 --> 00:03:46,294
ターゲット強度と、

95
00:03:46,294 --> 00:03:48,294
現在のライト強度の間の差分を調べるには

96
00:03:48,294 --> 00:03:50,294
Mathf クラスの 

97
00:03:50,294 --> 00:03:52,294
Abs() 関数を使用します。

98
00:03:52,294 --> 00:03:54,752
この関数は

99
00:03:54,752 --> 00:03:57,606
引数として渡した数字を絶対値、すなわち

100
00:03:57,606 --> 00:03:59,206
正の値に変換して戻します。

101
00:03:59,206 --> 00:04:01,252
この場合は

102
00:04:01,252 --> 00:04:03,666
ターゲットのライト強度を

103
00:04:03,666 --> 00:04:04,953
反対の端の値に変更する必要があります。

104
00:04:05,577 --> 00:04:07,941
ターゲット強度が最大の明るさかどうかをチェックして

105
00:04:08,699 --> 00:04:11,468
もしそうであれば最小の明るさをセットして

106
00:04:12,548 --> 00:04:15,122
反対にそうでなければ最大の明るさをセットします。

107
00:04:18,854 --> 00:04:21,513
CheckTargetIntensity 関数が完了したら

108
00:04:21,513 --> 00:04:23,513
コールが行われるように

109
00:04:23,513 --> 00:04:25,513
Update 関数の中に Alarm を含めるようにします。

110
00:04:27,436 --> 00:04:29,282
この方法によってライト強度の

111
00:04:29,282 --> 00:04:31,858
フェードイン、フェードアウトはスムーズに行われ、

112
00:04:31,858 --> 00:04:33,858
Lerp された値はターゲットに近づくにつれて

113
00:04:33,858 --> 00:04:35,304
遅くなることに留意して下さい。

114
00:04:35,304 --> 00:04:37,304
これを単純化するには別の便利な関数を実装することも出来ます。

115
00:04:37,304 --> 00:04:41,076
それはMathf.Pingpongと呼ばれます。

116
00:04:41,076 --> 00:04:42,965
この関数が行うことは

117
00:04:42,965 --> 00:04:45,628
ゼロと与えられた変数との間の値を戻すものですが、

118
00:04:45,628 --> 00:04:47,628
この場合は遷移のスピードが一定値であるため

119
00:04:47,628 --> 00:04:49,809
スムーズな動きには見えなくなります。

120
00:04:49,809 --> 00:04:51,809
以上でアラームがオンの場合の処理は完了です。

121
00:04:51,809 --> 00:04:54,322
しかし、アラームがオフの場合は

122
00:04:54,322 --> 00:04:56,845
ライト強度をゼロに戻す必要があります。

123
00:04:56,845 --> 00:04:58,845
Update 関数にある if 文に

124
00:04:58,845 --> 00:05:00,553
else を追加します。

125
00:05:01,362 --> 00:05:03,211
ここでライト強度に対して、同様の Lerpを使用して

126
00:05:03,211 --> 00:05:06,919
今回は値にゼロをセットします。

127
00:05:15,067 --> 00:05:16,814
以上でスクリプトに対する変更は完了であるため、

128
00:05:16,814 --> 00:05:19,838
保存したうえでエディタに戻ります。

129
00:05:20,917 --> 00:05:22,917
すぐに気付くことですが public 変数はスクリプト

130
00:05:22,917 --> 00:05:24,917
がアタッチされているインスペクタク上で

131
00:05:24,917 --> 00:05:26,336
表示されます。

132
00:05:27,061 --> 00:05:28,225
次にアラームに対して行うべき変更が

133
00:05:28,225 --> 00:05:29,820
残っています。

134
00:05:29,820 --> 00:05:32,498
アラーム音の再生を実装する必要があります。

135
00:05:32,498 --> 00:05:34,498
お気づきかもしれませんが、レベルのあちこちに

136
00:05:34,498 --> 00:05:36,064
スピーカーが配置されてます。

137
00:05:36,668 --> 00:05:37,955
各々のスピーカーはアラームのサウンドエフェクト再生を行います。

138
00:05:37,955 --> 00:05:40,792
これを行うためにはいくつかセットアップが必要な内容があります。

139
00:05:40,792 --> 00:05:43,906
早速作業に入るために

140
00:05:43,906 --> 00:05:47,895
まずはenv_stealth_staticを展開して次にpropsを展開します。

141
00:05:50,667 --> 00:05:54,651
prop_megaphoneゲームオブジェクトに対してまとめて

142
00:05:54,651 --> 00:05:56,651
Shift を押しながら選択すること複数選択をすれば

143
00:05:57,819 --> 00:05:59,553
変更を全てに同時反映することが

144
00:05:59,553 --> 00:06:01,553
出来るようになります。

145
00:06:03,390 --> 00:06:04,837
それでは全て同じタグをつけますが、

146
00:06:04,837 --> 00:06:06,837
Siren というタグをつけましょう。

147
00:06:09,268 --> 00:06:11,865
またそれぞれに対してオーディオソースを追加することで

148
00:06:11,865 --> 00:06:15,236
オーディオクリップの再生が出来るようにします。

149
00:06:15,236 --> 00:06:17,821
インスペクタ上のAdd Componentボタンをクリックして

150
00:06:17,821 --> 00:06:19,970
Audio - Audio Source を開きます。

151
00:06:20,559 --> 00:06:22,559
最後にオーディオ ソースのセットアップが正しいかを

152
00:06:22,559 --> 00:06:24,455
確認することにします。

153
00:06:24,455 --> 00:06:26,455
プロジェクトパネルの Audio フォルダをみてみると、オーディオクリップのなかで

154
00:06:26,455 --> 00:06:29,615
Alarm Triggeredと書かれたものが見つかります。

155
00:06:29,615 --> 00:06:32,921
これをAudipo Clipプロパティ上にドラッグ＆ドロップします。

156
00:06:34,060 --> 00:06:36,060
今回はゲーム開始時に再生されるための

157
00:06:36,060 --> 00:06:38,060
Play On Awake は無効にして、

158
00:06:38,060 --> 00:06:40,060
再生時の Loop は有効とします。

159
00:06:40,060 --> 00:06:42,880
次に各々のタワーの音の範囲を調整するため

160
00:06:42,880 --> 00:06:44,880
3D Sound Settings を

161
00:06:44,880 --> 00:06:46,880
Audio Source コンポーネント上でみつけて

162
00:06:46,880 --> 00:06:50,343
Min Distanceの値を 5 にセットします。

163
00:06:50,343 --> 00:06:52,343
シーンビューにおいて

164
00:06:52,343 --> 00:06:54,343
青い球状の線が表示されたものが

165
00:06:54,343 --> 00:06:56,343
各タワーの音の範囲に相当します

166
00:06:56,343 --> 00:06:58,343
もしゲームでより大きな音にしたい場合は

167
00:06:58,343 --> 00:07:00,542
後ほど調整することも出来ます。

168
00:07:00,542 --> 00:07:02,868
以上でアラームのセットアップの必要な作業は完了です。

169
00:07:02,868 --> 00:07:04,868
ここで忘れずに保存するため

170
00:07:04,868 --> 00:07:07,293
FileメニューからSave Sceneを選びます。

171
00:07:07,293 --> 00:07:09,293
次のビデオではゲームで使用するタグの一覧を作成して

172
00:07:09,293 --> 00:07:11,812
Game Controller 中で使用することにします。
(翻訳:gamesonytablet)
