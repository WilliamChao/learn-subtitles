1
00:00:00,000 --> 00:00:01,832
多くのゲームにはゲームコントローラと呼ばれるものがあります。

2
00:00:01,832 --> 00:00:04,432
具体的な目的はゲームにより異なりますが


3
00:00:04,432 --> 00:00:06,818
一般的には

4
00:00:06,818 --> 00:00:08,818
幅広く利用可能である情報をハンドリングして、

5
00:00:08,818 --> 00:00:11,082
ゲームのなかで互いに依存関係のある

6
00:00:11,082 --> 00:00:13,082
オブジェクトを制御する

7
00:00:13,082 --> 00:00:14,313
ためにあります。

8
00:00:15,089 --> 00:00:17,491
ひとつの例はゲームコントローラを使用して

9
00:00:17,491 --> 00:00:19,491
いくつのアイテムが拾われたかにもとづくスコアを

10
00:00:19,491 --> 00:00:20,711
計算することです。

11
00:00:21,211 --> 00:00:23,211
今回のゲームコントローラは様々なタスクを

12
00:00:23,211 --> 00:00:25,713
ハンドリングしますがもっとも重要なのは

13
00:00:25,713 --> 00:00:27,713
プレイヤーが発見された最後の場所を格納する

14
00:00:27,713 --> 00:00:28,803
ことです。

15
00:00:29,413 --> 00:00:31,413
ゲームコントローラを作成するには、

16
00:00:31,413 --> 00:00:33,689
空のゲームオブジェクトを作成します。

17
00:00:34,438 --> 00:00:37,159
メニューから Game Object - Create Empty を選択します。

18
00:00:37,159 --> 00:00:39,710
GameControllerと名前をつけて、

19
00:00:39,710 --> 00:00:41,875
タグもGameControllerとします。

20
00:00:46,270 --> 00:00:48,201
ここではゲームコントローラを使用して

21
00:00:48,201 --> 00:00:50,800
ゲームミュージックを再生します。

22
00:00:50,800 --> 00:00:52,800
オーディオソース コンポーネントをアタッチして

23
00:00:52,800 --> 00:00:54,675
Audio フォルダにあるミュージックを上に

24
00:00:54,675 --> 00:00:56,150
ドラッグします。

25
00:00:57,382 --> 00:00:59,900
music_normal というクリップを

26
00:00:59,900 --> 00:01:01,747
オーディオ クリップ 設定に割り当てます。

27
00:01:01,747 --> 00:01:03,747
ゲームが開始するときに

28
00:01:03,747 --> 00:01:05,747
ミュージック再生してその後ループさせます。このために

29
00:01:05,747 --> 00:01:07,526
Play Awake および Loop をセットします。

30
00:01:08,123 --> 00:01:10,123
またミュージックのボリュームをわずかに小さくさせます。

31
00:01:10,123 --> 00:01:13,114
このためにボリュームを 0.8 にセットします。

32
00:01:13,614 --> 00:01:15,614
オーディオ ソース には ヒントがありクリップが

33
00:01:15,614 --> 00:01:18,130
2D 音声であるのか 3D 音声であるのか表示します。

34
00:01:18,630 --> 00:01:20,630
このクリップは 2D 音声として

35
00:01:20,630 --> 00:01:22,630
オーディオ リスナーのポジションによって

36
00:01:22,630 --> 00:01:24,381
変化しないようにします。

37
00:01:25,075 --> 00:01:27,075
メインミュージック再生に加えて

38
00:01:27,075 --> 00:01:28,798
アラームが発報したときパニックするような音楽を

39
00:01:28,798 --> 00:01:30,798
増やします。

40
00:01:30,798 --> 00:01:32,798
オーディオ クリップを単に切り替えて、

41
00:01:32,798 --> 00:01:35,326
ギャップを作り出すよりも

42
00:01:35,326 --> 00:01:37,326
追加のオーディオ ソースを

43
00:01:37,326 --> 00:01:39,326
別の子ゲームオブジェクトをつけて

44
00:01:39,326 --> 00:01:41,326
それによりパニック音をフェードさせて、同時に

45
00:01:41,326 --> 00:01:44,020
メイン ミュージックをフェードして小さくします。

46
00:01:44,020 --> 00:01:46,020
新規の空のゲームオブジェクトを作成するために

47
00:01:46,020 --> 00:01:48,392
メニューから Game Object - Create Empty を選択して

48
00:01:48,392 --> 00:01:50,835
secondaryMusic と名前をつけます。

49
00:01:52,164 --> 00:01:54,164
これをゲームコントローラの子オブジェクトにするために、

50
00:01:54,164 --> 00:01:56,164
その上にHierarchy 上で

51
00:01:56,164 --> 00:01:57,543
ドラッグ＆ドロップします。

52
00:01:59,963 --> 00:02:01,963
この子ゲームオブジェクトが必要な唯一のコンポーネントは

53
00:02:01,963 --> 00:02:04,308
オーディオ ソースです。

54
00:02:04,308 --> 00:02:06,300
Add Component をクリックして

55
00:02:06,300 --> 00:02:08,217
Audio - Audio Source を選択します。

56
00:02:08,217 --> 00:02:10,580
Audio フォルダ から

57
00:02:10,580 --> 00:02:14,042
music_panic のクリップをオーディオ クリップ設定で割り当てます。

58
00:02:14,639 --> 00:02:16,973
これも 2D 音声とします。

59
00:02:16,973 --> 00:02:19,166
あらかじめ Import Settings にて設定されています。

60
00:02:19,708 --> 00:02:21,708
サウンド クリップをループさせて

61
00:02:21,708 --> 00:02:23,306
さらにミュージックがレベルの開始時に

62
00:02:23,306 --> 00:02:25,891
再生されないようにします。

63
00:02:25,891 --> 00:02:27,891
このため Play On Awake をチェックせず

64
00:02:27,891 --> 00:02:30,099
ボリュームをゼロにセットします。

65
00:02:30,099 --> 00:02:31,751
ゲームコントローラで 2 つのスクリプトを

66
00:02:31,751 --> 00:02:33,751
最終的にはアタッチします。

67
00:02:33,751 --> 00:02:35,531
現在は最初のスクリプトのみ追加します。

68
00:02:35,531 --> 00:02:37,282
このスクリプトではプレイヤーが

69
00:02:37,282 --> 00:02:39,790
最後に発見された場所および

70
00:02:39,790 --> 00:02:41,790
どのオペレーションを実行すべきかハンドリングします。

71
00:02:42,400 --> 00:02:44,400
プレイヤーが発見されたとき他のスクリプトから参照をして

72
00:02:44,400 --> 00:02:46,883
プレイヤーの最後の発見場所を知ろうとします。

73
00:02:46,883 --> 00:02:49,664
このため LastPlayerSighting と名前をつけるようにします。

74
00:02:50,164 --> 00:02:52,164
ゲームコントローラをクリックして

75
00:02:53,396 --> 00:02:55,396
インスペクタの下部で

76
00:02:55,396 --> 00:02:58,389
Add Component をクリックしてNew Script を選択して

77
00:02:58,389 --> 00:03:01,383
LastPlaySighting と名前をつけます。

78
00:03:04,895 --> 00:03:07,410
アイコンをダブル クリックして開いたうえで編集します。

79
00:03:08,417 --> 00:03:10,417
いつもどおり初めにデフォルトの関数を

80
00:03:10,417 --> 00:03:12,795
スクリプトから削除します。

81
00:03:13,856 --> 00:03:15,856
まずパブリック変数から始めます。

82
00:03:15,856 --> 00:03:18,092
このクラスでもっとも重要な変数は

83
00:03:18,092 --> 00:03:19,953
プレイヤーが最後に発見された

84
00:03:19,953 --> 00:03:21,142
場所（Position）です。

85
00:03:21,642 --> 00:03:23,642
当然にこれは Vector3 である必要があるので、

86
00:03:23,642 --> 00:03:25,434
position と名前をつけます。

87
00:03:25,990 --> 00:03:27,990
変数のデフォルト値を

88
00:03:27,990 --> 00:03:30,280
(1000, 1000, 1000) とします。

89
00:03:30,904 --> 00:03:32,904
これによりプレイヤーの位置が

90
00:03:32,904 --> 00:03:34,456
分からない敵を表します。

91
00:03:34,997 --> 00:03:36,997
分からなくなった場合は、

92
00:03:36,997 --> 00:03:38,997
ポジションをこの値にセットします。

93
00:03:39,497 --> 00:03:41,497
値は任意で良いのですが、

94
00:03:41,497 --> 00:03:43,497
重要なことは決めた位置が

95
00:03:43,497 --> 00:03:45,497
プレイヤーが理論的に到達できない場所にすることにします。

96
00:03:46,328 --> 00:03:48,134
敵キャラはポジションが

97
00:03:48,134 --> 00:03:50,986
(1000, 1000, 1000) であると知ったときは

98
00:03:50,986 --> 00:03:52,643
ポジションを無視してパトロールに戻ります。

99
00:03:54,729 --> 00:03:56,729
この reset position は

100
00:03:56,729 --> 00:03:59,305
別の変数として格納して、

101
00:03:59,305 --> 00:04:02,145
いつでもポジションを元に戻せるようにします。

102
00:04:05,286 --> 00:04:07,286
このスクリプトではライトのフェードそのもの

103
00:04:07,286 --> 00:04:10,333
およびサイレンを制御します。

104
00:04:10,333 --> 00:04:11,724
このためには変数が

105
00:04:11,724 --> 00:04:13,472
もういくつか必要です。

106
00:04:13,472 --> 00:04:15,610
初めにメインの Directional Light をフェードするためには、

107
00:04:15,610 --> 00:04:17,997
いくつかの float 変数を

108
00:04:17,997 --> 00:04:19,566
ライト強度を表すために必要です。

109
00:04:26,865 --> 00:04:29,621
さらに フェード速度 fadeSpeed のための float も必要です。

110
00:04:32,069 --> 00:04:34,069
最後に必要なパブリック変数はミュージックが

111
00:04:34,069 --> 00:04:37,148
フェードイン、フェードアウトする速度です。

112
00:04:39,057 --> 00:04:41,057
いくつかの変数にはデフォルトを設定しますが、

113
00:04:41,057 --> 00:04:43,057
public とするため、必要であれば

114
00:04:43,057 --> 00:04:45,057
後ほどインスペクタで変更することが出来ます。

115
00:04:45,695 --> 00:04:47,695
さらなる public 変数は必要ありませんが、いくつか private 変数は

116
00:04:47,695 --> 00:04:50,363
必要です。

117
00:04:50,363 --> 00:04:52,363
AlarmLight スクリプトへの参照も必要であり、

118
00:04:52,363 --> 00:04:54,363
それは 前述した Directonal

119
00:04:54,363 --> 00:04:55,694
アラームライトにアタッチされています。

120
00:04:56,194 --> 00:04:58,194
この方法によりスクリプトで

121
00:04:58,194 --> 00:05:01,738
AlarmOnBool によりアラームをオンにすることが出来ます。この参照を Alarm とします。

122
00:05:03,619 --> 00:05:05,619
アラームがオンになると、さらにメインライトをフェードアウトさせる必要が

123
00:05:05,619 --> 00:05:07,619
あります。

124
00:05:08,119 --> 00:05:09,519
これを行うためのスクリプトはないため、

125
00:05:09,519 --> 00:05:11,091
ここで行います。

126
00:05:11,091 --> 00:05:13,695
ライト自身のための参照が必要です。

127
00:05:15,621 --> 00:05:17,400
もう二つだけ参照が必要です。

128
00:05:17,914 --> 00:05:19,610
初めに子ゲームオブジェクトの

129
00:05:19,610 --> 00:05:21,881
オーディオソースに対する参照により

130
00:05:21,881 --> 00:05:23,011
パニック音が再生されます。

131
00:05:23,442 --> 00:05:26,093
さらにサイレンのオーディオソースに対する参照が必要です。

132
00:05:26,093 --> 00:05:29,824
これを格納するには配列を使用することにします。

133
00:05:30,946 --> 00:05:32,946
この配列はデータ型の後の

134
00:05:32,946 --> 00:05:34,946
[] により表現します。

135
00:05:34,946 --> 00:05:36,946
ここで Awake 関数の中で参照を

136
00:05:36,946 --> 00:05:38,946
セットアップするため

137
00:05:38,946 --> 00:05:40,252
このときに追加することにします。

138
00:05:40,252 --> 00:05:42,252
初めに アラームライト にアタッチされた

139
00:05:42,252 --> 00:05:44,252
AlarmLight スクリプト への参照を取得します。

140
00:05:44,683 --> 00:05:45,765
その方法としては

141
00:05:45,765 --> 00:05:48,197
FindGameObjectWithTag 関数を使用します。

142
00:05:48,197 --> 00:05:50,197
少し前のセクションで作成した Tag スクリプトからアラームライトを

143
00:05:50,197 --> 00:05:52,625
渡します。

144
00:05:53,553 --> 00:05:55,145
参照に対して、さらに GetComponent 関数を使用します。

145
00:05:55,145 --> 00:05:59,069
隣にある AlarmLight スクリプトを見つけて、

146
00:06:01,517 --> 00:06:04,283
メインライトへの参照を探します。

147
00:06:04,283 --> 00:06:06,763
ここでも FindGameObjectWithType 関数を使用して、

148
00:06:06,763 --> 00:06:09,806
MainLights タグを渡します。

149
00:06:09,806 --> 00:06:11,352
しかし Unity にはライト コンポーネントのためのショートカットがあるため、

150
00:06:11,352 --> 00:06:13,352
この最後では GetComponent を

151
00:06:13,352 --> 00:06:15,936
最後に使用する必要がありません。

152
00:06:17,565 --> 00:06:19,565
次に オーディオ ソース に対する参照を取得して 

153
00:06:19,565 --> 00:06:21,565
パニック音を再生し、

154
00:06:22,065 --> 00:06:24,065
GameObject.Find や


155
00:06:24,065 --> 00:06:26,065
タグを通して見つける方法とは別の方法をとります。

156
00:06:26,065 --> 00:06:28,735
今回は Transform.FindChildを使用することにします。

157
00:06:28,735 --> 00:06:30,459
これにより Transform の子オブジェクト全てに対する検索を行って

158
00:06:30,459 --> 00:06:32,931
同一の名前すでにつけられた名前からみつけます。

159
00:06:32,931 --> 00:06:35,195
セカンダリのゲームオーディオ ソースは

160
00:06:35,195 --> 00:06:37,195
ゲームコントローラの子オブジェクトです。

161
00:06:37,195 --> 00:06:38,808
関数はこの参照を通してみつけることが出来ます。

162
00:06:39,377 --> 00:06:41,721
さらにオーディオ コンポーネントへの

163
00:06:41,721 --> 00:06:43,721
ショットカットを作ります。

164
00:06:47,633 --> 00:06:50,170
さらに高度なスクリプティングを使用しないと

165
00:06:50,170 --> 00:06:52,170
Siren オーディオソースの配列を取得することは出来ませんが、

166
00:06:52,170 --> 00:06:54,861
逆にそれがアタッチされている

167
00:06:54,861 --> 00:06:57,085
ゲームオブジェクトの配列を取得して、

168
00:06:57,085 --> 00:06:59,085
各々についてそれぞれのオーディオ ソース コンポーネントを

169
00:06:59,085 --> 00:07:02,001
みつけ、配列に割り当てます。

170
00:07:02,501 --> 00:07:04,264
はじめに Siren ゲームオブジェクトの

171
00:07:04,264 --> 00:07:05,928
配列を作成します。

172
00:07:06,363 --> 00:07:07,636
FindGameObjectsWithTag 

173
00:07:07,636 --> 00:07:09,636
という関数を使用して

174
00:07:09,636 --> 00:07:11,636
処理したい配列を戻すことが出来ます。

175
00:07:12,343 --> 00:07:14,343
Tags.Siren を渡すことで

176
00:07:14,343 --> 00:07:16,343
必要なゲームオブジェクトを取得することが出来ます。

177
00:07:20,696 --> 00:07:22,696
ゲームオブジェクトの配列を取得した後は、

178
00:07:22,696 --> 00:07:24,696
Siren 配列の長さをセットすることが出来ます。

179
00:07:25,196 --> 00:07:26,946
これは割り当てを行う前に

180
00:07:26,946 --> 00:07:29,991
配列の長さをセットする必要があるために重要なことです。

181
00:07:29,991 --> 00:07:31,991
配列の長さは [] の中の数値により

182
00:07:31,991 --> 00:07:33,991
定義します。

183
00:07:36,991 --> 00:07:39,881
これで同じ長さの配列が二つあります。

184
00:07:39,881 --> 00:07:41,881
次に Siren ゲームオブジェクトの配列内をループします。

185
00:07:41,881 --> 00:07:44,441
各々の要素として

186
00:07:44,441 --> 00:07:46,441
オーディオ ソースへの参照を

187
00:07:46,441 --> 00:07:48,441
Siren の配列に割り当てます。

188
00:07:58,153 --> 00:08:00,347
整理すると現時点ではオーディオ ソースを持った

189
00:08:00,347 --> 00:08:02,347
タグつきのゲームオブジェクトを探し、

190
00:08:02,347 --> 00:08:04,555
これらをゲームオブジェクトの

191
00:08:04,555 --> 00:08:06,016
配列に入力して、

192
00:08:07,345 --> 00:08:09,345
その配列内をループし、

193
00:08:10,397 --> 00:08:12,397
さらに各々のオブジェクトに対して

194
00:08:12,397 --> 00:08:14,027
オーディオ ソースを

195
00:08:15,256 --> 00:08:17,670
オーディオ ソース の配列に割り当てます。

196
00:08:20,187 --> 00:08:22,187
次にアラーム ライト、メインライト、サイレンの

197
00:08:22,187 --> 00:08:25,670
オン、オフを切り替える関数が必要です。

198
00:08:28,041 --> 00:08:30,041
アラームがオンとなる条件は、

199
00:08:30,041 --> 00:08:32,925
プレイヤーが発見されたという場合です。

200
00:08:32,925 --> 00:08:34,925
これにより position 変数は

201
00:08:34,925 --> 00:08:37,765
reset position 変数と同じではありません。

202
00:08:37,765 --> 00:08:39,765
この関数では最初に

203
00:08:39,765 --> 00:08:41,765
アラームの alarmOn 変数が

204
00:08:41,765 --> 00:08:43,765
条件と等しくなるようにセットする必要があります。

205
00:08:48,381 --> 00:08:50,381
この部分は Vector3 が同じであるかどうかによって

206
00:08:50,381 --> 00:08:52,381
true または false に

207
00:08:52,381 --> 00:08:53,498
なります。


208
00:08:54,136 --> 00:08:55,844
次にメイン ライト の強度を現在の強度と

209
00:08:55,844 --> 00:08:58,693
新しい強度の間でフェードさせる必要があります。

210
00:08:58,693 --> 00:09:00,693
しかし、これを行う前に

211
00:09:00,693 --> 00:09:02,345
新しい強度が何かを決定する必要があります。

212
00:09:02,917 --> 00:09:04,917
最初に新しい強度を格納する float を

213
00:09:04,917 --> 00:09:06,378
作成します。

214
00:09:07,583 --> 00:09:09,251
これで position が

215
00:09:09,251 --> 00:09:11,251
reset position に等しくない場合、

216
00:09:12,552 --> 00:09:14,552
すなわちアラームが発報する場合、

217
00:09:15,342 --> 00:09:18,164
ライトの新しい強度は小さくします。

218
00:09:19,082 --> 00:09:22,025
そうでない場合

219
00:09:22,025 --> 00:09:24,553
else 文によって新しい強度を大きくします。

220
00:09:26,901 --> 00:09:28,901
これでメインライトの強度を現在の強度と

221
00:09:28,901 --> 00:09:32,296
新しい強度で Lerp させることが出来ます。

222
00:09:39,274 --> 00:09:41,844
Time.deltaTime および

223
00:09:41,844 --> 00:09:43,844
fadeSpeed をLerp 関数の

224
00:09:43,844 --> 00:09:45,844
time パラメータとします。

225
00:09:46,662 --> 00:09:48,662
次に Siren を鳴らすかどうか指示する必要していきます。

226
00:09:48,662 --> 00:09:52,839
このためには配列内をループします。

227
00:09:56,184 --> 00:09:58,900
もし position が reset position と等しくなく、

228
00:09:58,900 --> 00:10:01,385
かつ、配列内にある

229
00:10:01,385 --> 00:10:03,385
Siren オーディオ ソースが別の音声を再生していない場合は

230
00:10:03,385 --> 00:10:05,385
再生するようにします。

231
00:10:07,736 --> 00:10:09,998
次に else 文を追加して、

232
00:10:09,998 --> 00:10:11,998
もし position が reset position と等しい場合は

233
00:10:11,998 --> 00:10:13,998
サイレンは再生を停止します。

234
00:10:15,023 --> 00:10:17,260
サイレンは再生を停止します。これでSwitchAlarms 関数は完了です。

235
00:10:17,760 --> 00:10:20,164
完了した後は次に

236
00:10:20,164 --> 00:10:22,425
Update 関数でコールすることが出来ます。Update 関数の場所は

237
00:10:22,425 --> 00:10:24,719
SwitchAlarms の上にしましたが、

238
00:10:24,719 --> 00:10:26,719
スクリプトの関数の順番は特に動作に

239
00:10:26,719 --> 00:10:28,719
影響しません。

240
00:10:28,719 --> 00:10:30,719
あくまでコードを読みやすい順番としました。

241
00:10:31,219 --> 00:10:33,219
最後にこのスクリプトで行うことは

242
00:10:33,219 --> 00:10:35,554
ミュージックのフェードイン、アウトさせることです。

243
00:10:35,554 --> 00:10:37,373
これは別の関数の中で行い、

244
00:10:37,972 --> 00:10:40,443
順番は SwithAlarms 関数の後にします。

245
00:10:40,443 --> 00:10:42,234
ミュージックをフェードする関数を追加します。

246
00:10:42,775 --> 00:10:44,775
初めにアラームが発報するかチェックします。

247
00:10:44,775 --> 00:10:47,178
つまり

248
00:10:47,178 --> 00:10:49,178
position が reset position と等しいかどうか、です。

249
00:10:50,700 --> 00:10:52,700
等しい場合、オーディオのボリュームを下げます。

250
00:10:52,700 --> 00:10:57,273
このために Mathf.Lerp を使用します。

251
00:11:00,812 --> 00:11:02,812
さらにパニック音のボリュームを上げます。

252
00:11:02,812 --> 00:11:05,575
このために、 panicAudio 変数の逆を

253
00:11:05,575 --> 00:11:07,284
行います。

254
00:11:07,784 --> 00:11:09,784
インスペクタで以前セットしたとおり、ミュージックの最大ボリュームは

255
00:11:09,784 --> 00:11:13,589
0.8 にセットします。

256
00:11:16,285 --> 00:11:18,642
逆に、もし position が reset position と等しい場合は

257
00:11:18,642 --> 00:11:20,463
逆の処理を行います。

258
00:11:21,073 --> 00:11:23,073
通常の音楽にフェードインして

259
00:11:25,880 --> 00:11:27,880
パニック音からフェードアウトします。

260
00:11:34,444 --> 00:11:36,444
これで if else 構文は終了です。

261
00:11:36,444 --> 00:11:38,080
後はこの関数を、

262
00:11:38,080 --> 00:11:40,080
Update 関数の中からコールします。

263
00:11:42,956 --> 00:11:45,136
このスクリプトでの作業はこれで完了です。

264
00:11:45,136 --> 00:11:47,136
完了した後は、アラームが発報した場合に

265
00:11:47,136 --> 00:11:48,899
どうなるのかテストします。

266
00:11:49,443 --> 00:11:51,443
これを行うためにはシーンを再生したうえで、

267
00:11:51,443 --> 00:11:53,443
position 変数に

268
00:11:53,443 --> 00:11:55,707
reset position 以外の値をセットします。

269
00:11:55,707 --> 00:11:57,995
スクリプトを保存し、エディタに戻ってください。

270
00:11:57,995 --> 00:12:00,582
Unity 上部にある Play ボタンを押下して

271
00:12:04,994 --> 00:12:06,580
ゲームコントローラで

272
00:12:07,719 --> 00:12:09,719
position の値を

273
00:12:09,719 --> 00:12:11,719
1000 以外にします。

274
00:12:11,719 --> 00:12:13,719
つまり Vector3の値のどれかを次のようにセットすれば

275
00:12:13,719 --> 00:12:16,066
アラームはこのとおり発報します。

276
00:12:17,946 --> 00:12:20,171
そしてパニック音の再生が

277
00:12:20,171 --> 00:12:22,764
始まります。

278
00:12:22,764 --> 00:12:24,311
これでゲームコントローラは

279
00:12:24,311 --> 00:12:25,631
正しく動作していることが確認できました。

280
00:12:26,438 --> 00:12:28,079
ゲームの再生を止めます。


281
00:12:28,079 --> 00:12:30,551
ゲームコントローラの作業はこれで完了です。

282
00:12:30,551 --> 00:12:32,782
Prefabs フォルダにドラッグして、

283
00:12:32,782 --> 00:12:34,782
プレハブとして保存します。

284
00:12:36,033 --> 00:12:38,918
これでゲームコントローラに関するセクションは完了です。

285
00:12:38,918 --> 00:12:40,918
次のセクションでは

286
00:12:40,918 --> 00:12:43,303
レベルの中をプレイヤーが歩き回っているのを検知する

287
00:12:43,303 --> 00:12:45,303
CCTV カメラの設定を行います。
(翻訳:gamesonytablet)
