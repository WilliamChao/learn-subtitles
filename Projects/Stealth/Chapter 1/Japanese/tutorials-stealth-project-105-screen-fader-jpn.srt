1
00:00:00,000 --> 00:00:01,970
ゲームで実現した事項のひとつは

2
00:00:01,970 --> 00:00:03,970
シーン間のスムーズな遷移です。

3
00:00:04,470 --> 00:00:06,470
ひとつのシーンしか持たないため

4
00:00:06,470 --> 00:00:08,470
シンプルにシーンの開始時に黒色からフェードインして、

5
00:00:08,470 --> 00:00:10,994
シーンの終了時に黒色にフェードアウトして、

6
00:00:10,994 --> 00:00:12,994
それからシーンを再度ロードします。

7
00:00:12,994 --> 00:00:15,761
このエフェクトを実現するために

8
00:00:15,761 --> 00:00:17,761
画面全体に GUI テクスチャを引き延ばして

9
00:00:17,761 --> 00:00:20,108
黒色から透明に変更して、

10
00:00:20,108 --> 00:00:23,189
必要なときは元に戻します。

11
00:00:23,689 --> 00:00:25,910
始めるために、GUI テクスチャを作成します。

12
00:00:25,910 --> 00:00:27,910
Hierarchy ビューで Create ボタンをクリックして、

13
00:00:27,910 --> 00:00:29,688
GUITexture を選択します。

14
00:00:29,688 --> 00:00:32,050
さらに Screen Fader と名前を変更します。

15
00:00:32,975 --> 00:00:35,603
それからタグを Fader にします。

16
00:00:37,402 --> 00:00:39,766
GUI テクスチャのポジションはスクリーン座標空間となっています。

17
00:00:39,766 --> 00:00:41,766
その意味は、デフォルト設定の

18
00:00:41,766 --> 00:00:45,003
(0.5, 0.5) という Transform のポジションは画面中央に

19
00:00:45,003 --> 00:00:46,583
配置されるということです。

20
00:00:46,583 --> 00:00:49,041
今回はポジションを (0, 0) にセットして

21
00:00:49,041 --> 00:00:52,146
画面の左下がテクスチャの開始位置となるようにします。

22
00:00:54,234 --> 00:00:56,234
あらかじめ Textures フォルダに黒いテクスチャを

23
00:00:56,234 --> 00:00:58,775
準備しています。Textures フォルダを開いて

24
00:00:58,775 --> 00:01:01,246
swatch_black で始まるファイルを探してください。。

25
00:01:01,246 --> 00:01:04,243
これを使用するテクスチャとしてドラッグ＆ドロップして

26
00:01:05,737 --> 00:01:07,430
始めるときのゲーム設定を明確にするために

27
00:01:07,430 --> 00:01:09,720
全ての Pixel Inset 値を

28
00:01:09,720 --> 00:01:11,499
ゼロにします。

29
00:01:11,999 --> 00:01:13,999
次にフェード処理を行うスクリプトが必要です。

30
00:01:13,999 --> 00:01:16,592
SceneFadeOutと名前をつけます。

31
00:01:17,092 --> 00:01:19,092
プロジェクトパネルで Scripts フォルダを選択して、Create をクリックし、

32
00:01:19,092 --> 00:01:21,413
C# Script を選択して、さらに

33
00:01:21,413 --> 00:01:25,858
SceneFadeInOut と名前変更をします。

34
00:01:26,910 --> 00:01:28,551
フェード処理のスクリプトを選択して、

35
00:01:29,134 --> 00:01:31,134
インスペクタ上にドロップします。

36
00:01:31,800 --> 00:01:33,465
ゲームオブジェクトにスクリプトをアタッチする方法は複数あり、

37
00:01:33,465 --> 00:01:35,009
これはあくまでひとつの方法です。

38
00:01:35,009 --> 00:01:37,590
例えば Add Component をクリックして

39
00:01:37,590 --> 00:01:40,530
新しいスクリプトを追加することも出来ます。

40
00:01:41,030 --> 00:01:43,030
今回のようにすることでスクリプト作成時に

41
00:01:43,030 --> 00:01:44,947
明示的に保存フォルダを

42
00:01:44,947 --> 00:01:47,098
指定します。スクリプトのアイコンを

43
00:01:47,098 --> 00:01:48,917
ダブルクリックして編集します。

44
00:01:49,308 --> 00:01:52,025
いつもどおりにスクリプトの内容を削除して、

45
00:01:52,025 --> 00:01:54,025
記述する準備をします。

46
00:01:54,787 --> 00:01:56,356
必要なクラス変数の追加から始めます。

47
00:01:56,356 --> 00:01:59,146
このクラスではひとつのパブリック変数および

48
00:01:59,146 --> 00:02:02,118
ひとつのプライベート変数のみ必要です。

49
00:02:02,491 --> 00:02:04,296
パブリック変数は float 型の

50
00:02:04,296 --> 00:02:06,296
fadeSpeed という名前の変数です。

51
00:02:06,796 --> 00:02:08,516
これにより画面が

52
00:02:08,516 --> 00:02:10,145
フェードイン、アウト する速さを調整します。

53
00:02:10,645 --> 00:02:13,415
デフォルトの値を 1.5 にします。

54
00:02:13,415 --> 00:02:14,897
しかし必要であれば、後ほど

55
00:02:14,897 --> 00:02:16,618
インスペクタ上で変更できます。

56
00:02:17,549 --> 00:02:19,549
今回のスクリプトでは シーン開始および終了のときの

57
00:02:19,549 --> 00:02:21,549
関数を用意します。

58
00:02:21,549 --> 00:02:23,549
他のスクリプトによって、

59
00:02:23,549 --> 00:02:25,549
シーン終了がいつであるか決定するため、

60
00:02:25,549 --> 00:02:28,258
このクラスで決定して記述する必要はありません。

61
00:02:28,258 --> 00:02:30,670
しかしシーン開始がいつであるか決定する変数は必要ですし、

62
00:02:30,670 --> 00:02:32,491
いつまでフェードインすべきかもあわせて指定します。

63
00:02:32,491 --> 00:02:34,491
この場面ではboolean を使用すると良いです。

64
00:02:34,491 --> 00:02:36,491
デフォルトではシーンは開始中なので

65
00:02:36,491 --> 00:02:38,491
デフォルトは true にセットします。

66
00:02:39,709 --> 00:02:41,390
次に Awake 関数でセットアップを行います。

67
00:02:41,390 --> 00:02:44,200
ここでAwake 関数を追加して下さい。

68
00:02:45,045 --> 00:02:47,445
Pixel Inset はインスペクタ上でゼロにセットしましたが、

69
00:02:47,445 --> 00:02:50,131
シーン開始時までに、

70
00:02:50,131 --> 00:02:52,354
テクスチャが画面全体をカバーする必要があるので

71
00:02:52,354 --> 00:02:54,354
Pixel Inset の値を、

72
00:02:54,354 --> 00:02:56,771
これから定義する新しい Rect の変数にセットします。

73
00:02:57,255 --> 00:02:59,689
Rect とは四角形を表現するもので、

74
00:02:59,689 --> 00:03:02,896
4 つのパラメータがあります。

75
00:03:02,896 --> 00:03:04,896
今回は左下隅の X 座標、

76
00:03:04,896 --> 00:03:06,896
左下隅の Y 座標、

77
00:03:06,896 --> 00:03:09,734
幅、高さを

78
00:03:09,734 --> 00:03:11,734
表します。これらはスクリーン座標空間の

79
00:03:11,734 --> 00:03:13,470
ピクセル単位で行われます。

80
00:03:13,970 --> 00:03:15,970
現在の GUI ポジションはすで

81
00:03:15,970 --> 00:03:18,319
に画面の左下隅にあるので

82
00:03:18,319 --> 00:03:20,319
最初の 2 つのパラメータは 0 とし、

83
00:03:20,819 --> 00:03:22,458
テクスチャの幅は、

84
00:03:22,458 --> 00:03:25,543
画面の幅として、

85
00:03:25,543 --> 00:03:27,138
同様に高さは画面の高さを指定します。

86
00:03:27,138 --> 00:03:29,660
Unity には Screen クラスがあり、

87
00:03:29,660 --> 00:03:31,243
これらの情報を格納し、今回もその値を

88
00:03:31,243 --> 00:03:32,661
取得して使用します。

89
00:03:33,520 --> 00:03:35,520
次に Update 関数を追加します。

90
00:03:35,520 --> 00:03:37,203
今回は詳細を取り扱いませんが、

91
00:03:37,203 --> 00:03:38,830
後ほどにまた説明します。

92
00:03:40,476 --> 00:03:42,476
このスクリプトでは Lerp 関数を何度か

93
00:03:42,476 --> 00:03:45,002
使用します。このため、

94
00:03:45,002 --> 00:03:46,891
いくつかのショートカット関数を作成します。

95
00:03:46,891 --> 00:03:48,516
これらによりスクリプトの内容を読み易くして、

96
00:03:48,516 --> 00:03:50,167
Lerp 関数で行っていることの詳細を

97
00:03:50,167 --> 00:03:52,761
いちいち見なくとも良いようにします。

98
00:03:52,761 --> 00:03:55,258
はじめに FadeToClear です。

99
00:03:56,697 --> 00:03:58,697
Lerp する最初の色は

100
00:03:58,697 --> 00:04:01,689
GUI テクスチャの色です。Lerp はこの色と

101
00:04:01,689 --> 00:04:03,689
透明色との間を行き来して、途中の値を補間するために

102
00:04:03,689 --> 00:04:06,413
Alpha プロパティを使用します。fadeSpeed を使用して

103
00:04:06,413 --> 00:04:08,413
制御します。

104
00:04:11,675 --> 00:04:13,467
これで黒色にフェードアウトするときも

105
00:04:13,467 --> 00:04:15,258
同様の関数を作成することが出来ます。

106
00:04:15,258 --> 00:04:17,258
FadeToClear 関数をコピーして、

107
00:04:17,258 --> 00:04:19,258
名前を FadeToBlack に変更します。

108
00:04:19,258 --> 00:04:21,900
Target Color は Color.Black とします。

109
00:04:23,394 --> 00:04:25,394
次に関数をコールすることによって、

110
00:04:25,394 --> 00:04:27,394
シーン開始時の

111
00:04:27,394 --> 00:04:29,142
フェードを制御します。

112
00:04:29,142 --> 00:04:31,142
これは Update の中でコールして、

113
00:04:31,142 --> 00:04:33,142
GUI テクスチャの色をスムーズに変化させる

114
00:04:33,142 --> 00:04:34,822
ことが出来ます。

115
00:04:35,863 --> 00:04:37,501
シーン開始時に最初に行うべきは

116
00:04:37,501 --> 00:04:40,018
透明にフェードしておくすることです。

117
00:04:40,018 --> 00:04:42,852
このため、ショートカット関数へのコールをここで行うことにします。

118
00:04:43,573 --> 00:04:45,752
Lerp について知っておくべき重要なことは、

119
00:04:45,752 --> 00:04:47,752
2 つの値の間をパーセンテージによる差分で

120
00:04:47,752 --> 00:04:49,752
変化させていることです。つまり、

121
00:04:49,752 --> 00:04:51,752
ターゲットとなる色に実際に到達するまで

122
00:04:51,752 --> 00:04:54,287
実際には長い時間を要します。

123
00:04:54,287 --> 00:04:56,287
このため、色が完全に透明に

124
00:04:56,287 --> 00:04:57,498
なったときに

125
00:04:57,498 --> 00:04:59,498
必要な変更を加えるのではなく、

126
00:04:59,498 --> 00:05:01,665
変更を加えるのは透明に一定の範囲まで近づいたときとします。

127
00:05:01,665 --> 00:05:03,665
これは Margin を変更したとき、

128
00:05:03,665 --> 00:05:06,448
以前に メインライトとアラームライトのときに使用した方法です。

129
00:05:06,448 --> 00:05:08,448
Alpha が低いときは透明にかなり近い状態となるため、

130
00:05:08,448 --> 00:05:11,134
そこをチェックするようにします。

131
00:05:13,388 --> 00:05:15,014
ここで色を透明にセットして、

132
00:05:15,014 --> 00:05:17,014
次回 GUI テクスチャを使用するときに

133
00:05:17,014 --> 00:05:19,442
スムーズに黒色に遷移する

134
00:05:19,442 --> 00:05:20,691
ようにします。

135
00:05:21,909 --> 00:05:23,909
テクスチャが完全に透明であるにも関わらず、 

136
00:05:23,909 --> 00:05:26,054
Unity は毎フレーム 

137
00:05:26,054 --> 00:05:28,054
Alphaをチェックして

138
00:05:28,054 --> 00:05:30,054
後ろにあるものがレンダリングされるか判断を行っています。

139
00:05:30,054 --> 00:05:32,054
これによりゲームのレスポンスは若干遅くなります。

140
00:05:32,054 --> 00:05:34,054
回避するために、

141
00:05:34,054 --> 00:05:36,054
GUI テクスチャ コンポーネントを無効にしておいて、

142
00:05:36,054 --> 00:05:37,692
レンダリングされないようにします。

143
00:05:38,678 --> 00:05:40,678
最後に

144
00:05:40,678 --> 00:05:42,998
この時点ではシーンは開始しないため、

145
00:05:42,998 --> 00:05:45,122
シーン開始の変数を false にセットします。

146
00:05:45,843 --> 00:05:47,452
スクリプトに必要な最後の関数は

147
00:05:47,452 --> 00:05:50,246
EndScene 関数です。

148
00:05:50,246 --> 00:05:52,246
このスクリプトからコールされるのではないことに

149
00:05:52,246 --> 00:05:54,246
注目すべきです。

150
00:05:54,246 --> 00:05:55,854
このため関数自体を public として宣言します。

151
00:05:57,547 --> 00:05:59,547
最初に、 GUI テクスチャ コンポーネントが

152
00:05:59,547 --> 00:06:01,785
有効化されていることを確認します。

153
00:06:04,008 --> 00:06:05,494
シーンが終了しようてしているため、

154
00:06:05,494 --> 00:06:07,149
黒色にフェードさせます。

155
00:06:08,436 --> 00:06:10,037
以前に画面が透明となったかを

156
00:06:10,037 --> 00:06:12,037
確認する際の方法、すなわち

157
00:06:12,037 --> 00:06:14,704
テクスチャのアルファが低い値であるかをチェックしたのと同様にして、

158
00:06:14,704 --> 00:06:16,320
画面が黒色であるかチェックするために

159
00:06:16,320 --> 00:06:18,320
テクスチャのアルファが大きいか確認するようにします。

160
00:06:21,638 --> 00:06:23,638
画面が黒色にフェードしたとき、

161
00:06:23,638 --> 00:06:25,207
レベルをリロードします。

162
00:06:26,911 --> 00:06:30,055
これは Application.LoadLevel 関数で実現します。

163
00:06:30,055 --> 00:06:31,794
これからロードしたいレベルに遷移する前に、

164
00:06:31,794 --> 00:06:33,794
Build Settings に今回のシーンを

165
00:06:33,794 --> 00:06:35,336
追加します。

166
00:06:35,836 --> 00:06:37,836
エディタの File メニューからアクセスできます。

167
00:06:37,836 --> 00:06:40,487
このためエディタに戻って

168
00:06:40,487 --> 00:06:42,460
操作方法をみていきます。 

169
00:06:42,460 --> 00:06:44,279
メニューから File - Build Settings を選択します。

170
00:06:44,279 --> 00:06:45,948
これで ビルドしているシーンを追加するために、 

171
00:06:45,948 --> 00:06:47,948
Add Current ボタンをクリックします。

172
00:06:48,448 --> 00:06:50,448
シーンがリストに追加されて、

173
00:06:50,448 --> 00:06:52,641
右側に連番のインデックスが割り当てられています

174
00:06:53,169 --> 00:06:54,961
もしリストにシーンをまだどれも追加してなければ

175
00:06:54,961 --> 00:06:57,404
インデックスは 1 となります。

176
00:06:57,973 --> 00:06:59,764
シーンの完成バージョンでは

177
00:06:59,764 --> 00:07:01,764
シーンが必ずあり、

178
00:07:01,764 --> 00:07:03,764
すでに 0 のインデックスとなっているです。

179
00:07:03,764 --> 00:07:05,764
スクリプトに戻って

180
00:07:05,764 --> 00:07:07,917
正しいシーンのインデックスを入れるようにします。

181
00:07:07,917 --> 00:07:10,552
Build Settings をクローズして、

182
00:07:10,552 --> 00:07:13,236
スクリプト編集に戻ります。

183
00:07:13,236 --> 00:07:15,556
LoadLevel の () の中に 1 の値を入れます。

184
00:07:16,595 --> 00:07:18,595
これで関数の準備は完了したため、 

185
00:07:18,595 --> 00:07:20,595
Update 関数に戻り、

186
00:07:20,595 --> 00:07:21,997
必要な内容を追加します。

187
00:07:22,570 --> 00:07:24,570
シーン開始時の関数を

188
00:07:24,570 --> 00:07:26,998
コールする必要があり、

189
00:07:26,998 --> 00:07:28,998
唯一の例外はシーンが始まっていないことです。

190
00:07:30,341 --> 00:07:31,884
これでスクリプトは完成なので、

191
00:07:32,522 --> 00:07:35,607
セーブして、エディタに戻ります。	

192
00:07:35,607 --> 00:07:37,607
Screen フェード オブジェクトを

193
00:07:37,607 --> 00:07:40,399
Prefabs フォルダにドラッグして、そこに保存します。

194
00:07:40,399 --> 00:07:42,343
Screen フェードはこれで完成です。

195
00:07:42,747 --> 00:07:44,484
シーンを忘れずに保存して

196
00:07:45,233 --> 00:07:46,830
プロジェクトを保存します。

197
00:07:47,565 --> 00:07:49,565
次のセクションでは、

198
00:07:49,565 --> 00:07:51,041
ゲームコントローラの作成を見ていきます。
(翻訳:gamesonytablet)
