1
00:00:00,000 --> 00:00:02,169
次のセクションでは、ゲーム開発の

2
00:00:02,169 --> 00:00:03,988
早い段階で対応すると良い、

3
00:00:04,488 --> 00:00:06,488
ゲームに必要なタグの検討と

4
00:00:06,488 --> 00:00:08,488
それらをどのように管理するか、について取り上げます。

5
00:00:08,488 --> 00:00:10,488
Unity プロジェクトは同梱されてるタグがありますが、

6
00:00:10,488 --> 00:00:12,488
今回はカスタムで

7
00:00:12,488 --> 00:00:15,122
もう幾つか足すことにします。

8
00:00:15,122 --> 00:00:18,208
最も一般的なタグの使用方法は

9
00:00:18,208 --> 00:00:19,805
ゲームオブジェクトまたはコンポーネントへの参照を見つけることです。

10
00:00:19,805 --> 00:00:21,805
必要なタグについて考えるとき、

11
00:00:21,805 --> 00:00:23,805
他のものを参照する内容を

12
00:00:23,805 --> 00:00:26,183
特定すると便利です。

13
00:00:26,183 --> 00:00:28,183
例えば今回のゲームでは幾つかのスクリプトのついた

14
00:00:28,183 --> 00:00:30,058
ゲームコントローラが必要です。

15
00:00:30,058 --> 00:00:31,793
ゲームの中の多くのスクリプトは

16
00:00:31,793 --> 00:00:33,793
これらのスクリプトに対して参照を行うので

17
00:00:33,793 --> 00:00:35,793
ゲームコントローラ タグは必要、ということです。

18
00:00:35,793 --> 00:00:37,793
これは Unity にデフォルトで同梱されてますが、

19
00:00:37,793 --> 00:00:40,432
今回は同梱されてないタグを 5 つ新規で

20
00:00:40,432 --> 00:00:42,432
必要となります。

21
00:00:42,432 --> 00:00:45,116
AlarmLight, Siren, DirectionalLight,

22
00:00:45,116 --> 00:00:46,574
Fader および Enemy です。

23
00:00:46,574 --> 00:00:48,905
今回はプロジェクトにあらかじめ追加してあります。

24
00:00:49,515 --> 00:00:51,640
コードの中でタグを参照するとき

25
00:00:51,640 --> 00:00:53,640
文字列として書かれ、

26
00:00:53,640 --> 00:00:55,001
また自動補完はされません。

27
00:00:55,501 --> 00:00:57,501
ミスを避けるため、

28
00:00:57,501 --> 00:00:59,501
全てのタグの文字列を含む短いコードを

29
00:00:59,501 --> 00:01:01,501
用意します。

30
00:01:01,501 --> 00:01:03,127
これにより変数として参照出来るので便利です。

31
00:01:03,127 --> 00:01:05,127
このスクリプトはシンプルに 

32
00:01:05,127 --> 00:01:06,808
Tags という名前をつけます。

33
00:01:07,308 --> 00:01:09,710
プロジェクト パネルの Scripts フォルダを選択して

34
00:01:09,710 --> 00:01:12,909
Create をクリックして C# Script を選択します。

35
00:01:12,909 --> 00:01:14,421
スクリプトの名前を Tags にします。

36
00:01:14,921 --> 00:01:16,921
アイコンをダブルクリックして編集します。

37
00:01:17,421 --> 00:01:19,421
ここでも Unity があらかじめ用意した関数は

38
00:01:19,421 --> 00:01:21,421
削除します。

39
00:01:21,421 --> 00:01:24,184
このスクリプトは関数を一切使用しません。

40
00:01:24,184 --> 00:01:26,184
各々のタグについて、

41
00:01:26,184 --> 00:01:28,660
パブリックな constant 文字列を変数として格納します。

42
00:01:29,444 --> 00:01:31,984
ここでは const というキーワードを使用します。

43
00:01:31,984 --> 00:01:34,219
const の意味は

44
00:01:34,219 --> 00:01:36,219
値が変更出来ないということなので、

45
00:01:36,219 --> 00:01:38,219
いわゆる定数として知られてます。

46
00:01:38,219 --> 00:01:40,219
全てのクラスのインスタンスにおいて

47
00:01:40,219 --> 00:01:42,219
固定の値です。

48
00:01:42,219 --> 00:01:44,555
そしてクラスのインスタンスを通してではなく

49
00:01:44,555 --> 00:01:47,411
クラスを通して利用可能となります。

50
00:01:47,411 --> 00:01:49,411
これは Mathf のような static 関数を使用する

51
00:01:49,411 --> 00:01:52,434
ときと同じような形で活用できるという意味です。

52
00:01:52,434 --> 00:01:55,283
例えば float に対して Lerp をコールするとき

53
00:01:55,283 --> 00:02:00,015
クラス名である Mathf の後に Lerp を記述します。

54
00:02:00,764 --> 00:02:02,764
今回の場合は、格納する文字列を参照するときは

55
00:02:02,764 --> 00:02:04,764
Tags. と入力して

56
00:02:04,764 --> 00:02:08,510
定数の名前を続けて入力します。

57
00:02:08,510 --> 00:02:11,120
例えば Tags.Player とします。

58
00:02:11,120 --> 00:02:13,120
スクリプトを完成するには

59
00:02:13,120 --> 00:02:15,120
前述のとおり、定数がもう幾つか必要です。

60
00:02:15,120 --> 00:02:17,717
アラーム ライトへの参照が必要であり、

61
00:02:17,717 --> 00:02:20,393
AlarmLights というタグを作ったので

62
00:02:20,393 --> 00:02:22,393
そのための定数を作成します。

63
00:02:24,495 --> 00:02:26,495
また前述のとおり、さらにアラーム音を発するタワーにも

64
00:02:26,495 --> 00:02:28,246
Siren タグを使用します。

65
00:02:28,246 --> 00:02:30,246
また、このための定数を

66
00:02:30,246 --> 00:02:31,655
作成します。

67
00:02:33,740 --> 00:02:35,740
ゲームコントローラには、

68
00:02:35,740 --> 00:02:38,099
敵キャラが追跡する際に把握している

69
00:02:38,099 --> 00:02:39,889
プレイヤーの最新の位置を格納します。

70
00:02:40,389 --> 00:02:43,200
このためゲームコントローラへの参照が必要です。

71
00:02:43,200 --> 00:02:45,771
すでにタグは存在するので

72
00:02:45,771 --> 00:02:47,771
定数を作成することだけ必要です。

73
00:02:50,370 --> 00:02:52,370
アラームライトがオンになったとき、

74
00:02:52,370 --> 00:02:54,745
メインライトを暗くすることが目的です。

75
00:02:54,745 --> 00:02:56,745
このため、そのための定数も準備します。

76
00:02:59,593 --> 00:03:01,454
シーン開始、終了時に

77
00:03:01,454 --> 00:03:03,454
黒色との間をフェードイン、アウトさせたいとします。

78
00:03:03,454 --> 00:03:06,077
このためにGUIテクスチャ を使用します。

79
00:03:06,077 --> 00:03:08,489
さらに、これにアタッチしたスクリプトへの参照が必要です。

80
00:03:08,989 --> 00:03:10,989
フェード（Fader） に定数を追加します。

81
00:03:12,967 --> 00:03:16,338
必要となる最後のタグはシンプルな目的です。

82
00:03:16,338 --> 00:03:18,338
ゲームには、プレイヤーが近づいたときにスライドして開くドアを

83
00:03:18,338 --> 00:03:20,700
用意しています。

84
00:03:21,114 --> 00:03:23,557
しかしこれらは敵の場合も開く必要があるため、

85
00:03:23,557 --> 00:03:26,408
敵を識別するタグもまた必要になります。

86
00:03:27,714 --> 00:03:30,427
これを完成した後は、スクリプトを保存したうえで

87
00:03:30,427 --> 00:03:32,427
エディタに戻ります。

88
00:03:33,645 --> 00:03:35,865
この時点で全てのスクリプトを整理していくことにします。

89
00:03:36,421 --> 00:03:38,186
Assets フォルダには作成済みの

90
00:03:38,186 --> 00:03:39,866
アラートライトがあり、これらは

91
00:03:39,866 --> 00:03:41,894
Add Component ボタンにより作成していました。

92
00:03:41,894 --> 00:03:43,644
このボタンを使用するとき、スクリプトは Assets フォルダの直下に作成されます。

93
00:03:43,644 --> 00:03:45,141
このタイミングで Scripts フォルダに

94
00:03:45,141 --> 00:03:47,503
ドラッグ＆ドロップすることで

95
00:03:47,503 --> 00:03:49,642
簡単に整理することにして、

96
00:03:49,642 --> 00:03:51,279
今後も Add Component を使用するとき、この作業を

97
00:03:51,279 --> 00:03:52,823
行うようにして下さい。

98
00:03:52,823 --> 00:03:56,106
メニューから File - Save Scene を選択して、

99
00:03:56,106 --> 00:03:58,372
さらに File - Save Project を選択します。

100
00:03:58,372 --> 00:04:00,372
次のセクションでは

101
00:04:00,372 --> 00:04:02,747
シーン フェード（Fader）を作成してゲーム開始および終了時に

102
00:04:02,747 --> 00:04:04,331
レベルをフェードイン、アウトするようにします。
(翻訳:gamesonytablet)
