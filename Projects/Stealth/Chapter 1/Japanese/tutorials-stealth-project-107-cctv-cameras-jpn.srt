1
00:00:00,000 --> 00:00:02,147
次にアラームを

2
00:00:02,147 --> 00:00:03,787
トリガーするシステムのひとつである、

3
00:00:03,787 --> 00:00:07,164
プレイヤーを発見しようとするCCTV カメラを追加します。

4
00:00:07,164 --> 00:00:09,164
最初のステップはシーンにモデルをシーンにドラッグすることです。

5
00:00:09,164 --> 00:00:12,105
Battle Bus 上に位置をおきます。

6
00:00:12,105 --> 00:00:16,719
Models フォルダで prop_Cctv_Cam を見つけます。

7
00:00:16,719 --> 00:00:18,719
次のように表示されています。

8
00:00:18,719 --> 00:00:21,986
Hierarchy ビューにドラッグしたうえで

9
00:00:21,986 --> 00:00:26,299
(-8, 3, 16.1) に配置します。

10
00:00:26,299 --> 00:00:28,299
これで Battle Bus の上に配置されます

11
00:00:28,299 --> 00:00:32,355
y 軸で 180 度回転する必要があります。

12
00:00:33,131 --> 00:00:35,131
Hierarchy ビューで選択をして

13
00:00:35,131 --> 00:00:37,131
Scene ビュー上にマウス カーソル を置いたまま

14
00:00:37,131 --> 00:00:39,131
F ボタンを押下すると、そこにフォーカスされます。

15
00:00:41,026 --> 00:00:43,026
Mesh Renderer で "Use Light Probes" 

16
00:00:43,026 --> 00:00:45,504
チェックボックスをオンにすることを

17
00:00:45,504 --> 00:00:47,685
カメラ の配下にある各々全てのゲームオブジェクトで確認して

18
00:00:47,685 --> 00:00:50,468
カメラでダイナミック ライト をオンにします。

19
00:00:57,778 --> 00:00:59,778
これによりライティングは正しく動作します。

20
00:01:00,761 --> 00:01:02,998
あらかじめライトプローブはセットアップされていて

21
00:01:02,998 --> 00:01:04,998
以前に作成した Lights プレハブの

22
00:01:04,998 --> 00:01:06,501
一部です。

23
00:01:08,851 --> 00:01:10,851
CCTV カメラで次にやるべきことは、

24
00:01:10,851 --> 00:01:13,635
Frustum の作成です。

25
00:01:13,635 --> 00:01:15,387
初めにカメラにコリジョン メッシュ を追加します。

26
00:01:15,387 --> 00:01:17,750
もしプレイヤーがFrustum の範囲で発見されると

27
00:01:17,750 --> 00:01:19,363
アラームは発報されます。

28
00:01:19,836 --> 00:01:21,959
初めにカメラにコリジョン メッシュ を

29
00:01:21,959 --> 00:01:24,206
追加します。

30
00:01:24,206 --> 00:01:26,206
カメラのボディの子オブジェクトとする必要があります。

31
00:01:26,206 --> 00:01:32,119
Models フォルダにおいてprop_Cctv_Camp_collision を探し、

32
00:01:32,119 --> 00:01:37,155
これをドラッグして support_Cctv_Cam_body 上に

33
00:01:37,155 --> 00:01:38,527
Hierarchy ビューにてドロップします。

34
00:01:39,193 --> 00:01:41,193
配置を少し変更します。

35
00:01:41,193 --> 00:01:42,864
Frustum がレンズから来ているように

36
00:01:42,864 --> 00:01:45,607
調整します。オブジェクトのポジションを

37
00:01:45,607 --> 00:01:50,040
(0, 0.15, 0.35) に

38
00:01:50,040 --> 00:01:52,040
このゲームオブジェクトの意味は、

39
00:01:52,040 --> 00:01:54,637
カメラが見る位置を表示して

40
00:01:54,637 --> 00:01:57,164
プレイヤーがカメラの前にいるときに検知することです。

41
00:02:01,062 --> 00:02:03,062
プレイヤーを物理的に見つけるためには

42
00:02:03,062 --> 00:02:05,062
トリガーとなるコライダを使用します。

43
00:02:05,062 --> 00:02:07,062
先ほど追加した コリジョン オブジェクトにコライダを追加します。

44
00:02:07,062 --> 00:02:10,584
Add Component ボタンをクリックして

45
00:02:10,584 --> 00:02:13,096
Physics - Mesh Collider を選択します。

46
00:02:13,096 --> 00:02:15,096
さらに Is Trigger チェックボックスをオンにします。

47
00:02:16,231 --> 00:02:18,231
まだ Frustum の出来ばえは十分でありませんので、

48
00:02:18,231 --> 00:02:20,813
代わりにスポットライトを使用して

49
00:02:20,813 --> 00:02:22,813
カメラが見る位置を共有して、

50
00:02:22,813 --> 00:02:24,689
ゲームオブジェクトから不必要な

51
00:02:24,689 --> 00:02:26,482
視覚上のコンポーネントを削除します。

52
00:02:26,482 --> 00:02:28,482
メッシュ フィルタ を削除するために、

53
00:02:28,482 --> 00:02:31,770
横にある歯車アイコンをクリックしてRemove Component を選択します。

54
00:02:32,270 --> 00:02:34,270
メッシュ レンダラ でも同様の作業をします。

55
00:02:35,668 --> 00:02:37,668
さらに視覚エフェクトを作成する前に

56
00:02:37,668 --> 00:02:40,344
カメラが正しい方向を向くようにします。

57
00:02:40,844 --> 00:02:42,527
カメラが前を向いているときに

58
00:02:42,527 --> 00:02:44,527
プレイヤーがスペース上を通り過ぎてしまうことを未然に防止します。

59
00:02:44,527 --> 00:02:47,165
領域を完全にカバーするために

60
00:02:47,165 --> 00:02:48,762
カメラを x 軸周りに

61
00:02:48,762 --> 00:02:50,956
60度 傾けます。

62
00:02:50,956 --> 00:02:54,097
prop_Cctv_Cam_body を選択して

63
00:02:54,097 --> 00:02:56,440
Rotation の x 軸にて

64
00:02:56,440 --> 00:02:58,440
60 度を入力します。

65
00:02:59,465 --> 00:03:01,465
Frustum を視覚的に表すために

66
00:03:01,465 --> 00:03:03,118
スポットライトを追加します。

67
00:03:03,618 --> 00:03:06,574
prop_Cctv_Camp_collision を再選択して

68
00:03:06,574 --> 00:03:11,066
Add Component - Rendering - Light を選択して

69
00:03:12,229 --> 00:03:14,229
Type をSpot に変更します。

70
00:03:15,102 --> 00:03:17,102
Range を 9.5 に、

71
00:03:17,892 --> 00:03:19,892
Angle を 90 に、

72
00:03:20,627 --> 00:03:22,098
Color を Red に変更します。

73
00:03:23,610 --> 00:03:26,514
Shadow Type を Hard Shadows に

74
00:03:27,249 --> 00:03:29,928
Bias を 0.02 にします。

75
00:03:30,939 --> 00:03:32,939
ライトマップを後で焼き込みするとき、このライトは

76
00:03:32,939 --> 00:03:34,939
焼き込みされないようにしたい。

77
00:03:34,939 --> 00:03:37,258
このため ライトマップ設定を

78
00:03:37,258 --> 00:03:39,258
Real Time Only にセットします。

79
00:03:40,269 --> 00:03:42,269
これで良くなりましたが、さらにエフェクトを改善するため

80
00:03:42,269 --> 00:03:44,835
次にライトに Cookie を追加します。

81
00:03:44,835 --> 00:03:46,835
Cookie は要するにライトが投影する

82
00:03:46,835 --> 00:03:49,167
テクスチャです。

83
00:03:49,167 --> 00:03:51,565
Textures フォルダに使用する分を用意しており

84
00:03:51,565 --> 00:03:54,982
fx_cameraview_ALP という名前です。

85
00:03:54,982 --> 00:03:56,982
これをドラッグしてライトの Cookie プロパティ上に

86
00:03:56,982 --> 00:03:58,402
ドラッグします。

87
00:04:00,200 --> 00:04:02,200
これで床に星のようなパターン形状が

88
00:04:02,200 --> 00:04:04,200
表示されます。

89
00:04:04,200 --> 00:04:06,626
次にプレイヤーが CCTV カメラに発見されたときに

90
00:04:06,626 --> 00:04:09,057
プレイヤーの位置を報告する

91
00:04:09,512 --> 00:04:12,401
スクリプトを作成します。

92
00:04:12,401 --> 00:04:14,401
Add Component をクリックして

93
00:04:15,550 --> 00:04:17,550
New Script を選択して名前を変更して

94
00:04:17,550 --> 00:04:22,026
CctvPlayerDetectionにします。Create をクリックして Add をクリックして

95
00:04:22,026 --> 00:04:23,539
アイコンをダブルクリックすることで

96
00:04:23,539 --> 00:04:25,084
編集できるようにします。

97
00:04:25,736 --> 00:04:27,736
デフォルトの関数を削除してスクリプトを記述できるようにします。

98
00:04:27,736 --> 00:04:30,439
スクリプトについて

99
00:04:30,439 --> 00:04:32,217
参照を格納するための private 変数を

100
00:04:32,217 --> 00:04:33,507
準備します。

101
00:04:34,145 --> 00:04:36,145
最初にプレイヤーのための変数により発見されたのが

102
00:04:36,145 --> 00:04:37,783
プレイヤーかを識別します。

103
00:04:38,465 --> 00:04:40,465
次にゲームコントローラ上で 

104
00:04:40,465 --> 00:04:43,325
LastPlayerSighting スクリプトを参照するようにして、

105
00:04:43,325 --> 00:04:45,325
必要なときに position 変数を更新できるように

106
00:04:45,325 --> 00:04:46,897
します。

107
00:04:48,184 --> 00:04:50,184
次に Awake 関数を使用して

108
00:04:50,184 --> 00:04:52,184
これらの参照を割り当てます。

109
00:04:52,684 --> 00:04:54,684
プレイヤーの参照は

110
00:04:54,684 --> 00:04:56,991
FindGameObjectWithTag を使用して割り当てて

111
00:04:56,991 --> 00:04:59,326
Tag スクリプトにより プレイヤー変数を渡します。

112
00:04:59,826 --> 00:05:01,451
ゲームコントローラは

113
00:05:01,451 --> 00:05:04,244
同様の方法で探すことが出来ます。

114
00:05:04,244 --> 00:05:06,244
次に GetComponent を後から使用して

115
00:05:06,244 --> 00:05:07,801
ゲームコントローラ上の LastPlayerSighting スクリプトへの参照を

116
00:05:07,801 --> 00:05:09,342
取得します。

117
00:05:09,900 --> 00:05:11,900
次に OnTriggerStay  を使用して

118
00:05:11,900 --> 00:05:13,472
プレイヤーを検知します。

119
00:05:15,132 --> 00:05:17,132
トリガー領域の中で コライダが発見されることを踏まえて

120
00:05:17,132 --> 00:05:19,132
コライダがアタッチされている

121
00:05:19,132 --> 00:05:21,132
ゲームオブジェクトがプレイヤーでないことを

122
00:05:21,132 --> 00:05:22,684
is the player. チェックします。

123
00:05:22,684 --> 00:05:24,684
この時点で注意する必要があり、

124
00:05:24,684 --> 00:05:26,491
プレイヤーが

125
00:05:26,491 --> 00:05:27,976
壁の向こうであるけれども

126
00:05:27,976 --> 00:05:29,943
コライダが交差している場合があります。

127
00:05:29,943 --> 00:05:31,624
この問題を解消するために

128
00:05:31,624 --> 00:05:33,624
カメラのレンズからプレイヤーに向かう Raycast を

129
00:05:33,624 --> 00:05:36,125
使用して視界のラインをチェックします。

130
00:05:36,594 --> 00:05:38,594
初めにカメラから

131
00:05:38,594 --> 00:05:40,594
プレイヤーの相対的な位置を見つけることから始めます。

132
00:05:40,594 --> 00:05:43,160
これにより Raycast を行う向きを確定します。

133
00:05:46,008 --> 00:05:48,455
さらに RaycastHit 変数が必要であり

134
00:05:48,455 --> 00:05:50,455
Raycast が プレイヤー コライダ と

135
00:05:50,455 --> 00:05:52,455
交差しないことを確認します。

136
00:05:52,455 --> 00:05:54,455
これを使用することでカメラから Raycast して

137
00:05:54,455 --> 00:05:57,357
プレイヤーの方向に向けることが出来ます。

138
00:05:57,357 --> 00:05:59,878
さらに Raycast が衝突した詳細の情報も取得できます。

139
00:06:04,042 --> 00:06:06,042
次に衝突したコライダのゲームオブジェクトが

140
00:06:06,042 --> 00:06:08,336
プレイヤーかどうかをチェックする必要が

141
00:06:08,336 --> 00:06:09,682
あります。

142
00:06:10,449 --> 00:06:12,449
プレイヤーであれば、プレイヤーがライトにより発見されたとして、

143
00:06:12,449 --> 00:06:15,432
ゲームコントローラを更新します。

144
00:06:16,664 --> 00:06:19,846
これで CctvPlayerDetectionScript を完了します。

145
00:06:19,846 --> 00:06:22,377
保存をしたうえでエディタに戻ります。

146
00:06:22,877 --> 00:06:24,877
この時点で CCTV カメラをドラッグし

147
00:06:24,877 --> 00:06:26,877
Prefabs フォルダに移動して

148
00:06:26,877 --> 00:06:28,877
プレハブとして保存します。

149
00:06:29,377 --> 00:06:31,377
これによりレベル上で複製をして

150
00:06:31,377 --> 00:06:33,941
カメラを増やすことが出来ます。

151
00:06:33,941 --> 00:06:37,078
親オブジェクトの Prop_Cctv_Cam を選択して

152
00:06:37,078 --> 00:06:39,764
プロジェクトパネルの Prefabs フォルダにドロップします。

153
00:06:41,871 --> 00:06:43,871
このカメラを 2 回複製して

154
00:06:43,871 --> 00:06:45,871
シーン上の別のカメラとして使用します。

155
00:06:45,871 --> 00:06:47,871
これで 3 とも同じ位置になります。

156
00:06:48,371 --> 00:06:54,798
カメラのひとつの配置を (-21, 2.2, 2) として

157
00:06:56,679 --> 00:06:58,749
階層全体を再度選択したうえで

158
00:06:58,749 --> 00:07:00,749
F キーを押下してフォーカスをあてます。

159
00:07:01,484 --> 00:07:02,838
これでビルのひとつにあることが

160
00:07:02,838 --> 00:07:04,838
ゲームの左下にて

161
00:07:04,838 --> 00:07:05,960
確認出来ます。

162
00:07:06,951 --> 00:07:10,092
CCTV カメラのひとつを選択します。

163
00:07:10,092 --> 00:07:16,102
そして配置を (-23, 1.8, 24) にします。

164
00:07:17,997 --> 00:07:20,872
Hierarchy で再度選択して

165
00:07:20,872 --> 00:07:23,314
シーン上にマウスを置いたまま F キーを押下してフォーカスをあてます。

166
00:07:23,314 --> 00:07:24,896
これでセキュリティ部門ビルの壁にあることが

167
00:07:24,896 --> 00:07:26,896
確認できるようになります

168
00:07:26,896 --> 00:07:28,509
これはマップの中央のあたりです。

169
00:07:29,727 --> 00:07:31,270
このカメラはフェンスの隙間からプレイヤーが来ることを

170
00:07:31,270 --> 00:07:33,270
検知する必要があります。

171
00:07:33,770 --> 00:07:35,770
このため x 軸 に沿って傾けます。

172
00:07:35,770 --> 00:07:37,770
これによりフェンスに向けます。

173
00:07:38,629 --> 00:07:40,629
オブジェクトにドリルダウンを行い 

174
00:07:40,629 --> 00:07:42,629
propp_Cctv_body を選択します。

175
00:07:42,629 --> 00:07:46,174
そして Rotation についてx を 60 から 30 へセットし直します。

176
00:07:46,174 --> 00:07:50,099
prop_Cctv_Cam_collision を選択します。

177
00:07:50,099 --> 00:07:52,085
トリガーのコライダを伸ばして

178
00:07:52,085 --> 00:07:53,710
フェンスに到達するようにしていきます。

179
00:07:54,265 --> 00:07:59,421
スケールを変更して (1, 1, 1.8) とします。

180
00:08:00,971 --> 00:08:02,971
Battle Bus のカメラが

181
00:08:02,971 --> 00:08:04,971
アニメーションするように変更します。

182
00:08:04,971 --> 00:08:06,971
これでカメラでの作業に戻ります。

183
00:08:08,838 --> 00:08:10,838
再度選択したうえ、フォーカスをあてます。

184
00:08:14,086 --> 00:08:16,086
Battle Bus の カメラをアニメーションさせますが

185
00:08:16,086 --> 00:08:18,696
その作業の前に

186
00:08:18,696 --> 00:08:20,431
スポットライトの強度が十分でない

187
00:08:20,431 --> 00:08:22,431
ことに気付きます。

188
00:08:22,431 --> 00:08:24,431
これは Unity のプレハブによるもので

189
00:08:24,931 --> 00:08:27,352
今度は 3 つのカメラ全てを更新して

190
00:08:27,352 --> 00:08:29,352
より強い明るさの強度としたいため

191
00:08:29,352 --> 00:08:31,352
どれかひとつにドリルダウンしたうえで

192
00:08:32,418 --> 00:08:35,572
prop_Cctv_Cam_collision を選択して

193
00:08:35,572 --> 00:08:37,155
強度を変更します。

194
00:08:37,810 --> 00:08:40,713
値を 4 に変更してReturn キーを押下します。

195
00:08:41,213 --> 00:08:43,213
次に Apply ボタンを押下します。

196
00:08:43,920 --> 00:08:45,920
これで変更した内容はプレハブにも反映されます。

197
00:08:46,669 --> 00:08:49,622
そして他の CCTV カメラを変更したとき

198
00:08:49,622 --> 00:08:52,646
それらもより強い明るさの強度に変更されたことが確認できます。

199
00:08:55,655 --> 00:08:57,362
次にカメラのアニメーションです。

200
00:08:57,362 --> 00:08:59,362
カメラは前後に揺らします。

201
00:08:59,862 --> 00:09:02,921
新規のアニメーション アセットを作成して実現します。

202
00:09:03,685 --> 00:09:05,923
プロジェクト パネルの Animations フォルダを選択して

203
00:09:07,445 --> 00:09:10,724
Create ボタンをクリックして

204
00:09:12,163 --> 00:09:15,102
Animation を選択してアニメーションの名前を Cctv_Sweep に変更します。

205
00:09:16,873 --> 00:09:19,596
次に prop_Cctv_Cam を展開します。

206
00:09:19,596 --> 00:09:22,666
さらに probe_Cctv_Cam_joint を選択します。

207
00:09:23,829 --> 00:09:25,829
このアニメーション アセットをドラッグして

208
00:09:25,829 --> 00:09:28,358
インスペクタのオブジェクト上にドロップします。

209
00:09:29,793 --> 00:09:31,793
これにより Animation コンポーネントが追加され、

210
00:09:31,793 --> 00:09:34,617
そしてこのアセットを再生するアニメーションとして割り当てます。

211
00:09:34,617 --> 00:09:36,353
次に Unity の Animation ウィンドウを開きます。

212
00:09:36,353 --> 00:09:40,064
メニューから Window - Animation を選択します。

213
00:09:42,525 --> 00:09:44,525
これを最下部にあるゲームビューと

214
00:09:44,525 --> 00:09:45,930
ドッキングします。

215
00:09:46,969 --> 00:09:48,969
これによりシーン ビューで作業している

216
00:09:48,969 --> 00:09:50,969
アニメーションをみながら

217
00:09:50,969 --> 00:09:52,969
アニメーションの編集を同時に行うことが出来ます。

218
00:09:52,969 --> 00:09:54,969
カメラを y 軸周りに回転させるため

219
00:09:55,469 --> 00:10:00,093
Rotation.y をクリックしてAdd Curves を選択します。

220
00:10:01,201 --> 00:10:03,201
Rotation.y の右にて

221
00:10:04,516 --> 00:10:07,760
クリックして表示されるメニューから Add Curves を選択します。

222
00:10:08,467 --> 00:10:10,467
これによりグラフ上で Rotation をカーブとして追加し、

223
00:10:10,467 --> 00:10:12,467
キーフレームがアニメーションの最初に追加されます。

224
00:10:12,467 --> 00:10:14,467
アニメーションは

225
00:10:14,467 --> 00:10:17,247
2 秒継続したいため

226
00:10:17,247 --> 00:10:19,067
ここにさらにキーフレームを追加します。

227
00:10:19,609 --> 00:10:21,609
再生のヘッドをスクラブして値を 2 に変更して


228
00:10:22,675 --> 00:10:24,675
Animation ウィンドウの上にある Add Frame ボタンを

229
00:10:24,675 --> 00:10:26,675
クリックします。

230
00:10:27,313 --> 00:10:29,313
次に値を変更して 60 にします。

231
00:10:32,989 --> 00:10:34,989
最後に残った作業は

232
00:10:34,989 --> 00:10:36,989
アニメーション ループ の作成です。

233
00:10:36,989 --> 00:10:39,625
これを実現するために Wrap Mode を最下部で変更します。

234
00:10:39,625 --> 00:10:41,625
これは最初デフォルト設定のままなので

235
00:10:42,125 --> 00:10:43,902
Ping Pong に変更します。

236
00:10:43,902 --> 00:10:45,652
この意味は、アニメーションが 0 から 60 に変化して

237
00:10:45,652 --> 00:10:49,705
60 から 0 まで戻る繰り返しを無限にループさせるということです。

238
00:10:50,412 --> 00:10:52,842
これでアニメーション作成は完了です。

239
00:10:53,342 --> 00:10:55,342
テストをするために 画面の上部の Play ボタンを

240
00:10:55,342 --> 00:10:57,342
押下します。

241
00:11:09,721 --> 00:11:11,471
そしてカメラが回転するとき

242
00:11:11,471 --> 00:11:13,471
プレイヤーが忍び足して動き回れるスペースが出来ることに

243
00:11:13,471 --> 00:11:15,152
注目して下さい。

244
00:11:15,152 --> 00:11:18,503
これで CCTV カメラ作成は完了となり、

245
00:11:18,503 --> 00:11:20,265
セクションの内容も完了です。

246
00:11:20,265 --> 00:11:22,059
次のセクションでは

247
00:11:22,059 --> 00:11:23,880
レーザーセンサーを作成し、

248
00:11:23,880 --> 00:11:25,493
プレイヤーを検知する機能をもたせます。

249
00:11:25,493 --> 00:11:27,493
忘れずにシーン保存を行い

250
00:11:28,228 --> 00:11:30,725
先に進む前にプロジェクトも保存して下さい。
(翻訳:gamesonytablet)
