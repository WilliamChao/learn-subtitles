100:00:00,000 --> 00:00:01,832A lot of games will have something known200:00:01,832 --> 00:00:04,432as a game controller. The exact purpose of it300:00:04,432 --> 00:00:06,818varies from game to game, but generally400:00:06,818 --> 00:00:08,818it's for handling information that needs500:00:08,818 --> 00:00:11,082to be widely available, or for controlling600:00:11,082 --> 00:00:13,082objects in the game that have a dependency700:00:13,082 --> 00:00:14,313on one another.800:00:15,089 --> 00:00:17,491One example might be using a game controller900:00:17,491 --> 00:00:19,491to calculate a score based on how many1000:00:19,491 --> 00:00:20,711items were picked up.1100:00:21,211 --> 00:00:23,211Our game controller will be handling1200:00:23,211 --> 00:00:25,713a variety of tasks, but most importantly1300:00:25,713 --> 00:00:27,713it will be storing the last known location1400:00:27,713 --> 00:00:28,803of the player. 1500:00:29,413 --> 00:00:31,413To make our game controller we will start1600:00:31,413 --> 00:00:33,689by creating an empty game object.1700:00:34,438 --> 00:00:37,159Go to Game Object - Create Empty.1800:00:37,159 --> 00:00:39,710We will call it gameController and tag it1900:00:39,710 --> 00:00:41,875with the GameController tag too.2000:00:46,270 --> 00:00:48,201We're going to use the game controller to2100:00:48,201 --> 00:00:50,800play the in-game music. So give it an audio2200:00:50,800 --> 00:00:52,800source component and then drag on the2300:00:52,800 --> 00:00:54,675music, which you'll find in the2400:00:54,675 --> 00:00:56,150Audio folder.2500:00:57,382 --> 00:00:59,900Assign the clip music_normal2600:00:59,900 --> 00:01:01,747to the audio clip setting.2700:01:01,747 --> 00:01:03,747We want the music to play as we start the game2800:01:03,747 --> 00:01:05,747and we want it to loop, so make sure2900:01:05,747 --> 00:01:07,526that Play On Awake and Loop are checked.3000:01:08,123 --> 00:01:10,123We also want to reduce the volume of the music3100:01:10,123 --> 00:01:13,114slightly so set the volume to 0.8.3200:01:13,614 --> 00:01:15,614The audio source has a tool tip to tell you3300:01:15,614 --> 00:01:18,130whether a clip is 2D or 3D.3400:01:18,630 --> 00:01:20,630We want this clip to be a 2D sound3500:01:20,630 --> 00:01:22,630so that the volume does not change with the3600:01:22,630 --> 00:01:24,381position of the audio listener.3700:01:25,075 --> 00:01:27,075In addition to playing the main music3800:01:27,075 --> 00:01:28,798we're going to have more panicked music3900:01:28,798 --> 00:01:30,798playing when the alarms are going off.4000:01:30,798 --> 00:01:32,798Rather than simply switching the audio clip4100:01:32,798 --> 00:01:35,326that is playing and creating a gap4200:01:35,326 --> 00:01:37,326we're going to have an additional audio source4300:01:37,326 --> 00:01:39,326on a separate child game object4400:01:39,326 --> 00:01:41,326that can fade up the panic music4500:01:41,326 --> 00:01:44,020as we fade the main music on this object down.4600:01:44,020 --> 00:01:46,020Create another empty game object,4700:01:46,020 --> 00:01:48,392by going to Game Object - Create Empty,4800:01:48,392 --> 00:01:50,835and name it secondaryMusic.4900:01:52,164 --> 00:01:54,164Make this a child of the game controller5000:01:54,164 --> 00:01:56,164by dragging and dropping it on to it5100:01:56,164 --> 00:01:57,543in the hierarchy.5200:01:59,963 --> 00:02:01,963The only component that this child game object5300:02:01,963 --> 00:02:04,308needs is an audio source.5400:02:04,308 --> 00:02:06,300Go to Add Component and choose5500:02:06,300 --> 00:02:08,217Audio - Audio Source.5600:02:08,217 --> 00:02:10,580From the Audio folder assign the clip5700:02:10,580 --> 00:02:14,042music_panic to the audio clip setting.5800:02:14,639 --> 00:02:16,973This should also be a 2D sound, this has been5900:02:16,973 --> 00:02:19,166setup in the importer settings for you.6000:02:19,708 --> 00:02:21,708We also want this sound clip to loop.6100:02:21,708 --> 00:02:23,306We also want to make sure that we can't6200:02:23,306 --> 00:02:25,891hear the music playing at the start of the level6300:02:25,891 --> 00:02:27,891so we'll set the volume to 0.6400:02:27,891 --> 00:02:30,099instead of unchecking Play On Awake.6500:02:30,099 --> 00:02:31,751We're going to have two scripts on our6600:02:31,751 --> 00:02:33,751game controller, but right now we're just6700:02:33,751 --> 00:02:35,531going to add the first.6800:02:35,531 --> 00:02:37,282The script will be handling where the player6900:02:37,282 --> 00:02:39,790was last sighted and what operation to7000:02:39,790 --> 00:02:41,790perform when the player has been sighted.7100:02:42,400 --> 00:02:44,400Other scripts will be referencing it7200:02:44,400 --> 00:02:46,883in order to know the last sighting of the player.7300:02:46,883 --> 00:02:49,664So we will call it LastPlayerSighting.7400:02:50,164 --> 00:02:52,164Click on the game controller7500:02:53,396 --> 00:02:55,396and at the bottom of the inspector click7600:02:55,396 --> 00:02:58,389Add Component. Choose New Script7700:02:58,389 --> 00:03:01,383and name it LastPlayerSighting.7800:03:04,895 --> 00:03:07,410Double click the icon to open it for editing.7900:03:08,417 --> 00:03:10,417As usual we'll start by removing8000:03:10,417 --> 00:03:12,795the default functions in the script.8100:03:13,856 --> 00:03:15,856We will start with the public variables.8200:03:15,856 --> 00:03:18,092The most important variable in this class8300:03:18,092 --> 00:03:19,953will be the position of the player when8400:03:19,953 --> 00:03:21,142he was last sighted.8500:03:21,642 --> 00:03:23,642Naturally this needs to be a vector38600:03:23,642 --> 00:03:25,434and we will call it Position.8700:03:25,990 --> 00:03:27,990We're going to set a default for this of8800:03:27,990 --> 00:03:30,280(1000, 1000, 1000).8900:03:30,904 --> 00:03:32,904This is going to represent the enemies9000:03:32,904 --> 00:03:34,456not knowing where the player is.9100:03:34,997 --> 00:03:36,997Whenever this is the case we'll set the9200:03:36,997 --> 00:03:38,997position back to this value.9300:03:39,497 --> 00:03:41,497The value itself is arbitrary9400:03:41,497 --> 00:03:43,497but it's important that it's not a position9500:03:43,497 --> 00:03:45,497that the player could theoretically get to.9600:03:46,328 --> 00:03:48,134When the enemies see the position as9700:03:48,134 --> 00:03:50,986(1000, 1000, 1000) they will ignore it9800:03:50,986 --> 00:03:52,643and return to patrolling.9900:03:54,729 --> 00:03:56,729Now we're going to store this reset position10000:03:56,729 --> 00:03:59,305as a separate variable, so that we can10100:03:59,305 --> 00:04:02,145set the position back to it whenever we need to.10200:04:05,286 --> 00:04:07,286In this script we also want it to control10300:04:07,286 --> 00:04:10,333the light fading, alarm and sirens.10400:04:10,333 --> 00:04:11,724To do these things we'll need a10500:04:11,724 --> 00:04:13,472few more variables.10600:04:13,472 --> 00:04:15,610Firstly, in order to fade the main directional10700:04:15,610 --> 00:04:17,997light we'll need a couple of float variables10800:04:17,997 --> 00:04:19,566for the intensities.10900:04:26,865 --> 00:04:29,621We'll also need a float for the fade speed.11000:04:32,069 --> 00:04:34,069The last public variable we need is a11100:04:34,069 --> 00:04:37,148speed that the music will fade in and out at.11200:04:39,057 --> 00:04:41,057We've set some defaults for these values11300:04:41,057 --> 00:04:43,057but they are public so we can tweak them11400:04:43,057 --> 00:04:45,057in the inspector later if we want to.11500:04:45,695 --> 00:04:47,695We don't need any more public variables11600:04:47,695 --> 00:04:50,363but we do still require some private ones.11700:04:50,363 --> 00:04:52,363We need a reference to the alarm light script11800:04:52,363 --> 00:04:54,363that is on the directional alarm light11900:04:54,363 --> 00:04:55,694that we setup earlier.12000:04:56,194 --> 00:04:58,194This way we can switch on the script12100:04:58,194 --> 00:05:01,738AlarmOnBool. We will call this reference Alarm.12200:05:03,619 --> 00:05:05,619When the alarm turns on we are also12300:05:05,619 --> 00:05:07,619going to need to fade out the main light.12400:05:08,119 --> 00:05:09,519We don't have a script to do that12500:05:09,519 --> 00:05:11,091so we'll do it here. 12600:05:11,091 --> 00:05:13,695We just need a reference to the light itself.12700:05:15,621 --> 00:05:17,400We need two more references.12800:05:17,914 --> 00:05:19,610Firstly to the audio source on the12900:05:19,610 --> 00:05:21,881child game object, which will play our13000:05:21,881 --> 00:05:23,011panic music.13100:05:23,442 --> 00:05:26,093We also need references to the audio sources13200:05:26,093 --> 00:05:29,824of the sirens. To store them we will use an array.13300:05:30,946 --> 00:05:32,946Note that the array is denoted by13400:05:32,946 --> 00:05:34,946the square brackets after the data type.13500:05:34,946 --> 00:05:36,946Now we're going to use the awake function13600:05:36,946 --> 00:05:38,946to setup our references.13700:05:38,946 --> 00:05:40,252Add this now.13800:05:40,252 --> 00:05:42,252First, we'll get a reference to the AlarmLight13900:05:42,252 --> 00:05:44,252script on our alarm light.14000:05:44,683 --> 00:05:45,765We will do this using a14100:05:45,765 --> 00:05:48,197FindGameObjectWithTag function14200:05:48,197 --> 00:05:50,197passing in the Alarm tag from the tag script14300:05:50,197 --> 00:05:52,625that we wrote in an earlier assignment.14400:05:53,553 --> 00:05:55,145From this reference we can use the14500:05:55,145 --> 00:05:59,069GetComponent function to find the AlarmLight script.14600:06:01,517 --> 00:06:04,283Next we can find a reference to the main light.14700:06:04,283 --> 00:06:06,763Again, we will use the FindGameObjectWithTag14800:06:06,763 --> 00:06:09,806function and parse in our main light tag.14900:06:09,806 --> 00:06:11,352But since Unity has a shortcut 15000:06:11,352 --> 00:06:13,352for the light component we won't need to use15100:06:13,352 --> 00:06:15,936GetComponent at the end here.15200:06:17,565 --> 00:06:19,565Next we can get the reference to the audio15300:06:19,565 --> 00:06:21,565source that will play the panic music.15400:06:22,065 --> 00:06:24,065Rather than use GameObject.Find or15500:06:24,065 --> 00:06:26,065try to find it via a tag, we're going15600:06:26,065 --> 00:06:28,735to use Transform.FindChild.15700:06:28,735 --> 00:06:30,459This will search through all of the children15800:06:30,459 --> 00:06:32,931of a transform to find one of a given name.15900:06:32,931 --> 00:06:35,195Since the secondary music audio source16000:06:35,195 --> 00:06:37,195is a child of the game controller16100:06:37,195 --> 00:06:38,808the function will find it.16200:06:39,377 --> 00:06:41,721From this reference we can use the shortcut16300:06:41,721 --> 00:06:43,721to the audio component.16400:06:47,633 --> 00:06:50,170Without diving in to more advanced scripting16500:06:50,170 --> 00:06:52,170we can't directly get an array of siren16600:06:52,170 --> 00:06:54,861audio sources. But what we can do is get16700:06:54,861 --> 00:06:57,085an array of the game objects they are on16800:06:57,085 --> 00:06:59,085and then for each of those find the audio16900:06:59,085 --> 00:07:02,001source component and allocate it to our array.17000:07:02,501 --> 00:07:04,264Let's start out by making the array17100:07:04,264 --> 00:07:05,928of siren game objects.17200:07:06,363 --> 00:07:07,636We're going to use the function17300:07:07,636 --> 00:07:09,636FindGameObjectsWithTag17400:07:09,636 --> 00:07:11,636to return the array we want to deal with.17500:07:12,343 --> 00:07:14,343We can parse in Tags.Siren17600:07:14,343 --> 00:07:16,343to get the game objects that we want.17700:07:20,696 --> 00:07:22,696Now we have the array of game objects we17800:07:22,696 --> 00:07:24,696can set the length of the siren's array.17900:07:25,196 --> 00:07:26,946This is important because we need to set18000:07:26,946 --> 00:07:29,991the length of an array before we can allocate to it.18100:07:29,991 --> 00:07:31,991The length of the array is defined by what18200:07:31,991 --> 00:07:33,991is inside the square brackets.18300:07:36,991 --> 00:07:39,881Now we have two arrays of the same length.18400:07:39,881 --> 00:07:41,881Next we need to loop through the 18500:07:41,881 --> 00:07:44,441SirenGameObject array and for each element18600:07:44,441 --> 00:07:46,441assign an audio source reference18700:07:46,441 --> 00:07:48,441to our array of sirens.18800:07:58,153 --> 00:08:00,347So effectively we are finding a set of18900:08:00,347 --> 00:08:02,347tagged game objects that we know have19000:08:02,347 --> 00:08:04,555audio sources, placing them in to a 19100:08:04,555 --> 00:08:06,016game object array19200:08:07,345 --> 00:08:09,345and then looping through that array19300:08:10,397 --> 00:08:12,397and assigning the audio sources on each19400:08:12,397 --> 00:08:14,027of those objects19500:08:15,256 --> 00:08:17,670to an array of audio sources.19600:08:20,187 --> 00:08:22,187Now we need a function to toggle the alarm19700:08:22,187 --> 00:08:25,670light, main light and sirens on and off.19800:08:28,041 --> 00:08:30,041Remember that the condition for the alarm to19900:08:30,041 --> 00:08:32,925be on is that the player has been spotted.20000:08:32,925 --> 00:08:34,925This would mean that the position variable20100:08:34,925 --> 00:08:37,765is not the same as the reset position variable20200:08:37,765 --> 00:08:39,765In this function we first need to set the20300:08:39,765 --> 00:08:41,765alarm's AlarmOn variable20400:08:41,765 --> 00:08:43,765to be equal to this condition.20500:08:48,381 --> 00:08:50,381This part will return true of false20600:08:50,381 --> 00:08:52,381depending on whether the vector3s20700:08:52,381 --> 00:08:53,498are different or not.20800:08:54,136 --> 00:08:55,844Next we need to fade the main light's 20900:08:55,844 --> 00:08:58,693intensity between itself and the new intensity.21000:08:58,693 --> 00:09:00,693But before we can we need to decide21100:09:00,693 --> 00:09:02,345what the new intensity is21200:09:02,917 --> 00:09:04,917first we will create a float to store21300:09:04,917 --> 00:09:06,378the new intensity.21400:09:07,583 --> 00:09:09,251Now if the position is not equal21500:09:09,251 --> 00:09:11,251to the reset position,21600:09:12,552 --> 00:09:14,552and therefore the alarm is going off,21700:09:15,342 --> 00:09:18,164we want the new intensity of the light to be low.21800:09:19,082 --> 00:09:22,025Otherwise, denoted here by the Else, we want21900:09:22,025 --> 00:09:24,553the new intensity to be high.22000:09:26,901 --> 00:09:28,901We can now lerp the main light's intensity22100:09:28,901 --> 00:09:32,296between itself and this new intensity.22200:09:39,274 --> 00:09:41,844We will use Time.deltaTime22300:09:41,844 --> 00:09:43,844and fadeSpeed as the time parameter22400:09:43,844 --> 00:09:45,844of the lerp function.22500:09:46,662 --> 00:09:48,662Next we need to tell the sirens whether or not22600:09:48,662 --> 00:09:52,839to play. We will do this by looping through the array.22700:09:56,184 --> 00:09:58,900If the position is not the reset position22800:09:58,900 --> 00:10:01,385and the siren audio source in the array22900:10:01,385 --> 00:10:03,385is not already playing something23000:10:03,385 --> 00:10:05,385then it should be playing.23100:10:07,736 --> 00:10:09,998Now we'll add an Else to this, which says23200:10:09,998 --> 00:10:11,998that if the position is the reset position23300:10:11,998 --> 00:10:13,998then the siren should stop playing.23400:10:15,023 --> 00:10:17,260And that's the end of the SwitchAlarms function.23500:10:17,760 --> 00:10:20,164Now that we've completed this we can call23600:10:20,164 --> 00:10:22,425in our Update function. We're going to put the23700:10:22,425 --> 00:10:24,719Update function above SwitchAlarms23800:10:24,719 --> 00:10:26,719but the order of functions in a script23900:10:26,719 --> 00:10:28,719do not effect how they work. We're simply24000:10:28,719 --> 00:10:30,719doing it to make it easier to read.24100:10:31,219 --> 00:10:33,219The last thing we need to do in this script24200:10:33,219 --> 00:10:35,554is to handle the music fading in and out.24300:10:35,554 --> 00:10:37,373We will do this in another function.24400:10:37,972 --> 00:10:40,443After the end of the SwitchAlarms function24500:10:40,443 --> 00:10:42,234add a MusicFading function.24600:10:42,775 --> 00:10:44,775First we need to check if the alarm should24700:10:44,775 --> 00:10:47,178be going off, that is that the position24800:10:47,178 --> 00:10:49,178is not the reset position.24900:10:50,700 --> 00:10:52,700Then if this is the case we want to 25000:10:52,700 --> 00:10:57,273reduce the audio volume. We do this using Mathf.Lerp.25100:11:00,812 --> 00:11:02,812We also want to increase the volume of the25200:11:02,812 --> 00:11:05,575panic music so we simply do the reverse,25300:11:05,575 --> 00:11:07,284for the PanicAudio variable.25400:11:07,784 --> 00:11:09,784We're setting a maximum volume for the music25500:11:09,784 --> 00:11:13,589of 0.8 as we did in the inspector earlier.25600:11:16,285 --> 00:11:18,642Conversely, if the position is the reset25700:11:18,642 --> 00:11:20,463position we want to do the opposite,25800:11:21,073 --> 00:11:23,073fading in the normal music25900:11:25,880 --> 00:11:27,880and fade out the panic music.26000:11:34,444 --> 00:11:36,444That's the end of our If Else structure.26100:11:36,444 --> 00:11:38,080Now we simply need to put a call26200:11:38,080 --> 00:11:40,080to this function in the Update.26300:11:42,956 --> 00:11:45,136That concludes the work on this script.26400:11:45,136 --> 00:11:47,136With it finished we can now test how the26500:11:47,136 --> 00:11:48,899alarm looks when it's set off.26600:11:49,443 --> 00:11:51,443We can do this by playing the scene26700:11:51,443 --> 00:11:53,443and setting the position variable26800:11:53,443 --> 00:11:55,707to something other than it's reset position.26900:11:55,707 --> 00:11:57,995Save the script now and return to the editor.27000:11:57,995 --> 00:12:00,582Press the play button at the top of Unity27100:12:04,994 --> 00:12:06,580and in the game controller27200:12:07,719 --> 00:12:09,719set the position value to something27300:12:09,719 --> 00:12:11,719other than 1000, in other words27400:12:11,719 --> 00:12:13,719simply adjust one of the three values27500:12:13,719 --> 00:12:16,066in the vector3 variable, like this.27600:12:17,946 --> 00:12:20,171Now you can see our alarm goes off27700:12:20,171 --> 00:12:22,764and our panic music begins to play.27800:12:22,764 --> 00:12:24,311This means that our game controller is27900:12:24,311 --> 00:12:25,631working properly.28000:12:26,438 --> 00:12:28,079Stop playing the game now.28100:12:28,079 --> 00:12:30,551Now that we've finished work on our game controller28200:12:30,551 --> 00:12:32,782drag it in to the Prefabs folder in the project28300:12:32,782 --> 00:12:34,782to save it there as a prefab.28400:12:36,033 --> 00:12:38,918This concludes this assignment on game controllers.28500:12:38,918 --> 00:12:40,918In the next assignment we'll work on our28600:12:40,918 --> 00:12:43,303CCTV cameras, which will detect the player28700:12:43,303 --> 00:12:45,303as they walk around the level.