100:00:00,000 --> 00:00:02,147Now we will add one of the systems that200:00:02,147 --> 00:00:03,787triggers the alarm in our game,300:00:03,787 --> 00:00:07,164the CCTV cameras that are trying to spot the player.400:00:07,164 --> 00:00:09,164The first step is to drag the model in500:00:09,164 --> 00:00:12,105to the scene and to position it on the battle bus.600:00:12,105 --> 00:00:16,719In the Models folder locate prop_cctvCam.700:00:16,719 --> 00:00:18,719It should look like this. Drag it in800:00:18,719 --> 00:00:21,986to the hierarchy and then position it at900:00:21,986 --> 00:00:26,299(-8, 3, 16.1).1000:00:26,299 --> 00:00:28,299This will place it on the battle bus1100:00:28,299 --> 00:00:32,355but it needs rotating by 180 in the Y axis.1200:00:33,131 --> 00:00:35,131Select it in the hierarchy and with1300:00:35,131 --> 00:00:37,131your mouse cursor over the scene view1400:00:37,131 --> 00:00:39,131press F to focus on it.1500:00:41,026 --> 00:00:43,026Make sure to check the Use Light Probes1600:00:43,026 --> 00:00:45,504box on the mesh renderer on each of the1700:00:45,504 --> 00:00:47,685game objects in the camera hierarchy1800:00:47,685 --> 00:00:50,468so that the camera has dynamic light shining on it.1900:00:57,778 --> 00:00:59,778As you can see it's now properly lit.2000:01:00,761 --> 00:01:02,998Light probes have been setup for you2100:01:02,998 --> 00:01:04,998and are part of the Lights prefab that we2200:01:04,998 --> 00:01:06,501created earlier.2300:01:08,851 --> 00:01:10,851The next thing our CCTV camera needs2400:01:10,851 --> 00:01:13,635is a frustum. We want to start by adding2500:01:13,635 --> 00:01:15,387the collision mesh to the camera.2600:01:15,387 --> 00:01:17,750When the player is detected within this frustum2700:01:17,750 --> 00:01:19,363the alarm will sound.2800:01:19,836 --> 00:01:21,959We want to start by adding the collision mesh2900:01:21,959 --> 00:01:24,206to the camera. We need to make it a3000:01:24,206 --> 00:01:26,206child of the camera body.3100:01:26,206 --> 00:01:32,119In the Models folder locate prop_cctvCam_collision.3200:01:32,119 --> 00:01:37,155Drag and drop this on to prop_cctvCam_body3300:01:37,155 --> 00:01:38,527in the hierarchy.3400:01:39,193 --> 00:01:41,193We need to reposition it slightly.3500:01:41,193 --> 00:01:42,864The frustum should appear to be coming3600:01:42,864 --> 00:01:45,607from the lens. Set the position of this object3700:01:45,607 --> 00:01:50,040to (0, 0.15, 0.35).3800:01:50,040 --> 00:01:52,040The purpose of this game object is to show3900:01:52,040 --> 00:01:54,637where the camera is pointing and to detect4000:01:54,637 --> 00:01:57,164the player when he is in front of the camera.4100:02:01,062 --> 00:02:03,062To physically detect the player we're going 4200:02:03,062 --> 00:02:05,062to use a trigger collider. Add a mesh4300:02:05,062 --> 00:02:07,062collider to the collision object that we4400:02:07,062 --> 00:02:10,584just added. Click the Add Component button4500:02:10,584 --> 00:02:13,096and choose Physics - Mesh Collider.4600:02:13,096 --> 00:02:15,096Then check the box for Is Trigger.4700:02:16,231 --> 00:02:18,231The frustum looks a little poor at the moment4800:02:18,231 --> 00:02:20,813so instead we're going to use a spot light4900:02:20,813 --> 00:02:22,813to show where the camera is pointing5000:02:22,813 --> 00:02:24,689and remove the unnecessary visual5100:02:24,689 --> 00:02:26,482components from the game object.5200:02:26,482 --> 00:02:28,482Remove the mesh filter by clicking on the5300:02:28,482 --> 00:02:31,770cog to the right of it, and choose Remove Component.5400:02:32,270 --> 00:02:34,270Do the same for the mesh renderer.5500:02:35,668 --> 00:02:37,668Before we create any visual effects5600:02:37,668 --> 00:02:40,344we want the camera to be pointing in the right direction.5700:02:40,844 --> 00:02:42,527We want to prevent the player from passing5800:02:42,527 --> 00:02:44,527through this space when the camera is facing5900:02:44,527 --> 00:02:47,165forward. So to completely cover the area6000:02:47,165 --> 00:02:48,762we're going to tilt the camera body6100:02:48,762 --> 00:02:50,95660 degrees in the X axis.6200:02:50,956 --> 00:02:54,097Select prop_cctvCam_body6300:02:54,097 --> 00:02:56,440and in the X axis for rotation6400:02:56,440 --> 00:02:58,440put in 60 degrees.6500:02:59,465 --> 00:03:01,465To visually represent the frustum we're going6600:03:01,465 --> 00:03:03,118to add a spotlight to it.6700:03:03,618 --> 00:03:06,574Reselect prop_cctvCam_collision6800:03:06,574 --> 00:03:11,066then go to Add Component - Rendering - Light.6900:03:12,229 --> 00:03:14,229Change the type to Spot.7000:03:15,102 --> 00:03:17,102Set the range to 9.5,7100:03:17,892 --> 00:03:19,892the angle to 90,7200:03:20,627 --> 00:03:22,098the colour to red.7300:03:23,610 --> 00:03:26,514We'll set the shadow type to Hard Shadow7400:03:27,249 --> 00:03:29,928with a bias of 0.02.7500:03:30,939 --> 00:03:32,939We don't want this light baked in if7600:03:32,939 --> 00:03:34,939we rebake the light map later.7700:03:34,939 --> 00:03:37,258So we need to set the light mapping setting7800:03:37,258 --> 00:03:39,258to Real Time Only.7900:03:40,269 --> 00:03:42,269This looks okay, but to improve the effect8000:03:42,269 --> 00:03:44,835we're going to add a cookie to the light.8100:03:44,835 --> 00:03:46,835A cookie is effectively a texture that8200:03:46,835 --> 00:03:49,167your light projects. The one we're going to8300:03:49,167 --> 00:03:51,565use is in the Textures folder and is called8400:03:51,565 --> 00:03:54,982FX_cameraview_ALP.8500:03:54,982 --> 00:03:56,982Drag and drop this on to the cookie8600:03:56,982 --> 00:03:58,402property of the light8700:04:00,200 --> 00:04:02,200and you should see a starlight pattern8800:04:02,200 --> 00:04:04,200projected on the floor. Now we need to make8900:04:04,200 --> 00:04:06,626a script to report the location of the player9000:04:06,626 --> 00:04:09,057when he's spotted by the CCTV camera.9100:04:09,512 --> 00:04:12,401We'll call it CCTVPlayerDetection9200:04:12,401 --> 00:04:14,401Click the Add Component button9300:04:15,550 --> 00:04:17,550and choose New Script and name it9400:04:17,550 --> 00:04:22,026CCTVPlayerDetection. Click Create and Add9500:04:22,026 --> 00:04:23,539and then double click the icon9600:04:23,539 --> 00:04:25,084to launch it for editing.9700:04:25,736 --> 00:04:27,736Remove the default functions and setup9800:04:27,736 --> 00:04:30,439your script for use. For this script we'll9900:04:30,439 --> 00:04:32,217need a couple of private class variables 10000:04:32,217 --> 00:04:33,507to store references.10100:04:34,145 --> 00:04:36,145Firstly to the player so that we know it's10200:04:36,145 --> 00:04:37,783the player that we've detected.10300:04:38,465 --> 00:04:40,465Secondly we need a reference to the last10400:04:40,465 --> 00:04:43,325player sighting script on the game controller.10500:04:43,325 --> 00:04:45,325So that we can update the position variable10600:04:45,325 --> 00:04:46,897when we need to.10700:04:48,184 --> 00:04:50,184We will now use the Awake function to10800:04:50,184 --> 00:04:52,184allocate these references.10900:04:52,684 --> 00:04:54,684We can allocate the player reference using11000:04:54,684 --> 00:04:56,991FindGameObjectWithTag and parsing11100:04:56,991 --> 00:04:59,326the Player variable from our tag script.11200:04:59,826 --> 00:05:01,451We can also find the game controller11300:05:01,451 --> 00:05:04,244in the same way. We then need to use11400:05:04,244 --> 00:05:06,244GetComponent afterwards to get a reference11500:05:06,244 --> 00:05:07,801to the last player sighting script11600:05:07,801 --> 00:05:09,342on the game controller.11700:05:09,900 --> 00:05:11,900Now we're going to use OnTriggerStay11800:05:11,900 --> 00:05:13,472to detect the player.11900:05:15,132 --> 00:05:17,132Given that a collider will be detected12000:05:17,132 --> 00:05:19,132within the trigger zone, we want to check if12100:05:19,132 --> 00:05:21,132the game object belonging to that collider12200:05:21,132 --> 00:05:22,684is the player. 12300:05:22,684 --> 00:05:24,684We need to be careful at this point.12400:05:24,684 --> 00:05:26,491It could be that our player is on the other12500:05:26,491 --> 00:05:27,976side of a wall but still 12600:05:27,976 --> 00:05:29,943intersecting the collider.12700:05:29,943 --> 00:05:31,624To resolve this we're going to12800:05:31,624 --> 00:05:33,624raycast from the lens of the camera12900:05:33,624 --> 00:05:36,125to the player to check the line of sight.13000:05:36,594 --> 00:05:38,594We'll start by finding the relative position13100:05:38,594 --> 00:05:40,594of the player from the camera13200:05:40,594 --> 00:05:43,160so that we have a direction to raycast in.13300:05:46,008 --> 00:05:48,455We will also need a raycastHit variable13400:05:48,455 --> 00:05:50,455to determine whether or not the raycast13500:05:50,455 --> 00:05:52,455intersects the player collider.13600:05:52,455 --> 00:05:54,455Using these we can raycast from the13700:05:54,455 --> 00:05:57,357camera towards the player and get back13800:05:57,357 --> 00:05:59,878information on what the raycast hits.13900:06:04,042 --> 00:06:06,042Next we need to check whether the game object14000:06:06,042 --> 00:06:08,336of the collider of whatever we hit14100:06:08,336 --> 00:06:09,682was the player.14200:06:10,449 --> 00:06:12,449If it was then we want to update the game14300:06:12,449 --> 00:06:15,432controller with the last sighting of the player.14400:06:16,664 --> 00:06:19,846This concludes the CCTV player detection script14500:06:19,846 --> 00:06:22,377so we need to save it and return to the editor.14600:06:22,877 --> 00:06:24,877At this point we want to drag our CCTV 14700:06:24,877 --> 00:06:26,877camera in to the Prefabs folder14800:06:26,877 --> 00:06:28,877to save it as a prefab.14900:06:29,377 --> 00:06:31,377We can then duplicate this around our level15000:06:31,377 --> 00:06:33,941to make more cameras. Select the parent15100:06:33,941 --> 00:06:37,078prop_cctvCam and drop it on to the15200:06:37,078 --> 00:06:39,764Prefabs folder in the project panel.15300:06:41,871 --> 00:06:43,871Now let's duplicate this camera twice15400:06:43,871 --> 00:06:45,871for our other cameras in the scene.15500:06:45,871 --> 00:06:47,871We now have three in the same place.15600:06:48,371 --> 00:06:54,798Let's position one of them at (-21, 2.2, 2).15700:06:56,679 --> 00:06:58,749Then reselect it in the hierarchy and15800:06:58,749 --> 00:07:00,749press F to focus on it.15900:07:01,484 --> 00:07:02,838You should see that this is now on one16000:07:02,838 --> 00:07:04,838of the buildings in the lower left16100:07:04,838 --> 00:07:05,960of the game. 16200:07:06,951 --> 00:07:10,092Now select one of the other CCTV cams16300:07:10,092 --> 00:07:16,102and place it at (-23, 1.8, 24).16400:07:17,997 --> 00:07:20,872Reselect it in the hierarchy and press F16500:07:20,872 --> 00:07:23,314with your mouse over the scene view to focus on it.16600:07:23,314 --> 00:07:24,896You should see that it's now on the wall16700:07:24,896 --> 00:07:26,896of the security department building16800:07:26,896 --> 00:07:28,509in the centre of the map.16900:07:29,727 --> 00:07:31,270This camera needs to spot the player coming17000:07:31,270 --> 00:07:33,270through the break in the fence.17100:07:33,770 --> 00:07:35,770So we will tilt it up in the X axis17200:07:35,770 --> 00:07:37,770in order to face the fence.17300:07:38,629 --> 00:07:40,629Drill down in to this object and select17400:07:40,629 --> 00:07:42,629prop_cctvCam_body17500:07:42,629 --> 00:07:46,174and set the rotation of X from 6017600:07:46,174 --> 00:07:50,099to 30. Select prop_cctvCam_collision.17700:07:50,099 --> 00:07:52,085We also need to lengthen the trigger 17800:07:52,085 --> 00:07:53,710collider so that it reaches the fence.17900:07:54,265 --> 00:07:59,421So change the scale to (1, 1, 1.8).18000:08:00,971 --> 00:08:02,971We want the camera on the battle bus to be18100:08:02,971 --> 00:08:04,971animated, so we will return to working18200:08:04,971 --> 00:08:06,971on this camera now.18300:08:08,838 --> 00:08:10,838Reselect it and focus on it.18400:08:14,086 --> 00:08:16,086We want the camera on the battle bus to18500:08:16,086 --> 00:08:18,696be animated. But before we do this18600:08:18,696 --> 00:08:20,431we can notice that the intensity of the 18700:08:20,431 --> 00:08:22,431spotlight is not enough.18800:08:22,431 --> 00:08:24,431This is the power of prefabs in Unity.18900:08:24,931 --> 00:08:27,352Because we now want to update all three19000:08:27,352 --> 00:08:29,352cameras with a brighter intensity19100:08:29,352 --> 00:08:31,352we can drill down in to any one of them.19200:08:32,418 --> 00:08:35,572Select prop_cctvCam_collision19300:08:35,572 --> 00:08:37,155and change the intensity.19400:08:37,810 --> 00:08:40,713Set it to a value of 4 and press return.19500:08:41,213 --> 00:08:43,213Then hit the apply button.19600:08:43,920 --> 00:08:45,920This saves the change out to the prefab19700:08:46,669 --> 00:08:49,622and now when we check our other cctv cams19800:08:49,622 --> 00:08:52,646we can see that they have a brighter intensity too.19900:08:55,655 --> 00:08:57,362Now let's animate our camera. 20000:08:57,362 --> 00:08:59,362This camera should sweep back and forth.20100:08:59,862 --> 00:09:02,921We do this by creating a new animation asset.20200:09:03,685 --> 00:09:05,923Select the Animation folder in the project panel.20300:09:07,445 --> 00:09:10,724Click the Create button and choose Animation.20400:09:12,163 --> 00:09:15,102Call the animation cctv_sweep.20500:09:16,873 --> 00:09:19,596Now expand the prop_cctvCamera20600:09:19,596 --> 00:09:22,666and select prop_cctvCam_Joint.20700:09:23,829 --> 00:09:25,829Drag and drop this animation asset20800:09:25,829 --> 00:09:28,358on to the object in the inspector.20900:09:29,793 --> 00:09:31,793This adds an animation component21000:09:31,793 --> 00:09:34,617and assigns this asset as the animation to play.21100:09:34,617 --> 00:09:36,353Now we need to open up Unity's animation21200:09:36,353 --> 00:09:40,064window. Go to Window - Animation.21300:09:42,525 --> 00:09:44,525We will dock this, along with our game21400:09:44,525 --> 00:09:45,930view at the bottom.21500:09:46,969 --> 00:09:48,969This allows us to see the animation we are doing21600:09:48,969 --> 00:09:50,969in the scene view and work on the animation21700:09:50,969 --> 00:09:52,969at the same time. We want the camera21800:09:52,969 --> 00:09:54,969to rotate around the Y axis.21900:09:55,469 --> 00:10:00,093So we will click on Rotation.Y and select Add Curves.22000:10:01,201 --> 00:10:03,201To the right of Rotation.Y22100:10:04,516 --> 00:10:07,760click and choose Add Curves from the menu that appears.22200:10:08,467 --> 00:10:10,467This will add rotations as curves on the22300:10:10,467 --> 00:10:12,467graph and gives a keyframe at the start22400:10:12,467 --> 00:10:14,467of the animation. We want the animation22500:10:14,467 --> 00:10:17,247to last about 2 seconds so we will add22600:10:17,247 --> 00:10:19,067another keyframe there.22700:10:19,609 --> 00:10:21,609Scrub the playhead to 2 seconds22800:10:22,675 --> 00:10:24,675and click the Add Keyframe button at the22900:10:24,675 --> 00:10:26,675top of the animation window.23000:10:27,313 --> 00:10:29,313Now set the value to 60.23100:10:32,989 --> 00:10:34,989All that's left to do is to make sure that23200:10:34,989 --> 00:10:36,989our animation loops. We do this by23300:10:36,989 --> 00:10:39,625changing the wrap mode at the bottom,23400:10:39,625 --> 00:10:41,625which is currently set to default.23500:10:42,125 --> 00:10:43,902Change this to Ping Pong.23600:10:43,902 --> 00:10:45,652This means that our animation will go from23700:10:45,652 --> 00:10:49,7050 to 60 and then head back to 0 in an infinite loop.23800:10:50,412 --> 00:10:52,842This completes the creation of our animation23900:10:53,342 --> 00:10:55,342and we can test it by pressing the play button24000:10:55,342 --> 00:10:57,342at the top of the interface.24100:11:09,721 --> 00:11:11,471You should note that when our camera is24200:11:11,471 --> 00:11:13,471rotated there is a gap around which24300:11:13,471 --> 00:11:15,152the player can sneak.24400:11:15,152 --> 00:11:18,503This concludes the creation of our CCTV camera24500:11:18,503 --> 00:11:20,265and the end of this assignment.24600:11:20,265 --> 00:11:22,059In the next assignment we will look at 24700:11:22,059 --> 00:11:23,880creating laser gates, which are designed to24800:11:23,880 --> 00:11:25,493detect the player also.24900:11:25,493 --> 00:11:27,493Remember to save your scene25000:11:28,228 --> 00:11:30,725and save the project before moving on.