100:00:00,000 --> 00:00:02,635When using the animator you have two options200:00:02,635 --> 00:00:05,138for referencing states and parameters.300:00:05,138 --> 00:00:07,138You can either reference their name, as a 400:00:07,138 --> 00:00:09,138string, or you can reference the name500:00:09,138 --> 00:00:11,652hash, which is stored as an integer.600:00:11,652 --> 00:00:13,964Refreshing the hash identifier is much more700:00:13,964 --> 00:00:16,668efficient and less prone to mistakes.800:00:16,668 --> 00:00:18,668As such we are going to make a small script900:00:18,668 --> 00:00:20,668to store the hashes so that we can simply1000:00:20,668 --> 00:00:22,668reference the classes variables, rather 1100:00:22,668 --> 00:00:24,668than writing out a string each time.1200:00:24,668 --> 00:00:26,668We are going to use this script to store1300:00:26,668 --> 00:00:28,668our hash identifiers for both the player1400:00:28,668 --> 00:00:31,099and the enemy, which we will be making later.1500:00:31,099 --> 00:00:32,727This script will have a lot in common with1600:00:32,727 --> 00:00:34,727the Tag script we made for referencing1700:00:34,727 --> 00:00:36,727tag strings. However there are a few1800:00:36,727 --> 00:00:38,727noticeable differences. A key example1900:00:38,727 --> 00:00:40,727being that the Tag script does not2000:00:40,727 --> 00:00:42,727need to be applied to a game object2100:00:42,727 --> 00:00:45,380to be used. The hash ID script we are about2200:00:45,380 --> 00:00:47,918to write will be. Since it is simply data2300:00:47,918 --> 00:00:49,918that needs to be widely available we will2400:00:49,918 --> 00:00:51,918create the script on the game controller2500:00:51,918 --> 00:00:53,918object that we already have. Select the2600:00:53,918 --> 00:00:56,208game controller in the hierarchy and click2700:00:56,208 --> 00:00:58,499Add Component - New Script.2800:00:58,499 --> 00:01:01,599Name the script Hash IDs as shown here2900:01:03,080 --> 00:01:04,508and double click the icon to open3000:01:04,508 --> 00:01:08,202it for editing. Clear the script to start writing.3100:01:08,923 --> 00:01:11,426This script will need a public integer variable3200:01:11,426 --> 00:01:13,816for each hash that we want it to store.3300:01:14,478 --> 00:01:15,942We will start with the states that the3400:01:15,942 --> 00:01:18,779player uses. It is important for us to have3500:01:18,779 --> 00:01:20,779good naming conventions so that we can3600:01:20,779 --> 00:01:22,779easily identify which state or parameter3700:01:22,779 --> 00:01:24,779we are referencing. The convention we are 3800:01:24,779 --> 00:01:26,779going to use is the name of the state3900:01:26,779 --> 00:01:28,779or parameter followed by the words4000:01:28,779 --> 00:01:30,653State, if it is a state,4100:01:30,653 --> 00:01:33,054or the type of parameter, if it is a parameter.4200:01:33,054 --> 00:01:35,054So to start let us make the hash4300:01:35,054 --> 00:01:37,054of the Dying state of the player.4400:01:37,927 --> 00:01:40,735Create a public integer called dyingstate.4500:01:41,359 --> 00:01:43,320Now that we have the variable we need to4600:01:43,320 --> 00:01:45,320allocate it in the awake function.4700:01:45,320 --> 00:01:46,579Add this now.4800:01:47,120 --> 00:01:48,899The function we are going to use is the 4900:01:48,899 --> 00:01:51,548static function of the animator class.5000:01:51,548 --> 00:01:53,548What that means is we can call the function5100:01:53,548 --> 00:01:55,548from the class, rather than from an5200:01:55,548 --> 00:01:57,548instance of the animator class.5300:01:58,048 --> 00:02:01,279The function is StringToHash and takes in a5400:02:01,279 --> 00:02:03,279string variable as the parameter.5500:02:05,353 --> 00:02:07,353To reference the state by string we5600:02:07,353 --> 00:02:09,353first have the base layer5700:02:09,853 --> 00:02:12,771then from that we access the state with a dot.5800:02:13,361 --> 00:02:16,231As you can see we have Base Layer.Dying5900:02:16,231 --> 00:02:18,231in order to reference this state.6000:02:18,231 --> 00:02:20,589As you will see if you refer to the editor6100:02:20,589 --> 00:02:24,451on the base layer we have our state Dying.6200:02:25,614 --> 00:02:27,614This code refers to the string name6300:02:27,614 --> 00:02:30,251of the layer itself. So if you have renamed6400:02:30,251 --> 00:02:32,251base layer you should refer to that6500:02:32,251 --> 00:02:34,587particular layer, rather than base 6600:02:34,587 --> 00:02:36,587space layer. The process is very6700:02:36,587 --> 00:02:39,184similar with parameters. We will now create6800:02:39,184 --> 00:02:40,915create a variable for the Dead Bool parameter6900:02:40,915 --> 00:02:42,570parameter for our player.7000:02:43,222 --> 00:02:45,222Using our naming convention it should be7100:02:45,222 --> 00:02:47,222called deadBool.7200:02:48,689 --> 00:02:50,995Again the function call is the same.7300:02:50,995 --> 00:02:52,995but since we are not referencing a state7400:02:52,995 --> 00:02:55,831we do not need the prefix base layer.7500:02:55,831 --> 00:02:57,831We just need the name of the parameter.7600:02:58,593 --> 00:02:59,563So we would say deadBool equals7700:02:59,563 --> 00:03:04,063deadBool = Animator.StringToHash7800:03:04,063 --> 00:03:06,580and then as a string simply the word Dead.7900:03:06,580 --> 00:03:08,580This refers to the parameter8000:03:08,580 --> 00:03:10,580in our animator controller.8100:03:17,365 --> 00:03:19,045Now let us fill out the rest of the animator8200:03:19,045 --> 00:03:20,865references we will need for our game. 8300:03:20,865 --> 00:03:22,865We will fast forward these so that you can8400:03:22,865 --> 00:03:24,865see them written out. Once we have8500:03:24,865 --> 00:03:26,865finished writing, pause the video8600:03:26,865 --> 00:03:28,865and copy these in to your own script.8700:03:32,666 --> 00:03:34,666Our references are now complete.8800:03:34,666 --> 00:03:36,666Pause the video and ensure that yours8900:03:36,666 --> 00:03:39,383match this script. When you are done9000:03:39,383 --> 00:03:41,989save the script and return to the editor.9100:03:43,085 --> 00:03:45,085The game controller game object has been9200:03:45,085 --> 00:03:47,085changed by adding this script to it.9300:03:47,085 --> 00:03:48,656This object is saved in our project9400:03:48,656 --> 00:03:50,656as a prefab. So be sure to click9500:03:50,656 --> 00:03:52,931apply at the top in order to save9600:03:52,931 --> 00:03:54,931this change out to the prefab.9700:03:55,983 --> 00:03:57,983To finish, let us tidy this script9800:03:57,983 --> 00:03:59,983in to the game controller subfolder9900:03:59,983 --> 00:04:01,400of the Scripts folder.10000:04:01,900 --> 00:04:04,305Open scripts and drag and drop10100:04:04,305 --> 00:04:06,305Hash IDs in to the game controller10200:04:06,305 --> 00:04:08,305scripts folder.10300:04:08,805 --> 00:04:10,805Do not forget to save your scene and10400:04:10,805 --> 00:04:12,805save your project.10500:04:15,253 --> 00:04:17,253In the next assignment we will move on to10600:04:17,253 --> 00:04:19,253creating the player movement script.