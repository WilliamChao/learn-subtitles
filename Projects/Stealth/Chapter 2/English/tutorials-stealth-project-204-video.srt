100:00:00,000 --> 00:00:02,617The next stage in creating the player is200:00:02,617 --> 00:00:04,617to make a script to control his movement.300:00:05,117 --> 00:00:07,117Select the player and add a new script400:00:07,117 --> 00:00:09,117to him called Player Movement.500:00:12,738 --> 00:00:14,738Empty the script.600:00:17,033 --> 00:00:18,934Let us start out as usual with the700:00:18,934 --> 00:00:21,666public variables. We need an audio clip800:00:21,666 --> 00:00:23,666to store the sound of the player shouting.900:00:23,666 --> 00:00:25,666We will call the variable shoutingClip.1000:00:26,387 --> 00:00:28,387We are going to use a Lerp function1100:00:28,387 --> 00:00:30,387for changing the direction of the player.1200:00:30,735 --> 00:00:33,366As such we will need a smoothing value.1300:00:35,763 --> 00:00:37,763When we set the speed parameter of the player's1400:00:37,763 --> 00:00:41,014animator we want to apply damping.1500:00:41,014 --> 00:00:44,131We will store the damping time as a public float.1600:00:45,805 --> 00:00:47,805We will also need a couple of private variables1700:00:47,805 --> 00:00:50,962to store references. Firstly to the1800:00:50,962 --> 00:00:52,184animator component1900:00:53,402 --> 00:00:56,636and secondly a reference to the hash IDs script.2000:00:58,117 --> 00:01:00,117Now we can use the awake function to2100:01:00,117 --> 00:01:02,117allocate these references.2200:01:07,230 --> 00:01:09,230We are also going to use the awake function2300:01:09,230 --> 00:01:11,230to set the weight of the shouting2400:01:11,230 --> 00:01:13,230layer in our animator controller.2500:01:13,730 --> 00:01:16,284The weight of a layer is it's effectiveness2600:01:16,284 --> 00:01:18,953so if set to a value of 1 this layer's2700:01:18,953 --> 00:01:21,024animations have the potential to completely2800:01:21,024 --> 00:01:23,024override any layers beneath it,2900:01:23,024 --> 00:01:24,842such as the base layer.3000:01:24,842 --> 00:01:26,842Since we are using an avatar mask3100:01:26,842 --> 00:01:28,411and most of the time the Shouting layer3200:01:28,411 --> 00:01:30,411will be in an empty state we can3300:01:30,411 --> 00:01:32,411set the layer weight of this to 1 with3400:01:32,411 --> 00:01:35,369out it effecting the base layer's animation.3500:01:37,908 --> 00:01:39,616This function takes 2 arguments.3600:01:39,616 --> 00:01:43,144The first is an integer, an index of the layer,3700:01:43,144 --> 00:01:45,144for example the base layer is 0,3800:01:45,144 --> 00:01:47,144and the Shouting layer is 1.3900:01:47,144 --> 00:01:49,144And the second argument is that it's4000:01:49,144 --> 00:01:52,366effectiveness. A value of 1 as we stated earlier.4100:01:52,366 --> 00:01:54,366The player is a physics object,4200:01:54,366 --> 00:01:56,366so we will be dealing with his movement4300:01:56,366 --> 00:01:59,442in the fixed update function. Add this now.4400:02:01,254 --> 00:02:03,254We are going to start by cashing the inputs4500:02:03,254 --> 00:02:05,254that we get from the use.4600:02:05,254 --> 00:02:07,254This way we can use them when we need them4700:02:07,254 --> 00:02:09,006without having to call any input4800:02:09,006 --> 00:02:11,006functions again.4900:02:16,299 --> 00:02:18,299Now that we have our input, let us make a 5000:02:18,299 --> 00:02:20,299function to use that information to5100:02:20,299 --> 00:02:22,299manage the movement. We will call it5200:02:22,299 --> 00:02:24,299MovementManagement, and it needs to5300:02:24,299 --> 00:02:26,299take in parameters of the input variables5400:02:26,299 --> 00:02:28,299that we have just cached.5500:02:30,387 --> 00:02:32,387First thing we can do here is set the5600:02:32,387 --> 00:02:34,928Sneaking animator parameter by using the5700:02:34,928 --> 00:02:36,692sneaking variable that we are taking as5800:02:36,692 --> 00:02:38,692an argument in this function.5900:02:39,717 --> 00:02:42,231We can use a reference to the Hash IDs script6000:02:42,231 --> 00:02:44,231to determine the parameter we are setting.6100:02:46,209 --> 00:02:48,209The style of movement we are going to have6200:02:48,209 --> 00:02:50,209for the player is one in which the player's6300:02:50,209 --> 00:02:52,780direction is determined by the axis input.6400:02:53,355 --> 00:02:55,355The player turns to that direction and6500:02:55,355 --> 00:02:58,178runs forward. We are going to have the 6600:02:58,178 --> 00:02:59,940rotation of the player changing smoothly6700:02:59,940 --> 00:03:02,233but quickly in order to give the controls6800:03:02,233 --> 00:03:03,733a responsive feel.6900:03:04,233 --> 00:03:06,233To achieve this first we need to determine7000:03:06,233 --> 00:03:08,878if there is any directional input.7100:03:11,661 --> 00:03:13,661To make the player rotate to the direction7200:03:13,661 --> 00:03:15,899defined by the directional inputs7300:03:15,899 --> 00:03:17,899we will make a function to handle it.7400:03:17,899 --> 00:03:19,899This function will need the horizontal7500:03:19,899 --> 00:03:22,343and vertical variables in order to 7600:03:22,343 --> 00:03:24,343determine a target rotation.7700:03:26,017 --> 00:03:27,658If we imagine the new direction we want7800:03:27,658 --> 00:03:29,658the player to face as a vector7900:03:29,658 --> 00:03:32,174it can be represented by an amount in the8000:03:32,174 --> 00:03:35,204X direction of the horizontal input8100:03:35,204 --> 00:03:37,204and an amount in the Z direction8200:03:37,204 --> 00:03:38,570of the vertical input.8300:03:39,070 --> 00:03:41,891So if both horizontal and vertical are 1,8400:03:41,891 --> 00:03:44,492that is if up and right are being pressed8500:03:44,492 --> 00:03:46,492then the player should head in the positive8600:03:46,492 --> 00:03:48,492X and Z directions.8700:03:48,492 --> 00:03:50,492We will store this intended direction8800:03:50,492 --> 00:03:52,492as a vector3.8900:04:01,197 --> 00:04:03,029Now we need to convert this vector to a9000:04:03,029 --> 00:04:05,029quaternion so that we can adjust the9100:04:05,029 --> 00:04:07,029player's rotation towards this. 9200:04:07,029 --> 00:04:10,023A quaternion is a way of storing a rotation.9300:04:10,023 --> 00:04:12,678This is a more advanced topic but we need this9400:04:12,678 --> 00:04:14,967to assign rotation back to our character.9500:04:15,440 --> 00:04:17,440Unity has a built-in function that9600:04:17,440 --> 00:04:19,622simplifies this process for us, called 9700:04:19,622 --> 00:04:21,098LookRotation. 9800:04:21,098 --> 00:04:23,573LookRotation is a static function of the9900:04:23,573 --> 00:04:26,852quaternion class. It takes two arguments.10000:04:26,852 --> 00:04:28,852Firstly the vector representing the direction10100:04:28,852 --> 00:04:31,585you want to convert to a quaternion10200:04:31,585 --> 00:04:33,585and secondly a vector representing10300:04:33,585 --> 00:04:35,585the up direction.10400:04:36,886 --> 00:04:38,886We want to smooth the rotation of the player10500:04:38,886 --> 00:04:41,922as he turns. To do so we are going to use10600:04:41,922 --> 00:04:44,603Lerp to get a new rotation that is a slight10700:04:44,603 --> 00:04:46,603change from the current rotation10800:04:46,603 --> 00:04:49,128in the direction of the target rotation.10900:04:50,609 --> 00:04:53,208We will use our current rigidbody.rotation11000:04:53,208 --> 00:04:55,208as the direction to go from11100:04:58,470 --> 00:05:00,470and the target rotation from our11200:05:00,470 --> 00:05:02,470key input as the direction to lerp11300:05:02,470 --> 00:05:05,536towards, with our turn smoothing variable11400:05:05,536 --> 00:05:08,380to control how long this takes over time.11500:05:08,380 --> 00:05:10,853We can then set the rigidbody's rotation11600:05:10,853 --> 00:05:12,853to this new rotation using11700:05:12,853 --> 00:05:15,548rigidbody.MoveRotation.11800:05:16,997 --> 00:05:18,997With the rotating function finished11900:05:18,997 --> 00:05:20,997we can return to the movement management function12000:05:20,997 --> 00:05:22,997to put a call to it.12100:05:25,348 --> 00:05:27,348Whilst we are still within this If statement12200:05:27,348 --> 00:05:29,348we know that we are receiving input12300:05:29,848 --> 00:05:31,695so we know the player should be moving.12400:05:31,695 --> 00:05:33,695As such we can set the speed parameter12500:05:33,695 --> 00:05:36,610of the animator. We are going to set it to12600:05:36,610 --> 00:05:39,9275.5 as this is approximately the speed of the12700:05:39,927 --> 00:05:43,026animation as determined by the blend tree.12800:05:44,590 --> 00:05:46,590We are going to apply damping to the parameter12900:05:46,590 --> 00:05:48,590as we set it. This will ensure13000:05:48,590 --> 00:05:50,590transitions are smooth whilst13100:05:50,590 --> 00:05:52,590remaining responsive.13200:05:55,369 --> 00:05:57,369If however we are not receiving any input13300:05:57,369 --> 00:05:59,369then we want to set the speed to 0.13400:06:02,590 --> 00:06:05,337With the movement management function finished13500:06:05,337 --> 00:06:08,705we can put a call to it in our fixed update function.13600:06:10,752 --> 00:06:13,414We have still to add the audio for our player,13700:06:13,414 --> 00:06:16,204both his footsteps and the sound of him shouting.13800:06:16,204 --> 00:06:19,077For this we will make an audio management function.13900:06:20,116 --> 00:06:22,116We only want the footsteps audio clip to14000:06:22,116 --> 00:06:24,116play whilst in the Locomotion state.14100:06:24,616 --> 00:06:26,616So we should first of all check if that's14200:06:26,616 --> 00:06:28,616the state that the player is currently in.14300:06:28,616 --> 00:06:31,143We can use the Name hash, since we have the14400:06:31,143 --> 00:06:34,252appropriate state stored in our HashIDs script.14500:06:34,252 --> 00:06:37,161Here we are using GetCurrentAnimatorStateInfo14600:06:37,161 --> 00:06:39,423with a value of 0 to refer to the state14700:06:39,423 --> 00:06:41,865that we are in in the base layer.14800:06:43,926 --> 00:06:45,926We also only want to play if the 14900:06:45,926 --> 00:06:47,926clip is not already playing.15000:06:52,597 --> 00:06:54,597However when we are no longer in the15100:06:54,597 --> 00:06:56,597Locomotion state we do not want the15200:06:56,597 --> 00:06:59,245clip to continue on until it is finished15300:06:59,245 --> 00:07:01,245so we will stop it here.15400:07:03,016 --> 00:07:05,460Because we are using our audio source component15500:07:05,460 --> 00:07:07,460to manage the footsteps of the player15600:07:07,460 --> 00:07:10,167we will be using the PlayClipAtPoint function15700:07:10,167 --> 00:07:12,626to manage the shouting. This is because the15800:07:12,626 --> 00:07:14,626audio source will already be playing back15900:07:14,626 --> 00:07:17,135the footsteps and we do not want replace it16000:07:17,135 --> 00:07:19,821with the shouting. The condition for playing16100:07:19,821 --> 00:07:22,665back the shouting clip is that Shout is true.16200:07:22,665 --> 00:07:25,065PlayClipAtPoint takes 2 arguments,16300:07:25,065 --> 00:07:28,169an audio clip and a vector3 for position.16400:07:28,669 --> 00:07:30,669It creates a new object in the world at16500:07:30,669 --> 00:07:32,669the specified position and plays a16600:07:32,669 --> 00:07:35,424sound there. This object then self-destructs16700:07:35,424 --> 00:07:38,197so that it is no longer left in the scene.16800:07:39,651 --> 00:07:42,282Now our audio management function is complete.16900:07:42,782 --> 00:07:44,782In order to call this function however17000:07:44,782 --> 00:07:46,782we need to place it in the update function.17100:07:46,782 --> 00:07:48,782We will place this in our script below17200:07:48,782 --> 00:07:50,782the fixed update function. We do not need17300:07:50,782 --> 00:07:52,782to put update here but it makes the flow17400:07:52,782 --> 00:07:54,782of the script slightly easier to understand17500:07:54,782 --> 00:07:57,176when reading it. The update function could17600:07:57,176 --> 00:08:00,221be anywhere, it is purely a matter of preference.17700:08:02,599 --> 00:08:04,599The first thing we want to do is cache17800:08:04,599 --> 00:08:07,107the input of the Attract button.17900:08:09,019 --> 00:08:11,019Next we are going to parse this input18000:08:11,019 --> 00:08:13,793as a parameter to the animator controller18100:08:13,793 --> 00:08:16,602so that the player performs the correct animation.18200:08:17,889 --> 00:08:19,889Finally we will parse the Shout Bool18300:08:19,889 --> 00:08:21,723in to the audio management function18400:08:21,723 --> 00:08:23,723as we call it so that this is the 18500:08:23,723 --> 00:08:26,585triggering input that causes our shout to play.18600:08:28,770 --> 00:08:31,648Now we can save the script and return to the editor.18700:08:32,894 --> 00:08:34,894The player is now ready to test.18800:08:34,894 --> 00:08:36,894But before we do let us tidy up our script18900:08:36,894 --> 00:08:38,894folder one more time. We are going to19000:08:38,894 --> 00:08:41,299add a new subfolder to the Scripts folder19100:08:41,299 --> 00:08:43,299called Player. Select the Scripts folder19200:08:43,299 --> 00:08:44,922in the project panel and go to19300:08:44,922 --> 00:08:46,560Create - Folder.19400:08:47,160 --> 00:08:50,264Call this Player. Select the assets folder19500:08:50,264 --> 00:08:52,264and then drag in PlayerMovement in to19600:08:52,264 --> 00:08:54,264this Player folder.19700:08:55,026 --> 00:08:58,278Do not forget to save the scene and the project now.19800:09:02,618 --> 00:09:04,618Then we are ready to test the player.19900:09:05,546 --> 00:09:07,339Let us zoom out a little from him in the 20000:09:07,339 --> 00:09:10,801scene view and rotate our view around20100:09:10,801 --> 00:09:12,411to mimic the position of the camera that20200:09:12,411 --> 00:09:13,921we will place in later.20300:09:14,421 --> 00:09:16,421Before we test we will need to assign the20400:09:16,421 --> 00:09:19,370Shouting audio clip to our PlayerMovement script.20500:09:19,370 --> 00:09:22,088So select the player character char_ethan20600:09:22,088 --> 00:09:24,088again in the hierarchy.20700:09:24,588 --> 00:09:26,588You will see that the PlayerMovement script20800:09:26,588 --> 00:09:29,356has None Audio Clip next to Shouting clip.20900:09:29,356 --> 00:09:31,883So in the audio folder drag21000:09:31,883 --> 00:09:33,883PlayerAttractAttention21100:09:33,883 --> 00:09:35,356to this variable.21200:09:36,079 --> 00:09:38,079Now let us play test. Press play at the top21300:09:38,079 --> 00:09:39,693of the interface.21400:09:41,270 --> 00:09:43,270You should now be able to drive your character21500:09:43,270 --> 00:09:45,270around observing him in the scene panel.21600:09:46,502 --> 00:09:49,002You can use the arrow keys or W A S and D21700:09:49,002 --> 00:09:50,668on the keyboard.21800:09:52,593 --> 00:09:55,473Remember you can use left shift to sneak21900:09:59,177 --> 00:10:01,177and you can press X to shout.22000:10:05,420 --> 00:10:08,030As we are play testing we notice that the22100:10:08,030 --> 00:10:10,543sneaking animation seems rather slow.22200:10:11,138 --> 00:10:13,138But we can adjust this very easily.22300:10:13,138 --> 00:10:15,138Press the play button to stop testing22400:10:15,887 --> 00:10:17,887and return to the animator window.22500:10:18,870 --> 00:10:22,718Go to the base layer and select the Sneak state.22600:10:22,718 --> 00:10:25,026In the inspector set the speed22700:10:25,026 --> 00:10:28,711to something greater, let us try 1.7.22800:10:30,385 --> 00:10:33,448Now let us press play again and see the change.22900:10:34,542 --> 00:10:36,250Now if we move and hold shift23000:10:36,876 --> 00:10:38,876our sneaking is a little faster.23100:10:42,664 --> 00:10:44,081These are the kind of tweaks that you can23200:10:44,081 --> 00:10:46,081make as you test your game to improve23300:10:46,081 --> 00:10:47,431it over time.23400:10:48,111 --> 00:10:50,111In the next assignment we will make a script23500:10:50,111 --> 00:10:52,111to handle the player's health.