1
00:00:00,000 --> 00:00:02,617
プレイヤーを作成するうえで次のステップは

2
00:00:02,617 --> 00:00:04,617
動作を制御するスクリプトを作成することです。

3
00:00:05,117 --> 00:00:07,117
プレイヤーを選択して新しいスクリプトを追加し、

4
00:00:07,117 --> 00:00:09,117
Player Movement という名前にします。

5
00:00:12,738 --> 00:00:14,738
スクリプトを空にします。

6
00:00:17,033 --> 00:00:18,934
いつもどおり、パブリック変数から

7
00:00:18,934 --> 00:00:21,666
始めます。オーディオ クリップにより

8
00:00:21,666 --> 00:00:23,666
プレイヤーが叫ぶ音声を格納します。

9
00:00:23,666 --> 00:00:25,666
変数の名前を shoutingClip にします。

10
00:00:26,387 --> 00:00:28,387
Lerp 関数を使用して

11
00:00:28,387 --> 00:00:30,387
プレイヤーの方向を変更します。

12
00:00:30,735 --> 00:00:33,366
このため、スムージングを行なう変数が必要です。

13
00:00:35,763 --> 00:00:37,763
プレイヤーのアニメータの speed パラメータをセットするとき、

14
00:00:37,763 --> 00:00:41,014
Damp (減衰) を適用することにします。

15
00:00:41,014 --> 00:00:44,131
DampTime は public である float 変数として格納します。

16
00:00:45,805 --> 00:00:47,805
参照を格納するためにいくつかの

17
00:00:47,805 --> 00:00:50,962
private 変数が必要です。最初に

18
00:00:50,962 --> 00:00:52,184
アニメータ コンポーネントへの参照、、

19
00:00:53,402 --> 00:00:56,636
二つめとして、 HashIDs スクリプトへの参照を用意します。

20
00:00:58,117 --> 00:01:00,117
次に Awake 関数を使用して

21
00:01:00,117 --> 00:01:02,117
これらの参照を割り当てすることができます。

22
00:01:07,230 --> 00:01:09,230
さらに Awake 関数を使用して

23
00:01:09,230 --> 00:01:11,230
アニメータ コントローラの

24
00:01:11,230 --> 00:01:13,230
Shouting レイヤーの Weight （重みづけ）をセットできます。

25
00:01:13,730 --> 00:01:16,284
レイヤーの Weight とは、その有効度合いを示し、

26
00:01:16,284 --> 00:01:18,953
例えば値が 1 である場合、そのレイヤーの

27
00:01:18,953 --> 00:01:21,024
アニメーtションはその下にあるレイヤーすべてを

28
00:01:21,024 --> 00:01:23,024
上書きしますし、

29
00:01:23,024 --> 00:01:24,842
Base Layer であっても上書きします。

30
00:01:24,842 --> 00:01:26,842
アバター マスク（Avatar Mask）を使用していて、

31
00:01:26,842 --> 00:01:28,411
ほとんどの時間は Shouting レイヤーは

32
00:01:28,411 --> 00:01:30,411
空のステーとにあるため、

33
00:01:30,411 --> 00:01:32,411
このレイヤーの Weight を 1 にして

34
00:01:32,411 --> 00:01:35,369
Base Layer のアニメーションを影響させないよう出来ます。

35
00:01:37,908 --> 00:01:39,616
この関数は 2 つの引数をとります。

36
00:01:39,616 --> 00:01:43,144
最初の引数はレイヤーのインデックスにあたる Integer で

37
00:01:43,144 --> 00:01:45,144
例えば Base Layer では 0 であり、

38
00:01:45,144 --> 00:01:47,144
Shouting レイヤーでは 1 です。

39
00:01:47,144 --> 00:01:49,144
二つめの引数は

40
00:01:49,144 --> 00:01:52,366
その有効度合いです。値が 1 の場合は前述のとおりです。

41
00:01:52,366 --> 00:01:54,366
プレイヤーは物理オブジェクトであるため、

42
00:01:54,366 --> 00:01:56,366
この動作については

43
00:01:56,366 --> 00:01:59,442
FixedUpdate 関数で記述します。ここで追加して下さい。

44
00:02:01,254 --> 00:02:03,254
初めにユーザからの入力を

45
00:02:03,254 --> 00:02:05,254
一時的にキャッシュしておきます。

46
00:02:05,254 --> 00:02:07,254
これにより、必要なときに

47
00:02:07,254 --> 00:02:09,006
いちいち Input 関数をコールすることなく

48
00:02:09,006 --> 00:02:11,006
使用することが出来ます。

49
00:02:16,299 --> 00:02:18,299
これでユーザ入力はできたので、その情報を使用する

50
00:02:18,299 --> 00:02:20,299
関数を作成して動作を

51
00:02:20,299 --> 00:02:22,299
管理します。

52
00:02:22,299 --> 00:02:24,299
MovementManagement という名前にして、

53
00:02:24,299 --> 00:02:26,299
これは先ほどキャッシュしたばかりの

54
00:02:26,299 --> 00:02:28,299
入力の値のパラメータを受け取ります。

55
00:02:30,387 --> 00:02:32,387
最初にここですることは

56
00:02:32,387 --> 00:02:34,928
Sneaking アニメータ パラメータをセットするために、

57
00:02:34,928 --> 00:02:36,692
この関数の引数として使用する

58
00:02:36,692 --> 00:02:38,692
Sneaking 変数を使用します。

59
00:02:39,717 --> 00:02:42,231
HashIDs スクリプトへの参照を使用して

60
00:02:42,231 --> 00:02:44,231
セットするパラメータを決定することが出来ます。

61
00:02:46,209 --> 00:02:48,209
プレイヤーが今回

62
00:02:48,209 --> 00:02:50,209
動作をするためには

63
00:02:50,209 --> 00:02:52,780
Axis 入力によりプレイヤーの方向を決定させます。

64
00:02:53,355 --> 00:02:55,355
プレイヤーはその方向に向いて

65
00:02:55,355 --> 00:02:58,178
正面に向かって走ります。

66
00:02:58,178 --> 00:02:59,940
プレイヤーの回転はスムーズに変化させつつ

67
00:02:59,940 --> 00:03:02,233
素早い動作とすることで

68
00:03:02,233 --> 00:03:03,733
レスポンスが速い印象とします。

69
00:03:04,233 --> 00:03:06,233
これを実現するため、最初に

70
00:03:06,233 --> 00:03:08,878
方向の入力があるか決定します。

71
00:03:11,661 --> 00:03:13,661
方向の入力により定義される方向へ

72
00:03:13,661 --> 00:03:15,899
プレイヤーを回転させるため

73
00:03:15,899 --> 00:03:17,899
ハンドリングを行なう関数を作成します。

74
00:03:17,899 --> 00:03:19,899
この関数には、水平 (Horizontal) 方向と

75
00:03:19,899 --> 00:03:22,343
垂直 (Vertical) 方向の変数が

76
00:03:22,343 --> 00:03:24,343
ターゲット回転を決定するために必要です。

77
00:03:26,017 --> 00:03:27,658
プレイヤーを向かせたい新しい方向を

78
00:03:27,658 --> 00:03:29,658
ベクトルとすると、

79
00:03:29,658 --> 00:03:32,174
それは Horizontal 入力の

80
00:03:32,174 --> 00:03:35,204
X 方向の値および

81
00:03:35,204 --> 00:03:37,204
Vertical 入力の

82
00:03:37,204 --> 00:03:38,570
Z 方向の値により表現することができます。

83
00:03:39,070 --> 00:03:41,891
このため、もし Horizontal および Vertical 入力の値がともに 1 である場合、

84
00:03:41,891 --> 00:03:44,492
すなわち上方向と右方向が押下されている場合

85
00:03:44,492 --> 00:03:46,492
プレイヤーは X および Z 方向の

86
00:03:46,492 --> 00:03:48,492
正の向きに向かうはずです。

87
00:03:48,492 --> 00:03:50,492
向かわせたい方向を

88
00:03:50,492 --> 00:03:52,492
Vector3 として格納します。

89
00:04:01,197 --> 00:04:03,029
次にこのベクトルを

90
00:04:03,029 --> 00:04:05,029
クォータニオン (Quaternion) に変換して、

91
00:04:05,029 --> 00:04:07,029
プレイヤーの回転がその方向に向くように調整します。

92
00:04:07,029 --> 00:04:10,023
クォータニオンとは回転を格納する方法のひとつです。

93
00:04:10,023 --> 00:04:12,678
これはより上級者向けのトピックですが、

94
00:04:12,678 --> 00:04:14,967
回転をキャラクターに割り当てるために必要なことです。

95
00:04:15,440 --> 00:04:17,440
Unity にはビルトインの関数があり、

96
00:04:17,440 --> 00:04:19,622
この処理を簡単に行なうことが出来て、

97
00:04:19,622 --> 00:04:21,098
LookRotation と呼ばれています。

98
00:04:21,098 --> 00:04:23,573
LookRotation は Quaternion クラスの

99
00:04:23,573 --> 00:04:26,852
static 関数です。二つの引数が必要です。

100
00:04:26,852 --> 00:04:28,852
最初の引数はクォータニオンに変換した

101
00:04:28,852 --> 00:04:31,585
方向を示すものであり、

102
00:04:31,585 --> 00:04:33,585
二つめの引数は上 (Up) 方向を示す

103
00:04:33,585 --> 00:04:35,585
ベクトルです。

104
00:04:36,886 --> 00:04:38,886
プレイヤーが向きを変えるのにあわせて

105
00:04:38,886 --> 00:04:41,922
回転をスムージングします。このためには

106
00:04:41,922 --> 00:04:44,603
Lerp を使用して、ターゲットとする回転の方向にむけて

107
00:04:44,603 --> 00:04:46,603
現在の回転の方向から

108
00:04:46,603 --> 00:04:49,128
わずかづつ変化させるようにします。

109
00:04:50,609 --> 00:04:53,208
rigidbody.rotation を

110
00:04:53,208 --> 00:04:55,208
現在の回転の方向として使用して、

111
00:04:58,470 --> 00:05:00,470
キー入力を

112
00:05:00,470 --> 00:05:02,470
ターゲットとする回転の方向として使用して Lerp を行い、

113
00:05:02,470 --> 00:05:05,536
turnSmoothing （回転スムージング）変数により

114
00:05:05,536 --> 00:05:08,380
これがどのぐらいの時間かかるをかを制御します。

115
00:05:08,380 --> 00:05:10,853
次に rigidbody の rotation に

116
00:05:10,853 --> 00:05:12,853
新しい回転をセットするために

117
00:05:12,853 --> 00:05:15,548
rigidbody.MoveRotation を使用します。

118
00:05:16,997 --> 00:05:18,997
これで Rotating 関数は完成したので、

119
00:05:18,997 --> 00:05:20,997
MovementManagement 関数に戻って

120
00:05:20,997 --> 00:05:22,997
コールを行ないます。

121
00:05:25,348 --> 00:05:27,348
この if 文の中で

122
00:05:27,348 --> 00:05:29,348
ユーザ入力を受け取れば

123
00:05:29,848 --> 00:05:31,695
プレイヤーを動作させるべきことが分かっています。

124
00:05:31,695 --> 00:05:33,695
このためアニメータの speed 変数をセット

125
00:05:33,695 --> 00:05:36,610
します。値を

126
00:05:36,610 --> 00:05:39,927
5.5 にセットして、

127
00:05:39,927 --> 00:05:43,026
ブレンドツリーにより決定されるスピードとおおよそ同じにします。

128
00:05:44,590 --> 00:05:46,590
パラメータをセットするときに

129
00:05:46,590 --> 00:05:48,590
Damp を適用するようにします。これにより

130
00:05:48,590 --> 00:05:50,590
レスポンスは速くスムーズな遷移が

131
00:05:50,590 --> 00:05:52,590
実現できます。

132
00:05:55,369 --> 00:05:57,369
しかし、入力を受け取ってない場合

133
00:05:57,369 --> 00:05:59,369
speed を 0 にセットする必要があります。

134
00:06:02,590 --> 00:06:05,337
MovementManagement 関数が完成しているので、

135
00:06:05,337 --> 00:06:08,705
FixedUpdate 関数の中からそれをコールするようにします。

136
00:06:10,752 --> 00:06:13,414
プレイヤーにはオーディオ、すなわち

137
00:06:13,414 --> 00:06:16,204
足音 (Footsteps)、および叫ぶ (Shout) ときの音声を追加する必要があります。

138
00:06:16,204 --> 00:06:19,077
このため、AudioManagement 関数を作成します。

139
00:06:20,116 --> 00:06:22,116
足音のオーディオクリップは

140
00:06:22,116 --> 00:06:24,116
ステートが Locomotion （移動中）であるときのみ再生する必要があります。

141
00:06:24,616 --> 00:06:26,616
最初にチェックすべきなのは

142
00:06:26,616 --> 00:06:28,616
プレイヤーの現在のステートが何であるか、です。

143
00:06:28,616 --> 00:06:31,143
Name ハッシュを使用して、

144
00:06:31,143 --> 00:06:34,252
すでに HashIDs スクリプトで格納した適切なステートを活用します。

145
00:06:34,252 --> 00:06:37,161
ここでは GetCurrentAnimatorStateInfo を使用して

146
00:06:37,161 --> 00:06:39,423
値を 0 にして、Base Layer にあるという

147
00:06:39,423 --> 00:06:41,865
ステートに現在いることが確認できます。

148
00:06:43,926 --> 00:06:45,926
クリップの再生をする際に、

149
00:06:45,926 --> 00:06:47,926
すでに再生中でないことは確認する必要があります。

150
00:06:52,597 --> 00:06:54,597
しかし、 Locomotion ステートにでなくなった場合に、

151
00:06:54,597 --> 00:06:56,597
クリップが終わるまで再生し続けることは

152
00:06:56,597 --> 00:06:59,245
さけたいため

153
00:06:59,245 --> 00:07:01,245
ここで停止をします。

154
00:07:03,016 --> 00:07:05,460
オーディオ ソース (Audio Source) コンポーネントを使用して

155
00:07:05,460 --> 00:07:07,460
プレイヤーの足音を管理したいため

156
00:07:07,460 --> 00:07:10,167
PlayClipAtPoint 関数を使用して

157
00:07:10,167 --> 00:07:12,626
叫び（Shout）を管理します。

158
00:07:12,626 --> 00:07:14,626
この理由はオーディオ ソースはすでに足音を

159
00:07:14,626 --> 00:07:17,135
再生していて、叫びで置き換えたくない

160
00:07:17,135 --> 00:07:19,821
たｍです。叫びのオーディオクリップを再生する Condition は

161
00:07:19,821 --> 00:07:22,665
Shout が true であることです。

162
00:07:22,665 --> 00:07:25,065
PlayClipAtPoint には 2 つの引数が必要であり、

163
00:07:25,065 --> 00:07:28,169
ひとつはオーディオ クリップであり、もうひとつは位置を示す Vector3 です。

164
00:07:28,669 --> 00:07:30,669
ワールド座標空間に新しいオブジェクトを指定の位置に

165
00:07:30,669 --> 00:07:32,669
作成して

166
00:07:32,669 --> 00:07:35,424
音声を再生します。このオブジェクトは自らの破棄を行なって

167
00:07:35,424 --> 00:07:38,197
シーンから消えます。

168
00:07:39,651 --> 00:07:42,282
これで Audiomanagement 関数は完成です。

169
00:07:42,782 --> 00:07:44,782
この関数をコールするためには

170
00:07:44,782 --> 00:07:46,782
update 関数の中に配置する必要があります。

171
00:07:46,782 --> 00:07:48,782
スクリプトの中の

172
00:07:48,782 --> 00:07:50,782
FixedUpdate 関数の下に配置します。ここに

173
00:07:50,782 --> 00:07:52,782
Update を置く必要ありませんが、

174
00:07:52,782 --> 00:07:54,782
あとでコードを読むときに

175
00:07:54,782 --> 00:07:57,176
読みやすくなります。Update 関数は

176
00:07:57,176 --> 00:08:00,221
場所はどこでも問題はなく、あくまで好みの問題です。

177
00:08:02,599 --> 00:08:04,599
最初にすべきことは

178
00:08:04,599 --> 00:08:07,107
Attract （敵を惹きつける）ボタンの入力をキャッシュすることです。

179
00:08:09,019 --> 00:08:11,019
次にこの入力の Parse を行なって

180
00:08:11,019 --> 00:08:13,793
アニメータ コントローラのパラメータとして、

181
00:08:13,793 --> 00:08:16,602
プレイヤーが正しいアニメーションを行なうようにします。

182
00:08:17,889 --> 00:08:19,889
最後に boolean である Shout の Parse を行なって

183
00:08:19,889 --> 00:08:21,723
AudioMangement 関数にして、

184
00:08:21,723 --> 00:08:23,723
叫び (Shout) が再生されるトリガーとなるように

185
00:08:23,723 --> 00:08:26,585
関数のコールを行い案巣。

186
00:08:28,770 --> 00:08:31,648
ここでスクリプトを保存し、エディタに戻ります。

187
00:08:32,894 --> 00:08:34,894
プレイヤーの動作テストを行なう準備ができました。

188
00:08:34,894 --> 00:08:36,894
その前に Scripts フォルダの整頓を

189
00:08:36,894 --> 00:08:38,894
行ないます。

190
00:08:38,894 --> 00:08:41,299
新規のサブフォルダを Scripts フォルダの中に作成し、

191
00:08:41,299 --> 00:08:43,299
Player と名前をつけます。 プロジェクトパネルから

192
00:08:43,299 --> 00:08:44,922
Scripts フォルダを選択して

193
00:08:44,922 --> 00:08:46,560
Create - Folder を選択します。

194
00:08:47,160 --> 00:08:50,264
Player と名前をつけます。 Assets フォルダを選択して

195
00:08:50,264 --> 00:08:52,264
PlayerMovement を

196
00:08:52,264 --> 00:08:54,264
Player フォルダにドラッグします。

197
00:08:55,026 --> 00:08:58,278
忘れずにシーンの保存およびプロジェクトの保存をここで行ないます。

198
00:09:02,618 --> 00:09:04,618
いよいよプレイヤーの動作テストを行ないます。

199
00:09:05,546 --> 00:09:07,339
シーンビューの中でプレイヤーから少しズームアウトして

200
00:09:07,339 --> 00:09:10,801
ビューを少し回転して

201
00:09:10,801 --> 00:09:12,411
後ほど配置するカメラの位置と

202
00:09:12,411 --> 00:09:13,921
合うようにしておきます。

203
00:09:14,421 --> 00:09:16,421
テストを行なう前に Shouting オーディオクリップを

204
00:09:16,421 --> 00:09:19,370
PlayerMovement スクリプトに割り当てる必要があります。

205
00:09:19,370 --> 00:09:22,088
プレイヤーである character char_ethan を

206
00:09:22,088 --> 00:09:24,088
Hierarchy の中で再び選択します。

207
00:09:24,588 --> 00:09:26,588
PlayerMovement スクリプトには

208
00:09:26,588 --> 00:09:29,356
Shouting オーディオ クリップの隣に None (Audio Clip) と書かれてます。

209
00:09:29,356 --> 00:09:31,883
Audio フォルダから

210
00:09:31,883 --> 00:09:33,883
PlayerAttractAttention をこの変数の上に

211
00:09:33,883 --> 00:09:35,356
ドラッグします。

212
00:09:36,079 --> 00:09:38,079
これでテスト再生を行ないます。 

213
00:09:38,079 --> 00:09:39,693
画面の上部にある Play を押下します。

214
00:09:41,270 --> 00:09:43,270
これでキャラクターを動き回せることが

215
00:09:43,270 --> 00:09:45,270
シーンパネルの中で確認できます。

216
00:09:46,502 --> 00:09:49,002
キーボード上の矢印キーまたは WASD キーを

217
00:09:49,002 --> 00:09:50,668
使用できます。

218
00:09:52,593 --> 00:09:55,473
左シフトキーを押下して忍び足 (Sneak) をしたり、

219
00:09:59,177 --> 00:10:01,177
X キーを押下して叫ぶ (Shout) ことが出来ます。

220
00:10:05,420 --> 00:10:08,030
テスト再生するときに

221
00:10:08,030 --> 00:10:10,543
Sneak アニメーションがやや遅いことに気付くはずです。

222
00:10:11,138 --> 00:10:13,138
これを修正することは簡単です。

223
00:10:13,138 --> 00:10:15,138
Play ボタンを再度押して、テスト再生を停止して

224
00:10:15,887 --> 00:10:17,887
Animator ウィンドウに戻ります。

225
00:10:18,870 --> 00:10:22,718
Base レイヤーに移動して Sneak ステートを選択します。

226
00:10:22,718 --> 00:10:25,026
インスペクトの中で Speed を

227
00:10:25,026 --> 00:10:28,711
より大きい値とします。例えば 1.7 にします。

228
00:10:30,385 --> 00:10:33,448
これで再度 Play ボタンを押下して、変更を確認します。

229
00:10:34,542 --> 00:10:36,250
これで移動して Shift キーを押下すると

230
00:10:36,876 --> 00:10:38,876
Sneak はより速くなります。

231
00:10:42,664 --> 00:10:44,081
こういった調整によって

232
00:10:44,081 --> 00:10:46,081
ゲームのテスト再生をしながら

233
00:10:46,081 --> 00:10:47,431
時間をかけて改善することが出来ます。

234
00:10:48,111 --> 00:10:50,111
次の課題ではプレイヤーの生命力（Health)の

235
00:10:50,111 --> 00:10:52,111
ハンドリングをするスクリプトを作成します。
(翻訳:gamesonytablet)
