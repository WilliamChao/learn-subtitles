1
00:00:00,000 --> 00:00:02,635
アニメータを使用するときは、ステートおよびパラメータを参照するときに

2
00:00:02,635 --> 00:00:05,138
二つのオプションがあります。

3
00:00:05,138 --> 00:00:07,138
それらの名前を、

4
00:00:07,138 --> 00:00:09,138
文字列にて参照するか、

5
00:00:09,138 --> 00:00:11,652
名前を integer として格納するハッシュにて参照する方法です。

6
00:00:11,652 --> 00:00:13,964
ハッシュ識別子を参照するほうが

7
00:00:13,964 --> 00:00:16,668
より効果的であり、ミスの減少につながります。

8
00:00:16,668 --> 00:00:18,668
このため、短いスクリプトを作成して

9
00:00:18,668 --> 00:00:20,668
ハッシュを格納して

10
00:00:20,668 --> 00:00:22,668
クラス変数を参照するようにするほうが

11
00:00:22,668 --> 00:00:24,668
文字列を毎回書く必要がありません。

12
00:00:24,668 --> 00:00:26,668
このスクリプトを使用して

13
00:00:26,668 --> 00:00:28,668
後ほど作成するプレイヤーおよび敵の

14
00:00:28,668 --> 00:00:31,099
ハッシュ識別子を格納します。

15
00:00:31,099 --> 00:00:32,727
このスクリプトはタグ文字列を参照するのに

16
00:00:32,727 --> 00:00:34,727
作成した Tag スクリプトと多くの共通点が

17
00:00:34,727 --> 00:00:36,727
あります。一方で明確な違いも

18
00:00:36,727 --> 00:00:38,727
いくつかあります。重要な例としては

19
00:00:38,727 --> 00:00:40,727
Tag スクリプトは使用するにあたり

20
00:00:40,727 --> 00:00:42,727
ゲームオブジェクトにアタッチする必要が

21
00:00:42,727 --> 00:00:45,380
ありません。これから記述する HashID スクリプトは

22
00:00:45,380 --> 00:00:47,918
アタッチする必要があります。これは広い範囲から

23
00:00:47,918 --> 00:00:49,918
アクセスする必要のあるデータであるため

24
00:00:49,918 --> 00:00:51,918
すでにあるゲームコントローラオブジェクト上に

25
00:00:51,918 --> 00:00:53,918
スクリプトを作成します。Hierarchy 上から

26
00:00:53,918 --> 00:00:56,208
ゲームコントローラを選択して、

27
00:00:56,208 --> 00:00:58,499
Add Component - New Script をクリックします。

28
00:00:58,499 --> 00:01:01,599
次のとおり、スクリプトの名前を HashID として

29
00:01:03,080 --> 00:01:04,508
アイコンをダブルクリックして編集のために

30
00:01:04,508 --> 00:01:08,202
開きます。スクリプトを記述する前に内容をクリアします。

31
00:01:08,923 --> 00:01:11,426
このスクリプトには public の integer 変数を

32
00:01:11,426 --> 00:01:13,816
格納したいハッシュごとに必要です。

33
00:01:14,478 --> 00:01:15,942
プレイヤーが使用するステートから

34
00:01:15,942 --> 00:01:18,779
始めます。良いネーミング標準をもつことは

35
00:01:18,779 --> 00:01:20,779
重要であり、どのステートまたはパラメータを

36
00:01:20,779 --> 00:01:22,779
参照しているか簡単に識別できるように

37
00:01:22,779 --> 00:01:24,779
します。ルールとしては

38
00:01:24,779 --> 00:01:26,779
ステートまたはパラメータの

39
00:01:26,779 --> 00:01:28,779
名前の後に

40
00:01:28,779 --> 00:01:30,653
ステートであれば State として

41
00:01:30,653 --> 00:01:33,054
もしパラメータであればパラメータの種類をつけます。

42
00:01:33,054 --> 00:01:35,054
そこで始めるにあたり、

43
00:01:35,054 --> 00:01:37,054
Dying （死ぬ）ステートを作成します。

44
00:01:37,927 --> 00:01:40,735
dyingState という public である integer を作成します。

45
00:01:41,359 --> 00:01:43,320
この変数を作成したので、次は

46
00:01:43,320 --> 00:01:45,320
Awake 関数の中に配置する必要があります。

47
00:01:45,320 --> 00:01:46,579
このときに追加して下さい。

48
00:01:47,120 --> 00:01:48,899
これから使用する関数は

49
00:01:48,899 --> 00:01:51,548
Animator クラスの static 関数です。

50
00:01:51,548 --> 00:01:53,548
これが意味することは

51
00:01:53,548 --> 00:01:55,548
関数を Animator クラスのインスタンスからではなく、

52
00:01:55,548 --> 00:01:57,548
クラスそのものからコールできるということです。

53
00:01:58,048 --> 00:02:01,279
StringToHash 関数で

54
00:02:01,279 --> 00:02:03,279
パラメータとして string 変数を引数とします。

55
00:02:05,353 --> 00:02:07,353
ステートを string により参照するには

56
00:02:07,353 --> 00:02:09,353
Base Layer にいる必要があり、

57
00:02:09,853 --> 00:02:12,771
そこからステートはドット記号によりアクセスできます。

58
00:02:13,361 --> 00:02:16,231
みてのとおり、 Base Layer.Dying により

59
00:02:16,231 --> 00:02:18,231
このステートを参照できます。

60
00:02:18,231 --> 00:02:20,589
Base Layer でエディタを参照すると分かるとおり、

61
00:02:20,589 --> 00:02:24,451
Dying ステートがあります。

62
00:02:25,614 --> 00:02:27,614
このコードはレイヤーそのものの

63
00:02:27,614 --> 00:02:30,251
string 名を参照しています。このため

64
00:02:30,251 --> 00:02:32,251
Base Layer の名前を変更している場合、

65
00:02:32,251 --> 00:02:34,587
Base Space レイヤーでなく、その特定のレイヤーを

66
00:02:34,587 --> 00:02:36,587
参照すべきです。このプロセスは

67
00:02:36,587 --> 00:02:39,184
パラメータでも共通点が多くあります。次に

68
00:02:39,184 --> 00:02:40,915
プレイヤーのために Dead の boolean パラメータを作成

69
00:02:40,915 --> 00:02:42,570
します。

70
00:02:43,222 --> 00:02:45,222
ネーミングルールを使用して

71
00:02:45,222 --> 00:02:47,222
deadBool と名前をつけるべきです。

72
00:02:48,689 --> 00:02:50,995
関数コールはここでも同じです。

73
00:02:50,995 --> 00:02:52,995
しかしステートを参照していないため

74
00:02:52,995 --> 00:02:55,831
Base Layer と名前の前につける必要がありません。

75
00:02:55,831 --> 00:02:57,831
パラメータの名前だけが必要です。

76
00:02:58,593 --> 00:02:59,563
このため 

77
00:02:59,563 --> 00:03:04,063
deadBool = Animator.StringToHash として、

78
00:03:04,063 --> 00:03:06,580
そして文字列として Dead を使用します。

79
00:03:06,580 --> 00:03:08,580
これはアニメータ コントローラで

80
00:03:08,580 --> 00:03:10,580
引数を参照します。

81
00:03:17,365 --> 00:03:19,045
次にアニメータの残りの参照を

82
00:03:19,045 --> 00:03:20,865
完成させていきます。

83
00:03:20,865 --> 00:03:22,865
全て完成したものをみるため

84
00:03:22,865 --> 00:03:24,865
早送りします。ここで全て完成したら

85
00:03:24,865 --> 00:03:26,865
ビデオをポーズして

86
00:03:26,865 --> 00:03:28,865
自身のスクリプトの中にコピーして下さい。

87
00:03:32,666 --> 00:03:34,666
まだ参照はすべて完了していません。

88
00:03:34,666 --> 00:03:36,666
ビデオをポーズして、

89
00:03:36,666 --> 00:03:39,383
自身のスクリプトがこれと同じことを確認して下さい。

90
00:03:39,383 --> 00:03:41,989
スクリプトを保存してエディタに戻ります。

91
00:03:43,085 --> 00:03:45,085
Game Controller ゲームオブジェクトは

92
00:03:45,085 --> 00:03:47,085
このスクリプトを追加したことにより変更されています。

93
00:03:47,085 --> 00:03:48,656
このオブジェクトはプロジェクトにプレハブとして保存

94
00:03:48,656 --> 00:03:50,656
されます。上で Apply をクリックしたことを

95
00:03:50,656 --> 00:03:52,931
確認すれば

96
00:03:52,931 --> 00:03:54,931
プレハブに変更が反映されます。

97
00:03:55,983 --> 00:03:57,983
作業を完了させるために、スクリプトを

98
00:03:57,983 --> 00:03:59,983
Scripts フォルダの中の GameController サブフォルダ

99
00:03:59,983 --> 00:04:01,400
で整頓します。

100
00:04:01,900 --> 00:04:04,305
Scripts フォルダを開いて

101
00:04:04,305 --> 00:04:06,305
HashID を GameController

102
00:04:06,305 --> 00:04:08,305
Scripts フォルダに保存します。

103
00:04:08,805 --> 00:04:10,805
忘れずにシーンを保存して、

104
00:04:10,805 --> 00:04:12,805
プロジェクトを保存して下さい。

105
00:04:15,253 --> 00:04:17,253
次の課題では Player Movement スクリプトの作成へと

106
00:04:17,253 --> 00:04:19,253
進みます。
(翻訳:gamesonytablet)
