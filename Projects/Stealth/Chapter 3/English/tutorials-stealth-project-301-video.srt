100:00:00,000 --> 00:00:01,911In this assignment we will be dealing with200:00:01,911 --> 00:00:03,911the way the camera moves. In order for300:00:03,911 --> 00:00:05,771the controls to work correctly,400:00:05,771 --> 00:00:07,771the camera will need to be mainly pointing500:00:07,771 --> 00:00:09,771in the positive world Z axis.600:00:10,271 --> 00:00:11,804This means that when the user presses the700:00:11,804 --> 00:00:14,179up key, making the player move positively800:00:14,179 --> 00:00:16,179in the Z axis, this will translate900:00:16,179 --> 00:00:18,179to an approximate up direction of movement1000:00:18,179 --> 00:00:20,179on screen. We are also going to point the1100:00:20,179 --> 00:00:22,179camera slightly negatively down the X1200:00:22,179 --> 00:00:23,871and Y axes.1300:00:23,871 --> 00:00:25,871This should not harm the feel of the controls1400:00:25,871 --> 00:00:27,871unless we point the camera too much in1500:00:27,871 --> 00:00:29,871either direction. To get a view that we're1600:00:29,871 --> 00:00:31,871happy with, position the scene camera1700:00:31,871 --> 00:00:34,288looking at the player as the main camera should do.1800:00:35,075 --> 00:00:37,075Something like this.1900:00:39,674 --> 00:00:41,454Once you have done this highlight2000:00:41,454 --> 00:00:44,699camera_main and from the game object menu2100:00:44,699 --> 00:00:46,699choose Align With View.2200:00:47,337 --> 00:00:49,337You should now see in the game view that2300:00:49,337 --> 00:00:50,945this matches our scene view camera.2400:00:50,945 --> 00:00:52,945You can now move the scene view camera to2500:00:52,945 --> 00:00:54,153wherever you want.2600:00:54,860 --> 00:00:56,860Now that our camera is aligned, let us 2700:00:56,860 --> 00:00:58,860make the script to control it's movement.2800:00:58,860 --> 00:01:01,988Add a new script component to camera_main2900:01:02,488 --> 00:01:04,488and call it CameraMovement.3000:01:07,046 --> 00:01:09,046Double click the icon for editing and3100:01:09,046 --> 00:01:11,046then clear the script.3200:01:15,455 --> 00:01:17,455We will only need one public variable3300:01:17,455 --> 00:01:19,858in this class. A float that will affect3400:01:19,858 --> 00:01:21,858the smoothness of the camera's movement.3500:01:23,670 --> 00:01:25,670As for private variables, firstly we3600:01:25,670 --> 00:01:27,670need a reference to the player's transform3700:01:27,670 --> 00:01:29,670so that we know it's position.3800:01:31,786 --> 00:01:34,130We need a few more private variables.3900:01:34,130 --> 00:01:36,130So that it is easy to tweak the position4000:01:36,130 --> 00:01:37,838that the camera tracks the player from4100:01:37,838 --> 00:01:39,379we are going to store the position of the4200:01:39,379 --> 00:01:41,656camera relative to the player.4300:01:41,656 --> 00:01:43,656We need to store this in a vector3.4400:01:44,764 --> 00:01:46,666When the player moves behind an obstacle4500:01:46,666 --> 00:01:48,666we want the camera to pan upwards so that 4600:01:48,666 --> 00:01:50,666we can still see the player, thus we4700:01:50,666 --> 00:01:52,404will be creating more positions for the4800:01:52,404 --> 00:01:54,154camera to potentially be in.4900:01:54,573 --> 00:01:56,337To make sure that these other positions 5000:01:56,337 --> 00:01:58,337are the same distance away from the player5100:01:58,337 --> 00:02:00,337we will need to use the magnitude of the5200:02:00,337 --> 00:02:02,017relative position vector.5300:02:02,561 --> 00:02:04,561Rather than calculate this every frame,5400:02:04,561 --> 00:02:06,561which is expensive, we will store this5500:02:06,561 --> 00:02:09,298magnitude inside a float variable.5600:02:10,539 --> 00:02:12,192Once we have calculated the new position5700:02:12,192 --> 00:02:14,192for the camera to move to we will need5800:02:14,192 --> 00:02:16,192to store it so that we can lerp between5900:02:16,192 --> 00:02:17,693the camera's current position and6000:02:17,693 --> 00:02:19,693this new position.6100:02:21,436 --> 00:02:23,436Now we can use the awake function to6200:02:23,436 --> 00:02:25,798setup our references. First we need the6300:02:25,798 --> 00:02:27,798reference to the player.6400:02:31,613 --> 00:02:32,973The relative position of the camera from6500:02:32,973 --> 00:02:34,973the player is the camera's position6600:02:34,973 --> 00:02:36,973minus the player's position.6700:02:39,725 --> 00:02:41,725For the relative positions magnitude,6800:02:41,725 --> 00:02:43,725the distance of the camera from the player,6900:02:43,725 --> 00:02:45,725we are going to make a slight adjustment,7000:02:45,725 --> 00:02:47,725reducing it by a small amount.7100:02:47,725 --> 00:02:49,725This is because the player's position is7200:02:49,725 --> 00:02:51,949at his feet, thus when we want to raycast7300:02:51,949 --> 00:02:53,949to the player to see if anything is in7400:02:53,949 --> 00:02:55,949the way we will hit the ground if we7500:02:55,949 --> 00:02:57,949do not reduce it slightly.7600:02:59,167 --> 00:03:01,167For the camera we will be using the fixed7700:03:01,167 --> 00:03:03,922update function to update it's position.7800:03:03,922 --> 00:03:05,922This is because although it is not a7900:03:05,922 --> 00:03:07,686physics object it will be following a 8000:03:07,686 --> 00:03:09,686physics object. In order to get the movement8100:03:09,686 --> 00:03:11,686as smooth as possible, both the updates8200:03:11,686 --> 00:03:14,372will need to happen at the same time.8300:03:15,898 --> 00:03:17,898Now we need to store all of the potential 8400:03:17,898 --> 00:03:19,898positions of the camera. We will start8500:03:19,898 --> 00:03:21,898off with the standard position of the camera,8600:03:21,898 --> 00:03:23,898which is just the player's position8700:03:23,898 --> 00:03:25,898plus the relative camera position.8800:03:29,837 --> 00:03:31,837Next we store the position of the camera8900:03:31,837 --> 00:03:34,114when it is looking directly down on the player.9000:03:34,627 --> 00:03:36,627This is the position of the player, plus9100:03:36,627 --> 00:03:39,207the magnitude of the relative camera position9200:03:39,207 --> 00:03:41,207in a direct line upwards.9300:03:46,113 --> 00:03:48,113Now that we have the standard position9400:03:48,113 --> 00:03:49,337of the camera and the position of it9500:03:49,337 --> 00:03:51,337directly above the player we need a few9600:03:51,337 --> 00:03:52,964positions in between.9700:03:53,409 --> 00:03:56,115We will organise these positions in to array.9800:03:56,615 --> 00:03:58,296This will make looping through them to9900:03:58,296 --> 00:03:59,605check which position the camera should10000:03:59,605 --> 00:04:01,174choose much easier.10100:04:01,663 --> 00:04:03,663If we have the standard position, the above10200:04:03,663 --> 00:04:06,406position, and three positions in between10300:04:06,406 --> 00:04:09,176then we will need an array of five vector3s.10400:04:09,676 --> 00:04:11,676These will be points at which we check if10500:04:11,676 --> 00:04:13,676the camera can see the player, so we will10600:04:13,676 --> 00:04:15,676call the array checkPoints.10700:04:18,441 --> 00:04:20,441The first of the positions we want to check10800:04:20,441 --> 00:04:22,441is the standard position.10900:04:25,289 --> 00:04:27,289To find the positions between the standard11000:04:27,289 --> 00:04:29,289position and the above position we are11100:04:29,289 --> 00:04:31,289going to use the lerp function in a11200:04:31,289 --> 00:04:32,609slightly different way than you might11300:04:32,609 --> 00:04:33,938have seen before.11400:04:34,438 --> 00:04:36,438What the lerp function does is returns a11500:04:36,438 --> 00:04:38,438value which is a percentage between the11600:04:38,438 --> 00:04:40,158two values it is given.11700:04:40,158 --> 00:04:42,158At which point between the two values11800:04:42,158 --> 00:04:44,158it returns is dependent on the11900:04:44,158 --> 00:04:45,198third parameter.12000:04:45,698 --> 00:04:48,488At 0 it will return the first value,12100:04:48,488 --> 00:04:51,151at 1 it will return the second value.12200:04:51,844 --> 00:04:53,844If you have a value between 0 and 112300:04:53,844 --> 00:04:56,424then lerp will return a value some proportion12400:04:56,424 --> 00:04:58,424of the way between those two values.12500:04:59,007 --> 00:05:01,007For example, given two vector3s12600:05:01,007 --> 00:05:04,211and a third parameter of 0.512700:05:04,211 --> 00:05:06,211lerp will return a vector3 half way12800:05:06,211 --> 00:05:07,359between the two.12900:05:07,859 --> 00:05:09,553We are going to use this method to find13000:05:09,553 --> 00:05:13,911positions 25%, 50% and 75%13100:05:13,911 --> 00:05:15,911of the way between the standard position13200:05:15,911 --> 00:05:17,911and the above position.13300:05:31,615 --> 00:05:33,615The last position in our array is the13400:05:33,615 --> 00:05:35,062above position.13500:05:37,054 --> 00:05:39,054Having found all the points at which we want13600:05:39,054 --> 00:05:41,054to check if the camera can see13700:05:41,054 --> 00:05:43,054now we can loop through them to see13800:05:43,054 --> 00:05:44,460which one works.13900:05:47,391 --> 00:05:49,197We will make a function that checks these14000:05:49,197 --> 00:05:51,711positions and sets the new Pos variable14100:05:51,711 --> 00:05:53,311when it finds one that the camera can14200:05:53,311 --> 00:05:54,961see the player from.14300:05:54,961 --> 00:05:56,961This function should return true14400:05:56,961 --> 00:05:58,961when the camera can see the player.14500:06:00,718 --> 00:06:02,718We will be using a raycast from the14600:06:02,718 --> 00:06:04,718position we are checking and then seeing14700:06:04,718 --> 00:06:06,952if we have hit the player or something else.14800:06:06,952 --> 00:06:08,952So the first thing we want to do is create14900:06:08,952 --> 00:06:10,952a raycast hit so that we have15000:06:10,952 --> 00:06:12,340something to check.15100:06:13,908 --> 00:06:15,908Now we perform the raycast and see if15200:06:15,908 --> 00:06:18,448it hits. We want the raycast to start15300:06:18,448 --> 00:06:20,448at the position we are checking and head15400:06:20,448 --> 00:06:22,448in the direction of the player. We want15500:06:22,448 --> 00:06:24,448to get the information from our raycast hit15600:06:24,448 --> 00:06:26,448and we want the length of the raycast15700:06:26,448 --> 00:06:28,036to be the distance of the player15800:06:28,036 --> 00:06:29,285from the camera.15900:06:32,893 --> 00:06:34,893Given that the raycast has hit something16000:06:34,893 --> 00:06:36,893we want to now check if the transform16100:06:36,893 --> 00:06:38,893of the thing that we hit is not the16200:06:38,893 --> 00:06:40,893player's transform.16300:06:42,015 --> 00:06:44,015If it is not the player that we have hit16400:06:44,015 --> 00:06:46,015then we cannot use this position16500:06:46,015 --> 00:06:48,446so we return false from this function.16600:06:48,902 --> 00:06:50,902If we did not hit anything with our raycast16700:06:50,902 --> 00:06:53,510or we did hit something but it was the player16800:06:53,510 --> 00:06:55,274then the position that we are checking is16900:06:55,274 --> 00:06:56,888appropriate for the camera.17000:06:56,888 --> 00:06:58,888So we can set the new Pos variable and17100:06:58,888 --> 00:07:00,888return true from the function.17200:07:02,838 --> 00:07:04,383Now we need to call our function from17300:07:04,383 --> 00:07:06,383within our loop. We also need to17400:07:06,383 --> 00:07:08,383consider what happens when we have found17500:07:08,383 --> 00:07:10,907the correct position. If we leave the loop17600:07:10,907 --> 00:07:12,907to continue then it will find the last17700:07:12,907 --> 00:07:14,907position which is appropriate, which is 17800:07:14,907 --> 00:07:16,907always going to be the above position.17900:07:17,407 --> 00:07:19,407So when we find the first appropriate position18000:07:19,407 --> 00:07:21,407we need to break out of the loop.18100:07:21,407 --> 00:07:23,939We do this using the Break keyword.18200:07:24,460 --> 00:07:26,460The Break keyword simply exits whatever18300:07:26,460 --> 00:07:28,930loop it is placed in. It works in a 18400:07:28,930 --> 00:07:30,930similar way to the Return keyword in18500:07:30,930 --> 00:07:32,392that it jumps you out of the code that18600:07:32,392 --> 00:07:34,392you are in. But while Return works18700:07:34,392 --> 00:07:37,605for functions, Break works for loops.18800:07:41,406 --> 00:07:42,812Now we have a new position chosen for18900:07:42,812 --> 00:07:44,812the camera we can lerp it's position19000:07:44,812 --> 00:07:48,213between the current position and the new position.19100:07:50,398 --> 00:07:52,160Now that we have the camera moving to an19200:07:52,160 --> 00:07:54,160appropriate position we need to make sure19300:07:54,160 --> 00:07:55,776that it is actually looking in the right19400:07:55,776 --> 00:07:58,607direction too. An easy way to do this19500:07:58,607 --> 00:08:01,263would be to use transform.lookAt.19600:08:01,263 --> 00:08:02,808However, because this would point the 19700:08:02,808 --> 00:08:04,808camera at the player every fixed update19800:08:04,808 --> 00:08:06,808it would actually appear jerky19900:08:06,808 --> 00:08:08,444whenever the player is moving around 20000:08:08,444 --> 00:08:10,250because it is overly precise.20100:08:10,250 --> 00:08:12,250Instead, we want the camera to smoothly20200:08:12,250 --> 00:08:14,250catch up with the player when they move20300:08:14,250 --> 00:08:16,250so we are going to create a smoothLookAt20400:08:16,250 --> 00:08:17,777function instead.20500:08:18,819 --> 00:08:20,391We are going to use a similar method to20600:08:20,391 --> 00:08:22,391how we change the player's direction20700:08:22,391 --> 00:08:24,774based on input. We are going to get a20800:08:24,774 --> 00:08:26,774vector3 that points from the camera20900:08:26,774 --> 00:08:28,774to the player and generate a 21000:08:28,774 --> 00:08:31,483quaternion from that. This is going to be21100:08:31,483 --> 00:08:33,776the rotation that we want the camera to have.21200:08:34,218 --> 00:08:36,218Once we have that we can lerp between the21300:08:36,218 --> 00:08:38,218camera's current rotation and the proposed21400:08:38,218 --> 00:08:40,822new rotation. To start with we are going21500:08:40,822 --> 00:08:43,720to need a vector from the camera to the player.21600:08:45,546 --> 00:08:47,546Next we use the lookRotation function21700:08:47,546 --> 00:08:50,445that we came across in the PlayerMovement script.21800:08:50,445 --> 00:08:52,445This will return a quaternion to represent21900:08:52,445 --> 00:08:55,110the rotation of the object who's forward22000:08:55,110 --> 00:08:57,442vector is given. We also need to supply22100:08:57,442 --> 00:08:59,442an up vector to make sure that the camera22200:08:59,442 --> 00:09:01,442is the correct way up.22300:09:04,884 --> 00:09:06,884Finally we can lerp the camera's rotation22400:09:06,884 --> 00:09:08,995between itself and the new22500:09:08,995 --> 00:09:10,995rotation that we have generated.22600:09:16,352 --> 00:09:18,202The last thing we need to do with this script22700:09:18,202 --> 00:09:21,098is put a call to our SmoothLookAt function.22800:09:23,173 --> 00:09:25,173Now that the script is finished, save it22900:09:25,173 --> 00:09:27,173and return to the editor.23000:09:30,753 --> 00:09:33,785Again we are going to tidy up our scripts folder.23100:09:33,785 --> 00:09:35,785Open Scripts in the project panel23200:09:36,285 --> 00:09:39,436and drag PlayerHealth in to the Player folder.23300:09:40,198 --> 00:09:42,198For CameraMovement we are going to place23400:09:42,198 --> 00:09:43,745in a new subfolder.23500:09:44,505 --> 00:09:46,505Create one called LevelDynamics and23600:09:46,505 --> 00:09:48,505then drag CameraMovement script in to it23700:09:48,505 --> 00:09:50,505from the assets folder.23800:09:55,591 --> 00:09:57,591Now let us play test our scene.23900:09:57,591 --> 00:09:59,591Click the play button at the top24000:10:04,815 --> 00:10:06,664and as you can see our character now runs24100:10:06,664 --> 00:10:08,664around the level with the camera tracking him.24200:10:10,020 --> 00:10:11,632You can see that as you get close to the24300:10:11,632 --> 00:10:14,283wall the camera moves to the above position.24400:10:15,057 --> 00:10:17,057And as you move further away it tilts down24500:10:17,057 --> 00:10:19,472going to the percentage based positions24600:10:19,472 --> 00:10:21,472that are in our array.24700:10:26,295 --> 00:10:27,964Remember that now we have our character moving24800:10:27,964 --> 00:10:29,964we can also trigger the alarms.24900:10:39,953 --> 00:10:42,829Press play again to stop testing.25000:10:42,829 --> 00:10:44,829Then finally save your scene25100:10:45,329 --> 00:10:47,329and save your project.25200:10:48,810 --> 00:10:50,810In the next assignment we will add the25300:10:50,810 --> 00:10:53,680key to the level that unlocks the lift.