100:00:04,006 --> 00:00:05,903In our game we are going to have sliding200:00:05,903 --> 00:00:08,850doors that open when the player, or enemies approach.300:00:09,491 --> 00:00:11,035We are going to have the same system for400:00:11,035 --> 00:00:12,840for the lift doors at the end of the level.500:00:13,300 --> 00:00:15,300However, for the lift we only want the600:00:15,300 --> 00:00:17,300doors to open once the player has picked up700:00:17,300 --> 00:00:19,300a key. As such we need to800:00:19,300 --> 00:00:21,300store whether or not the player has picked900:00:21,300 --> 00:00:23,300up the key yet. We are going to do this1000:00:23,300 --> 00:00:25,300with a very short script. We will call it1100:00:25,300 --> 00:00:27,050PlayerInventory.1200:00:27,690 --> 00:00:29,301In the Scripts folder1300:00:30,190 --> 00:00:32,134select the folder called Player1400:00:32,580 --> 00:00:35,682and then choose Create and choose C#.1500:00:36,182 --> 00:00:38,182Name the script PlayerInventory1600:00:39,414 --> 00:00:42,207and double click it's icon to launch for editing.1700:00:44,580 --> 00:00:46,580The only purpose of this script is to store1800:00:46,580 --> 00:00:48,580whether or not the player has the key1900:00:48,580 --> 00:00:50,580and we can do this simply enough with a2000:00:50,580 --> 00:00:53,131public Boolean that we will call HasKey.2100:00:53,631 --> 00:00:55,631That's all we need for our script, so save2200:00:55,631 --> 00:00:57,631it and return to the editor.2300:00:58,131 --> 00:01:00,131We need to apply this to the player so drag2400:01:00,131 --> 00:01:03,791and drop it on to the object char_ethan.2500:01:06,543 --> 00:01:08,543And you can see it listed at the bottom2600:01:08,543 --> 00:01:10,778of the list of components in the inspector.2700:01:10,778 --> 00:01:12,778Next we need to make the key for the player2800:01:12,778 --> 00:01:14,778to pick up. We will start off by dragging2900:01:14,778 --> 00:01:16,778the key model in to the scene.3000:01:16,778 --> 00:01:19,554Open the Models folder and find3100:01:19,554 --> 00:01:21,554prop_keycard.3200:01:22,192 --> 00:01:24,192It should look like this.3300:01:25,010 --> 00:01:26,679Drag this in to the scene view3400:01:27,358 --> 00:01:32,954and then position it at (-22, 0.4, 32).3500:01:33,454 --> 00:01:35,454Then double click it's name in the hierarchy3600:01:35,454 --> 00:01:37,454to focus on it in the scene view.3700:01:37,454 --> 00:01:39,247You should see that it's within the large3800:01:39,247 --> 00:01:41,247security room in the middle of the map.3900:01:42,534 --> 00:01:44,534The keycard is going to have a spinning4000:01:44,534 --> 00:01:46,534animation. So we are going to make a simple4100:01:46,534 --> 00:01:48,534animator controller.4200:01:49,034 --> 00:01:50,797Highlight the Animators folder4300:01:50,797 --> 00:01:52,258in the project panel4400:01:53,424 --> 00:01:55,424and create a new animator controller4500:01:55,424 --> 00:01:57,424called KeycardAnimator.4600:02:00,617 --> 00:02:02,617This animator controller will only4700:02:02,617 --> 00:02:04,617need one default state.4800:02:04,617 --> 00:02:07,083The motion for this state is in an animation4900:02:07,083 --> 00:02:09,083on the keycard FBX.5000:02:09,083 --> 00:02:11,083Expand the prop_keycard FBX5100:02:11,083 --> 00:02:13,083in the Models folder5200:02:13,083 --> 00:02:14,807and you will see that there is an animation5300:02:14,807 --> 00:02:17,665called Spin. Open the animator window,5400:02:17,665 --> 00:02:19,665check that you are editing the animator's5500:02:19,665 --> 00:02:22,176KeycardAnimator controller by looking in5600:02:22,176 --> 00:02:24,176the bottom right of the window, and then drag5700:02:24,176 --> 00:02:28,369and drop Spin in to the window like this.5800:02:28,954 --> 00:02:30,954This will make it a default state and this5900:02:30,954 --> 00:02:32,954is denoted by it being highlighted in6000:02:32,954 --> 00:02:34,954orange. You will also see that the motion6100:02:34,954 --> 00:02:36,954Spin has been automatically applied.6200:02:36,954 --> 00:02:38,954That is all we need to do for the animator6300:02:38,954 --> 00:02:41,905controller so now go back to the animators6400:02:41,905 --> 00:02:44,280folder, reselect the prop_keycard6500:02:44,280 --> 00:02:46,725in the hierarchy and then drag and drop the6600:02:46,725 --> 00:02:49,719keycard animator from the project panel6700:02:49,719 --> 00:02:52,382on to the controller slot in the inspector.6800:02:53,089 --> 00:02:54,839Now we need to add a few more components6900:02:54,839 --> 00:02:57,342to our keycard. We will start with a7000:02:57,342 --> 00:02:59,342sphere collider, which we will need to make7100:02:59,342 --> 00:03:01,342function as a trigger.7200:03:01,342 --> 00:03:04,040Click Add Component, choose Physics7300:03:04,040 --> 00:03:06,040and then Sphere Collider.7400:03:06,540 --> 00:03:08,540We will increase the radius slightly,7500:03:08,540 --> 00:03:10,995make it somewhere around 0.9 or 17600:03:11,495 --> 00:03:13,369and then we will check Is Trigger to make 7700:03:13,369 --> 00:03:15,809sure that this sphere collider is a trigger.7800:03:15,809 --> 00:03:17,809This means that as soon as the player collides7900:03:17,809 --> 00:03:20,590with it we can call code to make it disappear.8000:03:20,590 --> 00:03:22,590And crucially because this is a trigger8100:03:22,590 --> 00:03:24,590the player will not bump in to the collider8200:03:24,590 --> 00:03:26,107but pass straight through it.8300:03:26,107 --> 00:03:27,827Next we are going to add a light component8400:03:27,827 --> 00:03:29,827to the keycard so as to make it more8500:03:29,827 --> 00:03:31,827apparent for the player to pick up.8600:03:31,827 --> 00:03:34,652Click Add Component. Choose Rendering,8700:03:35,428 --> 00:03:37,428and then choose Light. The type should be8800:03:37,428 --> 00:03:39,067set to Point automatically. 8900:03:39,067 --> 00:03:40,885We do not need a long range, so we will 9000:03:40,885 --> 00:03:42,885drop this down to 2.3.9100:03:45,181 --> 00:03:47,181We also need a nice blue tint to it9200:03:47,181 --> 00:03:49,181so we will change the colour. Click the colour9300:03:49,181 --> 00:03:54,018block, choose a shade of blue and then close.9400:03:54,518 --> 00:03:56,392Finally we will increase the intensity9500:03:56,392 --> 00:03:58,738a little to 2.5 to make it slightly9600:03:58,738 --> 00:04:00,365more apparent.9700:04:01,777 --> 00:04:03,777We also need a script to control the key 9800:04:03,777 --> 00:04:06,992being picked up. We will call this keyPickup9900:04:07,492 --> 00:04:09,492Click the Add Component button, choose10000:04:09,492 --> 00:04:12,593New Script and name this keyPickup.10100:04:13,702 --> 00:04:15,702Open the script for editing.10200:04:17,886 --> 00:04:19,886The first thing we need in this script is10300:04:19,886 --> 00:04:21,886a public variable to store the audio10400:04:21,886 --> 00:04:23,886clip of the key being picked up.10500:04:24,538 --> 00:04:26,261We will also need a couple of private 10600:04:26,261 --> 00:04:28,261variables to store references.10700:04:28,651 --> 00:04:30,245Firstly to the player,10800:04:31,303 --> 00:04:33,732and secondly to the PlayerInventory script10900:04:33,732 --> 00:04:35,732that we just made.11000:04:37,088 --> 00:04:39,088Next we will use the awake function to11100:04:39,088 --> 00:04:41,088setup these references.11200:04:41,712 --> 00:04:43,712We will use our Tags script as usual11300:04:43,712 --> 00:04:45,712to find the player.11400:04:46,903 --> 00:04:48,903As we now have a reference to the player11500:04:48,903 --> 00:04:50,903we can use GetComponent to find11600:04:50,903 --> 00:04:52,903the PlayerInventory script that we added11700:04:52,903 --> 00:04:55,932earlier. The only action that we need the 11800:04:55,932 --> 00:04:58,624key to perform is when the player collects it.11900:04:58,624 --> 00:05:01,338This will be done with an OnTriggerEnter function.12000:05:01,338 --> 00:05:03,338First we need to check whether the triggering12100:05:03,338 --> 00:05:06,123game object is the player. We do this by12200:05:06,123 --> 00:05:08,123checking our Other variable for a game object12300:05:08,123 --> 00:05:10,786that matches our Player variable.12400:05:12,004 --> 00:05:14,004If it is the player then the first thing we12500:05:14,004 --> 00:05:16,326want to do is play the pickup sound effect.12600:05:16,326 --> 00:05:20,297We will do this using audioSource.playClipAtPoint.12700:05:20,297 --> 00:05:22,297Remember that PlayClipAtPoint spawns12800:05:22,297 --> 00:05:24,297a new object to play our sound.12900:05:24,297 --> 00:05:26,297We are doing this instead of just playing 13000:05:26,297 --> 00:05:28,297from an audio source on the key because13100:05:28,297 --> 00:05:30,297we are going to destroy the key game object.13200:05:30,797 --> 00:05:32,797If the game object is destroyed then it13300:05:32,797 --> 00:05:34,589will not be able to play the sound.13400:05:34,589 --> 00:05:36,589As usual PlayClipAtPoint requires13500:05:36,589 --> 00:05:38,992both the audio clip and a vector313600:05:38,992 --> 00:05:41,506position. So we will inherit this from13700:05:41,506 --> 00:05:44,625the transform by saying transform.position.13800:05:44,625 --> 00:05:46,625Next we want to register that the player has13900:05:46,625 --> 00:05:49,428the key by setting the HasKey variable of14000:05:49,428 --> 00:05:51,428the PlayerInventory script to true.14100:05:52,660 --> 00:05:55,565Finally we need to destroy the key game object.14200:05:56,124 --> 00:05:58,124Because this script is attached to the key14300:05:58,124 --> 00:06:00,789we can simply say Destroy (gameObject).14400:06:01,869 --> 00:06:03,869Now the script is complete, so let us save it14500:06:03,869 --> 00:06:05,869and return to the editor.14600:06:08,662 --> 00:06:10,662Now let us drag the audio clip for picking14700:06:10,662 --> 00:06:12,662up the key on to the variable.14800:06:12,662 --> 00:06:14,828In the Audio folder, select14900:06:14,828 --> 00:06:17,740keycard_pickup and drop it on to the15000:06:17,740 --> 00:06:19,740Key Grab variable.15100:06:20,682 --> 00:06:22,682There is one final thing to do to our key15200:06:22,682 --> 00:06:24,682before we save it as a prefab and test15300:06:24,682 --> 00:06:27,807the game. In the Animator you will see that15400:06:27,807 --> 00:06:30,703Apply Root Motion is checked by default.15500:06:30,703 --> 00:06:32,703We do not want this checked because otherwise15600:06:32,703 --> 00:06:34,703the animator will reset the position of our15700:06:34,703 --> 00:06:36,481object to 0.15800:06:36,481 --> 00:06:37,893Uncheck this15900:06:38,622 --> 00:06:40,622and then drag and drop prop_keycard16000:06:40,622 --> 00:06:42,622on to the prefabs folder16100:06:42,622 --> 00:06:44,622to save it as a prefab.16200:06:44,622 --> 00:06:46,622Now let us press play and check that we16300:06:46,622 --> 00:06:48,622can pick up the key.16400:07:07,989 --> 00:07:09,865Remember to press play again to stop16500:07:09,865 --> 00:07:11,382testing the game.16600:07:12,365 --> 00:07:14,365One final finishing touch that we need16700:07:14,365 --> 00:07:16,365is to ensure that the keycard uses16800:07:16,365 --> 00:07:19,739light probes. You can see that in the scene view16900:07:19,739 --> 00:07:21,419the keycard looks kind of dark compared17000:07:21,419 --> 00:07:23,419to it's surroundings.17100:07:23,419 --> 00:07:25,419Select prop_keycard17200:07:27,342 --> 00:07:29,954then select the child object beneath it17300:07:29,954 --> 00:07:31,954and in the mesh renderer ensure that17400:07:31,954 --> 00:07:33,954Use Light Probes is checked.17500:07:35,448 --> 00:07:37,448Because this is a prefab, let us save17600:07:37,448 --> 00:07:39,448this change out to the prefab by clicking the17700:07:39,448 --> 00:07:42,312Apply button at the top of the inspector.17800:07:45,111 --> 00:07:46,875One final thing that we need to do before17900:07:46,875 --> 00:07:49,304saving is to tidy up our scripts.18000:07:49,901 --> 00:07:51,901In the Assets folder, because we created18100:07:51,901 --> 00:07:53,901keyPickup by using the Add Component18200:07:53,901 --> 00:07:55,901button we need to tidy this away.18300:07:56,553 --> 00:07:58,553So open up the Scripts folder18400:07:59,012 --> 00:08:01,012and then drop keyPickup in to the 18500:08:01,012 --> 00:08:03,012LevelDynamics folder.18600:08:05,335 --> 00:08:07,335Now let us save our scene18700:08:08,139 --> 00:08:10,139and save our project.18800:08:10,639 --> 00:08:12,639In the next assignment we will start to work18900:08:12,639 --> 00:08:14,639on the doors. Specifically the single19000:08:14,639 --> 00:08:17,353doors that will be placed around the level.