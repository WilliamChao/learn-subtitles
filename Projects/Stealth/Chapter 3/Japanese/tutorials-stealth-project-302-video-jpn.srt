1
00:00:04,006 --> 00:00:05,903
ゲームの中ではスライドするドアをつけて

2
00:00:05,903 --> 00:00:08,850
プレイヤーまたは敵が近づいたときに自動的に開きます。

3
00:00:09,491 --> 00:00:11,035
レベルの最後にある昇降エレベータのドアについても

4
00:00:11,035 --> 00:00:12,840
同じシステムを使用します。

5
00:00:13,300 --> 00:00:15,300
しかし、昇降エレベータの場合は

6
00:00:15,300 --> 00:00:17,300
プレイヤーが鍵を拾ったあとにドアが開くように

7
00:00:17,300 --> 00:00:19,300
します。このため

8
00:00:19,300 --> 00:00:21,300
プレイヤーすでに鍵を拾ったかどうかを

9
00:00:21,300 --> 00:00:23,300
格納しておく必要があります。これを実現するために

10
00:00:23,300 --> 00:00:25,300
短いスクリプトを用意します。

11
00:00:25,300 --> 00:00:27,050
PlayerInventory という名前にします。

12
00:00:27,690 --> 00:00:29,301
Scripts フォルダの中から

13
00:00:30,190 --> 00:00:32,134
Player と呼ばれるフォルダを選択して

14
00:00:32,580 --> 00:00:35,682
Create を選択し、 C# を選択します。

15
00:00:36,182 --> 00:00:38,182
スクリプトの名前を PlayerInventory とします。

16
00:00:39,414 --> 00:00:42,207
アイコンをダブル クリックして編集します。

17
00:00:44,580 --> 00:00:46,580
スクリプトのただひとつの目的は

18
00:00:46,580 --> 00:00:48,580
プレイヤーが鍵を持っているかを格納して

19
00:00:48,580 --> 00:00:50,580
public である boolean 型の HaskKey 変数により

20
00:00:50,580 --> 00:00:53,131
簡単に実現できます。

21
00:00:53,631 --> 00:00:55,631
スクリプトで必要なのはこれだけであるため、

22
00:00:55,631 --> 00:00:57,631
保存をしてエディタに戻ります。

23
00:00:58,131 --> 00:01:00,131
これをプレイヤーに適用する必要があるため

24
00:01:00,131 --> 00:01:03,791
char_ethan オブジェクト上にドラッグ＆ドロップします。

25
00:01:06,543 --> 00:01:08,543
インスペクタ上でコンポーネントの

26
00:01:08,543 --> 00:01:10,778
リストの下で確認することができます。

27
00:01:10,778 --> 00:01:12,778
次にプレイヤーが拾うキーを作成する必要が

28
00:01:12,778 --> 00:01:14,778
あります。シーン上に鍵のモデルを

29
00:01:14,778 --> 00:01:16,778
ドラッグするところから始めます。

30
00:01:16,778 --> 00:01:19,554
Models フォルダを開いて

31
00:01:19,554 --> 00:01:21,554
prop_keycard をみつけます。

32
00:01:22,192 --> 00:01:24,192
次のように表示されているはずです。

33
00:01:25,010 --> 00:01:26,679
これをシーンビューにドラッグして、

34
00:01:27,358 --> 00:01:32,954
(-22, 0.4, 32) に配置します。

35
00:01:33,454 --> 00:01:35,454
Hierarchy 上でダブルクリックして

36
00:01:35,454 --> 00:01:37,454
シーンビュー上でフォーカスします。

37
00:01:37,454 --> 00:01:39,247
マップ上の中央にある大きな

38
00:01:39,247 --> 00:01:41,247
セキュリティルームの中にあることを確認できます。

39
00:01:42,534 --> 00:01:44,534
鍵は回転アニメーション

40
00:01:44,534 --> 00:01:46,534
を持ちます。ここでは簡単な

41
00:01:46,534 --> 00:01:48,534
アニメータ コントローラを作成します。

42
00:01:49,034 --> 00:01:50,797
プロジェクトパネル上で

43
00:01:50,797 --> 00:01:52,258
Animators フォルダをハイライトして

44
00:01:53,424 --> 00:01:55,424
そして 新しい アニメータ コントローラを作成して

45
00:01:55,424 --> 00:01:57,424
KeycardAnimator と名前をつけます。

46
00:02:00,617 --> 00:02:02,617
このアニメータ コントローラには

47
00:02:02,617 --> 00:02:04,617
デフォルトのステートはひとつしかありません。

48
00:02:04,617 --> 00:02:07,083
このステートのモーションは

49
00:02:07,083 --> 00:02:09,083
prop_Keycard の FBX ファイルにあるアニメーションに含まれます。

50
00:02:09,083 --> 00:02:11,083
Models フォルダの中の

51
00:02:11,083 --> 00:02:13,083
prop_Keycard FBX を展開して

52
00:02:13,083 --> 00:02:14,807
Spin と名前のついたアニメーションがあります。

53
00:02:14,807 --> 00:02:17,665
Animator ウィンドウを開き、

54
00:02:17,665 --> 00:02:19,665
アニメータの Keycard アニメータ コントローラ

55
00:02:19,665 --> 00:02:22,176
を編集していることを確認するために

56
00:02:22,176 --> 00:02:24,176
ウィンドウの右下を確認して

57
00:02:24,176 --> 00:02:28,369
ウィンドウの中に Spin を次のようにドラッグ＆ドロップします。

58
00:02:28,954 --> 00:02:30,954
これによりデフォルト ステートが作成され

59
00:02:30,954 --> 00:02:32,954
これはオレンジ色にハイライトされることで表現されます。

60
00:02:32,954 --> 00:02:34,954
Spin モーションが自動的に適用されることを

61
00:02:34,954 --> 00:02:36,954
確認できます。

62
00:02:36,954 --> 00:02:38,954
アニメータ コントローラのためにすべきことは

63
00:02:38,954 --> 00:02:41,905
これで全てであるため Animators フォルダに戻って

64
00:02:41,905 --> 00:02:44,280
prop_Keycard を Hierarchy 上で

65
00:02:44,280 --> 00:02:46,725
再選択して Keycard アニメータをプロジェクト パネルから

66
00:02:46,725 --> 00:02:49,719
インスペクタのコントローラ スロットに

67
00:02:49,719 --> 00:02:52,382
ドラッグ＆ドロップします。

68
00:02:53,089 --> 00:02:54,839
いくつかのコンポーネントを Keycard に追加する

69
00:02:54,839 --> 00:02:57,342
必要があります。

70
00:02:57,342 --> 00:02:59,342
初めに Sphere コライダで

71
00:02:59,342 --> 00:03:01,342
トリガーとして機能させる必要があります。

72
00:03:01,342 --> 00:03:04,040
Add Component をクリックして Physics を選択して

73
00:03:04,040 --> 00:03:06,040
Sphere Collider を選択します。

74
00:03:06,540 --> 00:03:08,540
半径をわずかに増加させて、

75
00:03:08,540 --> 00:03:10,995
0.9 または 1 のあたりの値にして

76
00:03:11,495 --> 00:03:13,369
Is Trigger チェックボックスを有効にして

77
00:03:13,369 --> 00:03:15,809
Sphere コライダがトリガーとなるようにします。

78
00:03:15,809 --> 00:03:17,809
すなわち、プレイヤーが衝突した瞬間に

79
00:03:17,809 --> 00:03:20,590
消えるようためのコードをコールします。

80
00:03:20,590 --> 00:03:22,590
重要なことにこれがトリガーであるため

81
00:03:22,590 --> 00:03:24,590
プレイヤーはコライダにぶつからずに

82
00:03:24,590 --> 00:03:26,107
突き抜けます。

83
00:03:26,107 --> 00:03:27,827
次に Keycard に

84
00:03:27,827 --> 00:03:29,827
Light コンポーネントを追加して

85
00:03:29,827 --> 00:03:31,827
プレイヤーが拾うべきものということを明確にします。

86
00:03:31,827 --> 00:03:34,652
Add Component をクリックして Rendering を選択します。

87
00:03:35,428 --> 00:03:37,428
Light を選択して、type は

88
00:03:37,428 --> 00:03:39,067
自動的に Point Light にセットされます。

89
00:03:39,067 --> 00:03:40,885
大きな Range （範囲）は必要ないため、

90
00:03:40,885 --> 00:03:42,885
この値は 2.3 に下げます。

91
00:03:45,181 --> 00:03:47,181
青い発光あｇ必要であるため

92
00:03:47,181 --> 00:03:49,181
色を変更します。 色変更ボックスをクリックして

93
00:03:49,181 --> 00:03:54,018
青を選択して閉じます。

94
00:03:54,518 --> 00:03:56,392
最終的に Intensity をわずかに増加させて

95
00:03:56,392 --> 00:03:58,738
2.5 として、よりはっきりと

96
00:03:58,738 --> 00:04:00,365
させます。

97
00:04:01,777 --> 00:04:03,777
拾う鍵を制御するスクリプトが必要

98
00:04:03,777 --> 00:04:06,992
です。名前を keyPickup とします。

99
00:04:07,492 --> 00:04:09,492
Add Component ボタンをクリックして、

100
00:04:09,492 --> 00:04:12,593
New Script を選択して 名前を keyPickup とします。

101
00:04:13,702 --> 00:04:15,702
スクリプトを編集するために開きます。

102
00:04:17,886 --> 00:04:19,886
このスクリプトで最初に必要なのは

103
00:04:19,886 --> 00:04:21,886
キーを拾うときのオーディオクリップを

104
00:04:21,886 --> 00:04:23,886
格納する public 変数です。

105
00:04:24,538 --> 00:04:26,261
参照を格納するためのいくつかの

106
00:04:26,261 --> 00:04:28,261
private 変数がいくつか必要です。

107
00:04:28,651 --> 00:04:30,245
ひとつめに プレイヤーのための変数、

108
00:04:31,303 --> 00:04:33,732
ふたつめに作成したばかりの PlayerInventory スクリプトのための

109
00:04:33,732 --> 00:04:35,732
変数です。

110
00:04:37,088 --> 00:04:39,088
次に Awake 関数を使用してこれらの参照を

111
00:04:39,088 --> 00:04:41,088
セットアップできます。

112
00:04:41,712 --> 00:04:43,712
Tags スクリプトをいつもどおりに使用して

113
00:04:43,712 --> 00:04:45,712
プレイヤーをみつけます。

114
00:04:46,903 --> 00:04:48,903
プレイヤーへの参照が取得できたので

115
00:04:48,903 --> 00:04:50,903
GetComponent を使用して

116
00:04:50,903 --> 00:04:52,903
前に追加した PlayerInventory スクリプトを

117
00:04:52,903 --> 00:04:55,932
みつけることができます。鍵で

118
00:04:55,932 --> 00:04:58,624
細工が必要なのは、プレイヤーがそれを拾うときのみです。

119
00:04:58,624 --> 00:05:01,338
これは OnTriggerEnter 関数により実現します。

120
00:05:01,338 --> 00:05:03,338
最初にチェックしないといけないのはトリガーした

121
00:05:03,338 --> 00:05:06,123
ゲームオブジェクトがプレイヤーであるかどうかです。

122
00:05:06,123 --> 00:05:08,123
このためには other 変数が Player 変数と一致する

123
00:05:08,123 --> 00:05:10,786
ゲームオブジェクトであるか確認します。

124
00:05:12,004 --> 00:05:14,004
もしプレイヤーであれば、最初に行ないたいことは

125
00:05:14,004 --> 00:05:16,326
拾ったときの音声エフェクトを再生することです。

126
00:05:16,326 --> 00:05:20,297
これは AudioSource.PlayClipAtPoint を使用して実現します。

127
00:05:20,297 --> 00:05:22,297
PlayClipAtPoint は音声を再生するために

128
00:05:22,297 --> 00:05:24,297
新しいオブジェクトを生成することを覚えて下さい。

129
00:05:24,297 --> 00:05:26,297
オーディオソースから再生する代わりに

130
00:05:26,297 --> 00:05:28,297
こうする理由は、

131
00:05:28,297 --> 00:05:30,297
Key ゲームオブジェクトを破棄するためです。

132
00:05:30,797 --> 00:05:32,797
もしゲームオブジェクトを破棄すると

133
00:05:32,797 --> 00:05:34,589
音声を再生することができません。

134
00:05:34,589 --> 00:05:36,589
いつもどおりに PlayClipAtPoint は

135
00:05:36,589 --> 00:05:38,992
オーディオクリップおよび Vector3 の位置の

136
00:05:38,992 --> 00:05:41,506
両方が必要です。これを Tranform から取得するために

137
00:05:41,506 --> 00:05:44,625
tranform.position とします。

138
00:05:44,625 --> 00:05:46,625
次に鍵を持っているプレイヤーを登録するために

139
00:05:46,625 --> 00:05:49,428
PlayerInventory スクリプトの HasKey 変数を

140
00:05:49,428 --> 00:05:51,428
true にセットします。

141
00:05:52,660 --> 00:05:55,565
最後に Key ゲームオブジェクトを破棄します。

142
00:05:56,124 --> 00:05:58,124
このスクリプトは Key にアタッチされているため

143
00:05:58,124 --> 00:06:00,789
Destroy (gameObject) とすることができます。

144
00:06:01,869 --> 00:06:03,869
スクリプトは完成しているため保存を行なって

145
00:06:03,869 --> 00:06:05,869
エディタに戻ります。

146
00:06:08,662 --> 00:06:10,662
鍵を拾うオーディオクリップを

147
00:06:10,662 --> 00:06:12,662
変数の上にドラッグします。

148
00:06:12,662 --> 00:06:14,828
Audio フォルダの中から

149
00:06:14,828 --> 00:06:17,740
keycard_pickup を選択して

150
00:06:17,740 --> 00:06:19,740
Key Grab (キーを掴む) 変数の上にドラッグします。

151
00:06:20,682 --> 00:06:22,682
鍵について、プレハブとして保存して

152
00:06:22,682 --> 00:06:24,682
テスト再生する前に最後に一つやるべきことが

153
00:06:24,682 --> 00:06:27,807
あります。Animator ウィンドウの中で

154
00:06:27,807 --> 00:06:30,703
Apply Root Motion チェックボックスが出尾fルトでは有効であることが確認できます。

155
00:06:30,703 --> 00:06:32,703
これは無効とすべきで、そうしないとアニメータ

156
00:06:32,703 --> 00:06:34,703
はオブジェクトの位置を 0 に

157
00:06:34,703 --> 00:06:36,481
リセットします。

158
00:06:36,481 --> 00:06:37,893
チェックを外して

159
00:06:38,622 --> 00:06:40,622
prop_keycard を Prefabs フォルダに

160
00:06:40,622 --> 00:06:42,622
ドラッグ＆ドロップして

161
00:06:42,622 --> 00:06:44,622
プレハブとして保存します。

162
00:06:44,622 --> 00:06:46,622
次に Play を押下して

163
00:06:46,622 --> 00:06:48,622
鍵を拾えることを確認します。

164
00:07:07,989 --> 00:07:09,865
Play ボタンを再度押下して

165
00:07:09,865 --> 00:07:11,382
ゲームのテスト再生を停止します。

166
00:07:12,365 --> 00:07:14,365
最後にやるべきこととして

167
00:07:14,365 --> 00:07:16,365
鍵がライトプローブ (Light Probe) を使用することを

168
00:07:16,365 --> 00:07:19,739
確認することです。シーンビューの中で

169
00:07:19,739 --> 00:07:21,419
鍵が周囲のものと比べて暗いことが

170
00:07:21,419 --> 00:07:23,419
確認できます。

171
00:07:23,419 --> 00:07:25,419
prop_keycard を選択して

172
00:07:27,342 --> 00:07:29,954
その下にある子オブジェクトを選択して

173
00:07:29,954 --> 00:07:31,954
メッシュレンダラの中で

174
00:07:31,954 --> 00:07:33,954
Use Light Probes チェックボックスが有効であることを確認します。

175
00:07:35,448 --> 00:07:37,448
これはプレハブであるため、

176
00:07:37,448 --> 00:07:39,448
変更をプレハブに反映するため

177
00:07:39,448 --> 00:07:42,312
インスペクタ上部にある Apply ボタンをクリックします。

178
00:07:45,111 --> 00:07:46,875
最後にひとつ保存する前にやるべきことは

179
00:07:46,875 --> 00:07:49,304
Script の整頓です。

180
00:07:49,901 --> 00:07:51,901
Assets フォルダの中で

181
00:07:51,901 --> 00:07:53,901
keyPickup を作成するときに Add Component ボタンを使用したため

182
00:07:53,901 --> 00:07:55,901
これを整頓する必要があります。

183
00:07:56,553 --> 00:07:58,553
Scripts フォルダを開いて

184
00:07:59,012 --> 00:08:01,012
LevelDynamics フォルダの中に

185
00:08:01,012 --> 00:08:03,012
keyPickup をドロップします。

186
00:08:05,335 --> 00:08:07,335
これでシーンを保存して

187
00:08:08,139 --> 00:08:10,139
プレ尾ジェクトを保存します。

188
00:08:10,639 --> 00:08:12,639
次の課題ではドアの作業を進めます。

189
00:08:12,639 --> 00:08:14,639
具体的にはレベルに配置する

190
00:08:14,639 --> 00:08:17,353
シングルドアのところです。
(翻訳:gamesonytablet)
