1
00:00:00,801 --> 00:00:02,528
キーを拾うゲームメカニックの

2
00:00:02,528 --> 00:00:04,528
準備ができたので、次はレベルの

3
00:00:04,528 --> 00:00:05,913
ドアを作成します。

4
00:00:06,413 --> 00:00:08,413
このゲームでは二種類のドアがあり、

5
00:00:08,413 --> 00:00:10,789
ひとつはスライドするシングルドアで

6
00:00:10,789 --> 00:00:12,789
レベルの中の通常の部屋に設置されていて、

7
00:00:12,789 --> 00:00:14,789
二つめはスライドする扉が二つあるダブルドアであり、

8
00:00:14,789 --> 00:00:16,789
これは最後の昇降エレベーターについています。

9
00:00:16,789 --> 00:00:18,789
最初にシングルドアを作成します。

10
00:00:20,190 --> 00:00:22,190
初めにModels フォルダの中から

11
00:00:22,190 --> 00:00:25,052
doorGenericSlide モデルをみつけます。

12
00:00:25,552 --> 00:00:27,552
これをシーンビューの中にドラッグ＆ドロップして

13
00:00:28,392 --> 00:00:33,384
(-6, 0, 7) に配置します。

14
00:00:33,884 --> 00:00:35,884
Hierarchy の中でダブルクリックして、

15
00:00:35,884 --> 00:00:37,884
シーンビュー上でフォーカスをあてます。

16
00:00:39,972 --> 00:00:41,972
回転が正しくないことに気付くので

17
00:00:41,972 --> 00:00:45,317
Y 軸に 90 の値を入力します。

18
00:00:45,817 --> 00:00:47,817
ドアが 親子関係のあるゲームオブジェクト

19
00:00:47,817 --> 00:00:49,817
に分割されてることに注意して下さい。

20
00:00:51,653 --> 00:00:53,653
子オブジェクトにはメッシュ レンダラがあるので

21
00:00:53,653 --> 00:00:56,375
このときにUse Light Probes チェックボックスを有効にして

22
00:00:56,375 --> 00:00:58,375
ドアにライティングを適用します。

23
00:00:59,732 --> 00:01:01,732
親子のゲームオブジェクトにコライダを

24
00:01:01,732 --> 00:01:03,732
追加します。

25
00:01:03,732 --> 00:01:05,732
最初に静止状態を保つ

26
00:01:05,732 --> 00:01:07,732
親ゲームオブジェクトには

27
00:01:07,732 --> 00:01:09,732
プレイヤーまたは敵がドアに近づくときのための

28
00:01:09,732 --> 00:01:11,327
Sphere トリガー コライダが

29
00:01:11,327 --> 00:01:12,463
必要です。

30
00:01:13,328 --> 00:01:15,382
親オブジェクトを選択して

31
00:01:15,382 --> 00:01:18,856
Add Component - Physics - Sphere Collider を選択します。

32
00:01:19,545 --> 00:01:21,545
現時点では小さすぎて、また中心に位置していないので

33
00:01:21,545 --> 00:01:23,545
コライダをわずかに調整

34
00:01:23,545 --> 00:01:27,410
します。center の Y の値を 1 にセットして、

35
00:01:28,338 --> 00:01:30,338
radius (半径) を 3 にします。

36
00:01:35,249 --> 00:01:37,249
次にボックスコライダを、ドア自体のメッシュを保有する

37
00:01:37,249 --> 00:01:39,249
子ゲームオブジェクトに

38
00:01:39,249 --> 00:01:40,728
追加します。

39
00:01:41,228 --> 00:01:43,228
子オブジェクトを選択して

40
00:01:43,228 --> 00:01:47,037
Add Component - Physics - Box Collider を選択します。

41
00:01:48,684 --> 00:01:50,684
このボックス コライダはピタリと形にフィットするので

42
00:01:50,684 --> 00:01:52,684
調整をする必要はありません。

43
00:01:53,436 --> 00:01:55,436
次にやるべきことは開いたり閉じたりするドアの

44
00:01:55,436 --> 00:01:57,972
アニメータ コントローラを作成することです。

45
00:01:57,972 --> 00:01:59,968
プロジェクトパネルの

46
00:01:59,968 --> 00:02:02,503
Animators フォルダをハイライトして、Create をクリックして

47
00:02:02,503 --> 00:02:04,503
Animator Controller を選択します。

48
00:02:04,503 --> 00:02:07,458
アニメータの名前を SingleDoorAnimator にします。

49
00:02:08,349 --> 00:02:10,349
このアニメータ コントローラには

50
00:02:10,349 --> 00:02:12,849
パラメータは一つしか必要ありません。

51
00:02:12,849 --> 00:02:14,849
開くか閉じるべきか知る必要があります。

52
00:02:14,849 --> 00:02:17,868
この場合 boolean パラメータがちょうど良いものです。

53
00:02:18,368 --> 00:02:20,037
Animator パネルを開きます。

54
00:02:20,490 --> 00:02:22,983
パラメータの下から + のアイコンをクリックします。

55
00:02:23,973 --> 00:02:25,288
Bool を選択して

56
00:02:26,229 --> 00:02:28,229
Open という名前をつけます。

57
00:02:29,220 --> 00:02:31,220
次に、ステートとしたいアニメーションを

58
00:02:31,220 --> 00:02:33,688
アニメータ上にドラッグします。

59
00:02:34,262 --> 00:02:36,262
SingleDoor FBX の中には二つのアニメーションである

60
00:02:36,262 --> 00:02:38,857
Closed および Open があります。

61
00:02:39,858 --> 00:02:42,528
Models フォルダを開いて

62
00:02:42,528 --> 00:02:44,528
door_genericSlide を再選択します。

63
00:02:45,028 --> 00:02:47,028
上部の Animations タブをクリックすれば

64
00:02:47,028 --> 00:02:50,055
Closed および Open アニメーションをみることができます。

65
00:02:50,555 --> 00:02:52,555
これらのアニメーションの両方とも、

66
00:02:52,555 --> 00:02:54,555
ドアを遷移させたい二つの静止位置に

67
00:02:54,555 --> 00:02:55,999
すぎません。

68
00:02:56,499 --> 00:02:58,499
デフォルトでは閉じた状態にしたいので

69
00:02:58,499 --> 00:03:01,445
最初にドラッグをします。モデルを展開して

70
00:03:01,445 --> 00:03:04,941
デフォルトのステートとして Closed をドラッグします。

71
00:03:06,865 --> 00:03:08,865
次に Open をドラッグ＆ドロップします。

72
00:03:10,802 --> 00:03:12,802
次に二つのステートの間の遷移を行なう

73
00:03:12,802 --> 00:03:14,802
必要があります。Closed から Open に

74
00:03:14,802 --> 00:03:17,571
遷移するためには Open パラメータは

75
00:03:17,571 --> 00:03:20,509
true とする必要があります。逆に

76
00:03:20,509 --> 00:03:23,253
戻るように遷移するためには、Open パラメータを false にする必要があります。

77
00:03:23,253 --> 00:03:25,253
Condition として Open パラメータを使用して

78
00:03:25,253 --> 00:03:27,253
遷移を作成します。

79
00:03:27,253 --> 00:03:30,667
Closed を右クリックして、Make Transition を選択して

80
00:03:31,406 --> 00:03:33,050
Open をクリックします。

81
00:03:33,906 --> 00:03:35,906
Transition を選択して

82
00:03:37,843 --> 00:03:40,120
Open を選択して、Condition として

83
00:03:40,120 --> 00:03:42,120
デフォルトである true を残します。

84
00:03:43,212 --> 00:03:46,402
次に Open を右クリックして、 Make Transition を選択して

85
00:03:46,402 --> 00:03:48,402
Closed を選択します。

86
00:03:48,402 --> 00:03:50,402
Transition を選択して

87
00:03:50,402 --> 00:03:53,743
Conditions の下から Open を false にセットします。

88
00:03:54,432 --> 00:03:55,651
アニメータ コントローラで行なうべき

89
00:03:55,651 --> 00:03:57,651
最後のことは Transition をストレッチ

90
00:03:57,651 --> 00:04:00,750
することです。 Transition が長いほど

91
00:04:00,750 --> 00:04:03,558
スムーズかつドアのモーションの見た目が良くなります。

92
00:04:03,869 --> 00:04:06,501
150% ストレッチするために

93
00:04:06,501 --> 00:04:08,995
みてのとおり End ハンドルをドラッグします。

94
00:04:10,601 --> 00:04:13,008
Open の隣で パーセンテージがハイライトされることが

95
00:04:13,008 --> 00:04:15,008
確認できます。

96
00:04:19,062 --> 00:04:22,363
最初の Transitioon を再度選択して、同じことを行ないます。

97
00:04:27,980 --> 00:04:29,391
プレビューを行なうと次のような結果が

98
00:04:29,391 --> 00:04:31,391
確認できます。

99
00:04:33,617 --> 00:04:35,617
いいかえるとアニメーションは

100
00:04:35,617 --> 00:04:37,617
より長い時間がかかるようになり、

101
00:04:37,617 --> 00:04:40,394
Transition がより遅く発生します。

102
00:04:41,402 --> 00:04:43,402
アニメータ コントローラが完了した後

103
00:04:43,402 --> 00:04:45,402
アセットをドアのアニメータ コンポーネントの上に

104
00:04:45,402 --> 00:04:47,402
ドラッグします。

105
00:04:47,402 --> 00:04:50,286
このため Hierarchy の door_genericSlide を再選択して

106
00:04:52,074 --> 00:04:54,826
プロジェクトの Animators フォルダを選択して

107
00:04:54,826 --> 00:04:56,826
SingleDoorAnimator をアニメータの Controller 変数の上に

108
00:04:56,826 --> 00:04:59,949
ドラッグします。

109
00:05:01,218 --> 00:05:03,218
最後にやるべきことは

110
00:05:03,218 --> 00:05:05,218
Root モーションが適用されないようにすることです。

111
00:05:05,218 --> 00:05:07,218
ここでチェックボックスを無効にします。

112
00:05:08,562 --> 00:05:11,164
ドアのコライダは移動しているため

113
00:05:11,164 --> 00:05:13,443
Rigidbody を持たせる必要があります。

114
00:05:13,443 --> 00:05:14,896
コリジョンにより影響を受けないようにするため

115
00:05:14,896 --> 00:05:17,500
Kinematic に設定します。

116
00:05:18,000 --> 00:05:20,266
子オブジェクトを選択sいて

117
00:05:20,266 --> 00:05:23,764
Add Component - Physics - Rigidbody をクリックします。

118
00:05:24,680 --> 00:05:26,680
Use Gravity のチェックボックスを無効にして

119
00:05:26,680 --> 00:05:28,350
Is Kinematic チェックボックスを有効にします。

120
00:05:28,350 --> 00:05:30,084
ドアは開いたり、閉じたりしたとき、

121
00:05:30,084 --> 00:05:32,084
さらには入室が拒否されたとき、

122
00:05:32,084 --> 00:05:34,084
オーディオクリップを再生する必要が

123
00:05:34,084 --> 00:05:36,084
あります。このために

124
00:05:36,084 --> 00:05:38,413
オーディオ ソース コンポーネントを追加する必要があります。

125
00:05:39,164 --> 00:05:41,798
親オブジェクトを再選択して

126
00:05:41,798 --> 00:05:45,931
Add Component - Audio - Audio Source を選択します。

127
00:05:46,859 --> 00:05:48,859
ドアが開いたり、閉じたりすることを制御する

128
00:05:48,859 --> 00:05:50,859
スクリプトが必要です。

129
00:05:50,859 --> 00:05:52,859
DoorAnimation と名前をつけます。

130
00:05:52,859 --> 00:05:54,859
インスペクタの最下部にスクロールして

131
00:05:54,859 --> 00:05:58,173
Add Component をクリックして New Script を選択します。

132
00:05:58,173 --> 00:06:00,173
DoorAnimation と名前をつけます。

133
00:06:03,180 --> 00:06:05,180
スクリプトを起動して編集して、

134
00:06:06,625 --> 00:06:07,888
準備を進めていきます。

135
00:06:08,388 --> 00:06:10,388
プログラミングにおける重要なスキルとして

136
00:06:10,388 --> 00:06:12,388
コードをできるかぎり再利用性を高める

137
00:06:12,388 --> 00:06:14,388
ことが必要です。この目的のために

138
00:06:14,388 --> 00:06:16,388
シングル ドアおよび

139
00:06:16,388 --> 00:06:18,388
鍵が必要な昇降エレベータのダブルドアの両方で

140
00:06:18,388 --> 00:06:20,388
動作するスクリプトにしてみます。

141
00:06:20,388 --> 00:06:22,021
違いを明らかにするため、

142
00:06:22,021 --> 00:06:24,021
ひとつめの public である boolean 型 の

143
00:06:24,021 --> 00:06:26,640
requireKey 変数を作成します。

144
00:06:26,640 --> 00:06:27,938
ダブルドアの場合は後ほど

145
00:06:27,938 --> 00:06:29,938
インスペクタ上で true にすることが出来ます。

146
00:06:31,106 --> 00:06:33,106
オーディオ クリップにも

147
00:06:33,106 --> 00:06:35,526
二つの public 変数が必要です。ひとつはドアを開くとき

148
00:06:35,526 --> 00:06:37,526
の開閉音声を格納する変数と、ふたつめは

149
00:06:37,526 --> 00:06:39,526
鍵が必要であるときにプレイヤーがドアを通過して

150
00:06:39,526 --> 00:06:41,526
ブザーが鳴る音声を再生する変数です。

151
00:06:42,454 --> 00:06:44,454
次に参照がいくつか必要であるため

152
00:06:44,454 --> 00:06:47,218
プライベート変数として格納します。

153
00:06:47,218 --> 00:06:49,218
最初にアニメータ コンポーネントを使用しているため

154
00:06:49,218 --> 00:06:52,124
そこへの参照が必要です。

155
00:06:53,468 --> 00:06:55,128
アニメータ コンポーネントで作業をするため

156
00:06:55,128 --> 00:06:57,128
HashIDs スクリプトを

157
00:06:57,128 --> 00:06:59,128
使用できるようにしていきます。

158
00:07:00,611 --> 00:07:02,611
プレイヤーがトリガーゾーンに入ったか

159
00:07:02,611 --> 00:07:04,357
チェックする必要があるので

160
00:07:04,357 --> 00:07:06,357
プレイヤー ゲームオブジェクトへの参照も必要となります。

161
00:07:07,197 --> 00:07:09,197
もしドアに鍵が必要である場合

162
00:07:09,197 --> 00:07:11,197
プレイヤーが鍵を持っているかどうか知る必要があり

163
00:07:11,197 --> 00:07:12,881
そのためには、前の課題で作成した

164
00:07:12,881 --> 00:07:14,881
PlayerInventory スクリプトへの参照が

165
00:07:14,881 --> 00:07:16,881
必要となります。

166
00:07:17,381 --> 00:07:19,381
最後の変数は参照ではなく

167
00:07:19,381 --> 00:07:21,533
少し説明が必要な内容です。

168
00:07:21,533 --> 00:07:23,533
敵もプレイヤーと同様にドアを通過させるように

169
00:07:23,533 --> 00:07:25,533
する必要があります。

170
00:07:25,533 --> 00:07:27,533
すなわち、トリガーとなるコライダが

171
00:07:27,533 --> 00:07:29,533
潜在的には同時に複数ありうるということです。

172
00:07:29,533 --> 00:07:31,533
このためコライダが

173
00:07:31,533 --> 00:07:33,533
ドアがある状態に影響を与えるため

174
00:07:33,533 --> 00:07:35,533
トリガーに入ったか (enter)、出たか (exit) を

175
00:07:35,533 --> 00:07:37,026
知る必要があります。

176
00:07:37,026 --> 00:07:38,647
トリガーゾーンに何もトリガーするコライダがない場合は

177
00:07:38,647 --> 00:07:41,253
ドアは閉じた状態にする必要があり、

178
00:07:41,253 --> 00:07:43,253
トリガーするコライダが 0 より大きい場合は

179
00:07:43,253 --> 00:07:45,025
ドアは開いた状態にする必要があります。

180
00:07:45,025 --> 00:07:47,025
トリガーするコライダの数を

181
00:07:47,025 --> 00:07:49,025
トラッキングするために

182
00:07:49,025 --> 00:07:50,784
Count という名前の integer を使用します。

183
00:07:51,284 --> 00:07:54,016
クラス変数のセットアップができたので

184
00:07:54,016 --> 00:07:56,016
Awake 関数の中で参照をセットアップするために

185
00:07:56,016 --> 00:07:58,899
以前に行なってきたように FindGameObjectWithTag および

186
00:07:58,899 --> 00:08:01,304
GetComponent を使用します。

187
00:08:17,190 --> 00:08:19,190
このスクリプトでは二つの関数を主に使用します。

188
00:08:19,190 --> 00:08:21,605
OnTriggerEnter により

189
00:08:21,605 --> 00:08:23,605
Count を増加させる必要があるか判定して、

190
00:08:23,605 --> 00:08:25,605
OnTriggerExit により

191
00:08:25,605 --> 00:08:27,605
Count を減少させる必要があるか判定します。

192
00:08:27,605 --> 00:08:29,605
OnTriggerEnter から最初にみていきます。

193
00:08:31,063 --> 00:08:33,063
最初にトリガーするコライダのゲームオブジェクトが

194
00:08:33,063 --> 00:08:35,818
プレイヤーであるか確認します。

195
00:08:37,629 --> 00:08:39,629
もしプレイヤーである場合、

196
00:08:39,629 --> 00:08:41,629
そのドアが鍵を必要とするかチェックします。

197
00:08:45,582 --> 00:08:47,582
もし鍵を必要とするドアの場合

198
00:08:47,582 --> 00:08:49,582
プレイヤーが鍵を保有しているチェックします。

199
00:08:53,434 --> 00:08:55,296
もしプレイヤーが鍵を保有している場合

200
00:08:55,296 --> 00:08:57,296
ドアは開くこととなり、Count 変数を

201
00:08:57,296 --> 00:08:59,016
増加させます。

202
00:08:59,016 --> 00:09:01,016
もしプレイヤーが鍵を保有してない場合

203
00:09:01,016 --> 00:09:03,508
オーディオ ソース のオーディオクリップとして

204
00:09:03,508 --> 00:09:05,508
accessDeniedClip にセットして再生をします。

205
00:09:08,931 --> 00:09:10,931
次にドアに鍵が必要ないケースに

206
00:09:10,931 --> 00:09:12,931
戻ります。その場合

207
00:09:12,931 --> 00:09:14,931
ドアは誰でも通ることができて、

208
00:09:14,931 --> 00:09:17,622
このため Count は単に増加すべきです。

209
00:09:21,250 --> 00:09:23,250
さらにドアを開く敵も

210
00:09:23,250 --> 00:09:25,250
考慮する必要があります。もしトリガーする

211
00:09:25,250 --> 00:09:27,791
ゲームオブジェクトがプレイヤーでない場合

212
00:09:27,791 --> 00:09:29,791
Enemy タグがあるかチェックすべきです。

213
00:09:29,791 --> 00:09:31,791
このために Else If を使用します。

214
00:09:34,219 --> 00:09:36,219
次に、これまで使用してこなかったキーワードを

215
00:09:36,219 --> 00:09:38,219
使用します。

216
00:09:38,219 --> 00:09:39,613
敵には二つのコライダを

217
00:09:39,613 --> 00:09:42,707
つけます。大きな Sphere Collider を

218
00:09:42,707 --> 00:09:45,278
聴覚範囲や視覚範囲を示すものとして、

219
00:09:45,278 --> 00:09:47,278
さらにカプセル コライダにより

220
00:09:47,278 --> 00:09:49,278
他のコライダにぶつかったり

221
00:09:49,278 --> 00:09:50,750
ワールド空間の環境と相互作用ができるようにします。

222
00:09:51,387 --> 00:09:53,387
カプセルコライダがトリガーゾーンに入ったときだけ

223
00:09:53,387 --> 00:09:55,387
ドアが開くようにしていきます。

224
00:09:55,887 --> 00:09:57,887
このように動作させるために

225
00:09:57,887 --> 00:10:00,242
互いにチェックする方法を確立する必要があります。

226
00:10:00,242 --> 00:10:02,981
すなわちチェックするコライダがカプセル 凝りだであるか確認します。

227
00:10:03,523 --> 00:10:05,195
これを簡単に行なうために

228
00:10:05,195 --> 00:10:07,195
Is キーワードを使用します。

229
00:10:08,905 --> 00:10:11,524
この条件式が true であるば合い、

230
00:10:11,524 --> 00:10:13,059
Count を増加させます。

231
00:10:14,377 --> 00:10:16,377
Count を増加させるために

232
00:10:16,377 --> 00:10:18,377
OnTriggerEnter の使用については完了したので

233
00:10:18,377 --> 00:10:20,377
Count を減少させるためにも

234
00:10:20,377 --> 00:10:22,377
同様にして OnTriggerExit を使用します。

235
00:10:23,923 --> 00:10:25,923
Count を減少させるときは

236
00:10:25,923 --> 00:10:27,923
accessDeniedClip を再生させる必要がないため

237
00:10:27,923 --> 00:10:29,923
Count を減少させるために条件を

238
00:10:29,923 --> 00:10:31,582
集約します。

239
00:10:31,582 --> 00:10:33,582
条件としては

240
00:10:34,082 --> 00:10:36,082
もし衝突したオブジェクトのタグが

241
00:10:36,582 --> 00:10:38,582
Enemy であり、

242
00:10:38,582 --> 00:10:40,742
コライダがカプセルである場合

243
00:10:40,742 --> 00:10:43,083
Count を減少できます。二つの垂直の線を使用して

244
00:10:43,083 --> 00:10:46,369
Or を表現していることに注意してください。

245
00:10:47,678 --> 00:10:49,678
この条件の中で

246
00:10:49,678 --> 00:10:51,678
Count を減少させます。このときに Count が

247
00:10:51,678 --> 00:10:54,276
0 以下にならないようにします。

248
00:10:54,707 --> 00:10:56,996
つまり Count が 

249
00:10:56,996 --> 00:10:59,786
0 より大きい場合は Count を減少させると書きます。

250
00:11:00,286 --> 00:11:02,286
ここでは同様のことを

251
00:11:02,286 --> 00:11:05,740
Mathf.Max 関数を使用して実現します。

252
00:11:06,101 --> 00:11:08,101
この関数は複数の数字から

253
00:11:08,101 --> 00:11:10,101
もっとも大きいものを戻り値にします。

254
00:11:10,101 --> 00:11:12,101
このため、もし 0 および

255
00:11:12,101 --> 00:11:14,440
Count - 1 の値を与えた場合

256
00:11:14,815 --> 00:11:16,815
さらに Count が すでに 0 の場合は

257
00:11:16,815 --> 00:11:18,426
0 が戻り値になります。

258
00:11:18,426 --> 00:11:21,012
例えば、 Count が 0 である場合

259
00:11:21,012 --> 00:11:23,730
2 つの値のうち低いものは -1 となり

260
00:11:23,730 --> 00:11:25,730
Count が 0 にセットされる、という流れです。

261
00:11:25,730 --> 00:11:28,641
要するにこれにより Count を 0 にセットすることをさけて

262
00:11:28,641 --> 00:11:31,545
0 より大きい場合は 1 を引きます。

263
00:11:32,045 --> 00:11:34,045
最後にこのスクリプトで使用する必要のある関数は

264
00:11:34,045 --> 00:11:36,045
Update です。最初に 更新しないといけないのは

265
00:11:36,045 --> 00:11:38,834
アニメータのパラメータである Open です。

266
00:11:39,334 --> 00:11:41,334
Count が 0 より大きいとき、このパラメータは true であり

267
00:11:41,334 --> 00:11:44,457
そうでない場合は 0 です。

268
00:11:44,957 --> 00:11:47,476
さらにいうと Count >  0 という条件文は

269
00:11:47,476 --> 00:11:50,779
Count が 0 より大きいときは true となり

270
00:11:50,779 --> 00:11:52,453
そうでない場合は false になる、ということです。

271
00:11:52,453 --> 00:11:54,781
条件文の結果と等しくなるように

272
00:11:54,781 --> 00:11:56,781
Open パラメータをセットすることが出来ます。

273
00:11:57,281 --> 00:11:59,281
ドアの開閉する音声の再生についても

274
00:11:59,281 --> 00:12:01,003
みていきます。

275
00:12:01,003 --> 00:12:03,409
これはドアが移動しているときに再生すべきであり

276
00:12:03,409 --> 00:12:06,213
すなわちアニメータが遷移していたり

277
00:12:06,968 --> 00:12:09,613
オーディオがまだ再生されてないときです。

278
00:12:09,613 --> 00:12:12,928
IsInTransition の値がゼロなのは

279
00:12:12,928 --> 00:12:14,928
アニメータの Base Layer を示しています。

280
00:12:17,872 --> 00:12:19,872
スクリプトが完成したので、保存をして

281
00:12:19,872 --> 00:12:21,872
エディタに戻ります。

282
00:12:25,434 --> 00:12:27,434
スクリプトはすでに適用されているので

283
00:12:27,434 --> 00:12:29,434
ふたつのオーディオ クリップを

284
00:12:29,434 --> 00:12:31,943
スクリプトの public 変数を適用すれば

285
00:12:31,943 --> 00:12:33,943
シングルドアは準備完了です。

286
00:12:34,733 --> 00:12:36,151
インスペクタの最下部にある

287
00:12:36,151 --> 00:12:38,652
スクリプト コンポーネントから

288
00:12:38,652 --> 00:12:41,499
プロジェクト パネル上の Audio フォルダを開いて

289
00:12:41,499 --> 00:12:44,417
door_accessDenied を AccessDeniedClip にドラッグ＆ドロップして

290
00:12:44,917 --> 00:12:47,648
door_open を DoorSwishClip にドラッグ＆ドロップします。

291
00:12:49,194 --> 00:12:51,194
最後に、このシングルドアをプロジェクト フォルダに

292
00:12:51,194 --> 00:12:53,194
ドラッグしてプレハブとして

293
00:12:53,194 --> 00:12:54,855
保存します。

294
00:12:55,796 --> 00:12:57,796
Hierarchy から door_genericSlide を

295
00:12:57,796 --> 00:13:01,159
Prefabs フォルダにドロップします。

296
00:13:02,213 --> 00:13:03,831
レベルの残りのドアを配置して

297
00:13:03,831 --> 00:13:05,479
いきます。

298
00:13:08,776 --> 00:13:11,548
door_genericSlide の親オブジェクトを展開して

299
00:13:11,548 --> 00:13:13,000
選択をします。

300
00:13:14,325 --> 00:13:16,325
Edit - Duplicate を選択するか

301
00:13:16,699 --> 00:13:19,722
または Mac ならCmd + D、PC なら Ctrl + D として、

302
00:13:20,474 --> 00:13:22,474
複製されたドアを

303
00:13:22,474 --> 00:13:26,497
(-15.9, 0, 7). に配置します。

304
00:13:28,068 --> 00:13:30,068
もう一回複製して

305
00:13:32,761 --> 00:13:37,763
ドアを (-7.9, 0, 37) に配置します。

306
00:13:41,602 --> 00:13:44,310
シーンおよびプロジェクトを保存して

307
00:13:45,060 --> 00:13:47,060
ゲームのテストをします。

308
00:13:53,710 --> 00:13:55,710
みてのとおり、プレイヤー キャラクターはドアに

309
00:13:55,710 --> 00:13:58,166
ぶつかります。これは

310
00:13:58,166 --> 00:14:00,925
Sphere Collider で Is Trigger チェックボックスを有効にしてないためです。

311
00:14:03,681 --> 00:14:05,681
door_genericSlide のどれかを選択して

312
00:14:05,681 --> 00:14:09,014
Sphere Collider で Is Trigger チェックボックスを有効にします。

313
00:14:09,479 --> 00:14:11,479
インスペクタの最上部で Apply ボタンを押下します。

314
00:14:11,479 --> 00:14:14,221
プレハブにも変更は反映されて

315
00:14:14,221 --> 00:14:16,221
他のドアにも変更が

316
00:14:16,221 --> 00:14:17,881
反映されます。

317
00:14:17,881 --> 00:14:19,881
プレハブの便利なところは

318
00:14:19,881 --> 00:14:21,881
このように複製オブジェクトに簡単に反映できることです。

319
00:14:22,532 --> 00:14:24,532
ゲームをもう一回再生すると

320
00:14:26,847 --> 00:14:28,847
ドアが正しく動作することが確認できます。

321
00:14:40,147 --> 00:14:41,908
これで課題は完了です。

322
00:14:41,908 --> 00:14:43,908
最後に、オブジェクト上に作成した

323
00:14:43,908 --> 00:14:45,604
スクリプトの整頓をします。

324
00:14:46,320 --> 00:14:49,380
Assets フォルダを選択して Scripts フォルダに移動して

325
00:14:50,334 --> 00:14:52,334
DoorAnimation スクリプトを LevelDynamics フォルダに

326
00:14:52,334 --> 00:14:54,334
ドロップして

327
00:14:55,578 --> 00:14:57,578
シーンおよプロジェクトを

328
00:14:57,578 --> 00:14:59,578
もう一回保存して、

329
00:15:01,691 --> 00:15:03,122
これだ完了です。

330
00:15:03,713 --> 00:15:05,713
次の課題では

331
00:15:05,713 --> 00:15:07,128
レベルの最後にある昇降エレベーターにつながる

332
00:15:07,128 --> 00:15:08,824
ダブルドアをみていきます。
(翻訳:gamesonytablet)
